@namespace NodeService.WebServer.UI.Pages.ClientConfig.ClientUpdates
@page "/ClientConfig/ClientUpdates"
@using NodeService.WebServer.UI.Pages.Components
@inject NotificationService _notice
@inject ApiService ApiService
@inject ConfirmService _confirmService
@inject NavigationManager NavigationManager
<GridContent>
    <Modal Width="800"
           Title="@_modalTitle"
           Visible="@_editFormVisible"
           ConfirmLoading="@_editFormConfirmLoading"
           OnOk="@HandleEditFormOk"
           OnCancel="@HandleEditFormCancel">
        <Form Model="@_editModel" Size="@AntSizeLDSType.Default"
              LabelColSpan="4"
              Layout="@FormLayout.Horizontal"
              WrapperColSpan="20"
              OnFinish="OnEditFormFinish"
              OnFinishFailed="OnEditFormFinishFailed"
              @ref="@_editForm">

            <FormItem Label="名称">
                <Input @bind-Value="@context.Name"/>
            </FormItem>
            <FormItem Label="版本">
                <Input @bind-Value="@context.Version"/>
            </FormItem>
            <FormItem Label="公开">
                <RadioGroup @bind-Value="@context.Status" TValue="ClientUpdateStatus">
                    @foreach (var clientUpdateStatus in Enum.GetValues<ClientUpdateStatus>())
                    {
                        <Radio
                            RadioButton
                            Value="@clientUpdateStatus">
                            @(Enum.GetName(clientUpdateStatus))
                        </Radio>
                    }
                </RadioGroup>
            </FormItem>
            <FormItem Label="包">
                <PackageSelector Mode="SelectionMode.Single" @bind-SelectedItems="_selectedPackageConfigs"/>
            </FormItem>
            <FormItem Label="Dns过滤类型">
                <RadioGroup @bind-Value="@context.DnsFilterType">
                    <Radio RadioButton Value="@("include")">包含</Radio>
                    <Radio RadioButton Value="@("exclude")">排除</Radio>
                </RadioGroup>
            </FormItem>
            <FormItem Label="Dns过滤">
                <StringEntryTable @ref="_nodesTable"
                                  NameTitle="备注"
                                  ValueTitle="节点名称"
                                  ItemsSource="@context.DnsFilters"/>
            </FormItem>
        </Form>
    </Modal>

    <Space Style="margin-bottom:16px">
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="() => ShowEditForm()">新建配置</Button>
        </SpaceItem>
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="@_dataSource.RefreshAsync">刷新</Button>
        </SpaceItem>

    </Space>
    <Table
        Size="TableSize.Small"
        Loading="_loading"
        EnableVirtualization="true"
        TItem="ClientUpdateConfigModel"
        DataSource="@_dataSource.ItemsSource">
        <ColumnDefinitions>
            <PropertyColumn Title="标志" Ellipsis Sortable Property="c => c.Id"></PropertyColumn>
            <PropertyColumn Title="名称" Sortable Property="c => c.Name"></PropertyColumn>
            <PropertyColumn Title="版本" Sortable="true" Property="c => c.Version"></PropertyColumn>
            <PropertyColumn Title="状态" Sortable="true" Property="c => c.Status"></PropertyColumn>
            <ActionColumn Fixed="right" Width="250" Title="操作">
                <CellRender Context="cellData">
                    <Space>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Copy" OnClick="() => ShowEditForm(context.CopyClone<ClientUpdateConfigModel>())"></Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Edit" OnClick="() => ShowEditForm(context)"></Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Danger Icon="@IconType.Outline.Delete" OnClick="() => DeleteConfig(context)"></Button>
                        </SpaceItem>
                        @if (cellData.RowData.Expanded)
                        {
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.FullscreenExit" OnClick="() => cellData.RowData.Expanded = false"></Button>
                            </SpaceItem>
                        }
                        else
                        {
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Fullscreen" OnClick="() => cellData.RowData.Expanded = true"></Button>
                            </SpaceItem>
                        }

                    </Space>
                </CellRender>
            </ActionColumn>
        </ColumnDefinitions>
        <ExpandTemplate>
            <Tabs Animated>
                <TabPane Tab="@($"Dns{ConvertFilterType(context.Data.DnsFilterType)}列表")" Key="1">
                    <StringEntryTable ItemsSource="@context.Data.DnsFilters"
                                      NameTitle="备注"
                                      ValueTitle="Dns"
                                      IsEditable="false"/>
                </TabPane>
            </Tabs>
        </ExpandTemplate>
    </Table>
</GridContent>

@code {
    StringEntryTable _nodesTable;
    string _modalTitle;
    bool _editFormVisible;
    bool _editFormSubmitting;
    bool _editFormConfirmLoading;
    Form<ClientUpdateConfigModel> _editForm;
    ClientUpdateConfigModel _editModel = new();
    IEnumerable<PackageConfigModel> _selectedPackageConfigs;

    private bool _loading;
    RoutedPaginationDataSource<ClientUpdateConfigModel, PaginationQueryParameters> _dataSource;


    private async Task ShowEditForm(ClientUpdateConfigModel? model = null)
    {
        _editFormVisible = true;
        _loading = true;
        if (model == null)
        {
            _editModel = new ClientUpdateConfigModel
            {
                Id = Guid.NewGuid().ToString()
            };
            _modalTitle = "编辑配置";
        }
        else
        {
            _editModel = model;
            var packageConfig = await ApiService.GetPackageConfigAsync(model.PackageConfigId);
            _selectedPackageConfigs = packageConfig == null ? [] : [packageConfig];
            _modalTitle = "新建客户端更新配置";
        }

        _loading = false;
    }

    private async Task OnEditFormFinish(EditContext editContext)
    {
        try
        {
            var apiResponse = await ApiService.AddOrUpdateAsync(_editModel);
            if (apiResponse.ErrorCode == 0)
            {
                await _dataSource.RefreshAsync();
                _editFormVisible = false;
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = apiResponse.Message
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = ex.Message
            });
        }
        finally
        {
            _editFormSubmitting = false;
            _editFormConfirmLoading = false;
        }
    }

    private void OnEditFormFinishFailed(EditContext editContext)
    {
        _editFormSubmitting = false;
        _editFormConfirmLoading = false;
    }


    private Task<ConfirmResult> ShowConfirmDialogAsync(string title, string content)
    {
        var options = new ConfirmButtonOptions
        {
            Button1Props = new ButtonProps
            {
                ChildContent = "确定",
                Type = ButtonType.Primary
            },
            Button2Props = new ButtonProps
            {
                ChildContent = "取消"
            }
        };
        return _confirmService.Show(
            content,
            title,
            ConfirmButtons.OKCancel,
            ConfirmIcon.Info,
            options);
    }

    private async Task DeleteConfig(ClientUpdateConfigModel model)
    {
        try
        {
            if (await ShowConfirmDialogAsync("删除确认", "确定要删除吗？") != ConfirmResult.OK)
            {
                return;
            }

            var apiResponse = await ApiService.RemoveAsync(model);
            if (apiResponse.ErrorCode == 0)
            {
                await _dataSource.RefreshAsync();
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = apiResponse.Message
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = "加载配置失败"
            });
        }
    }


    private void HandleEditFormCancel(MouseEventArgs e)
    {
        _editFormSubmitting = false;
        _editFormVisible = false;
    }


    private async Task HandleEditFormOk(MouseEventArgs e)
    {
        if (_selectedPackageConfigs.IsNullOrEmpty())
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = "请选择包"
            });
            return;
        }

        _editModel.PackageConfigId = _selectedPackageConfigs.FirstOrDefault()?.Id;
        _editFormSubmitting = true;
        _editForm.Submit();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _dataSource = new RoutedPaginationDataSource<ClientUpdateConfigModel, PaginationQueryParameters>(NavigationManager, ApiService.QueryClientUpdateListAsync, StateHasChanged);
        _dataSource.Request();
    }

    private string ConvertFilterType(string filerType)
    {
        switch (filerType)
        {
            case "exclude":
                return "排除";
                break;
            case "include":
                return "包含";
                break;
            default:
                return string.Empty;
        }
    }


}