@namespace NodeService.WebServer.UI.Pages.CommonConfig.ClientUpdates
@page "/CommonConfig/ClientUpdates"
@inject NotificationService _notice
@inject ApiService ApiService
@inject ConfirmService _confirmService
@inject NavigationManager NavigationManager
@implements IDisposable
<GridContent>
    <Modal Width="800"
           Style="top:0"
           Title="@_modalTitle"
           @bind-Visible="@_editFormVisible"
           ConfirmLoading="@_editFormConfirmLoading"
           OnOk="@HandleEditFormOk"
           OnCancel="@HandleEditFormCancel">
        <Form Model="@_editModel" Size="@AntSizeLDSType.Default"
              LabelColSpan="4"
              Layout="@FormLayout.Horizontal"
              WrapperColSpan="20"
              OnFinish="OnEditFormFinish"
              OnFinishFailed="OnEditFormFinishFailed"
              @ref="@_editForm">

            <FormItem Label="名称">
                <Input @bind-Value="@context.Name"/>
            </FormItem>
            <FormItem Label="版本">
                <Input @bind-Value="@context.Version"/>
            </FormItem>
            <FormItem Label="公开">
                <RadioGroup @bind-Value="@context.Status" TValue="ClientUpdateStatus">
                    @foreach (var clientUpdateStatus in Enum.GetValues<ClientUpdateStatus>())
                    {
                        <Radio
                            RadioButton
                            Value="@clientUpdateStatus">
                            @(Enum.GetName(clientUpdateStatus))
                        </Radio>
                    }
                </RadioGroup>
            </FormItem>
            <FormItem Label="包">
                <PackageSelector Mode="SelectionMode.Single" @bind-SelectedItems="_selectedPackageConfigs"/>
            </FormItem>
            <FormItem Label="Dns过滤类型">
                <RadioGroup @bind-Value="@context.DnsFilterType">
                    <Radio RadioButton Value="@("include")">包含</Radio>
                    <Radio RadioButton Value="@("exclude")">排除</Radio>
                </RadioGroup>
            </FormItem>
            <FormItem Label="Dns过滤">
                <NodeSelector Mode="SelectionMode.Multiple" @bind-SelectedItems="_selectedNodes" />
            </FormItem>
        </Form>
    </Modal>

    <Table
        Size="TableSize.Small"
        Loading="_loading"
        EnableVirtualization="false"
        PageIndex="@_dataSource.PageIndex"
        PageSize="@_dataSource.PageSize"
        Total="@_dataSource.TotalCount"
        OnPageIndexChange="@_dataSource.OnPaginationEvent"
        OnPageSizeChange="@_dataSource.OnPaginationEvent"
        TItem="ClientUpdateConfigModel"
        DataSource="@_dataSource.ItemsSource">
        <TitleTemplate>
            <GridRow Style="margin-bottom:16px">
                <GridCol Span="6">
                    <Title Level="3">客户端更新配置</Title>
                </GridCol>
                <GridCol Span="6" Offset="12">
                    <Search Placeholder="搜索" @bind-Value="@_dataSource.QueryParameters.Keywords" OnSearch="@_dataSource.RefreshAsync"/>
                </GridCol>
            </GridRow>
            <GridRow>
                <Space>
                    <SpaceItem>
                        <Button Shape="@ButtonShape.Circle" Icon="@IconType.Outline.Plus" Type="@ButtonType.Primary" OnClick="() => ShowEditForm()"></Button>
                    </SpaceItem>
                    <SpaceItem>
                        <Button Shape="@ButtonShape.Circle" Icon="@IconType.Outline.Reload" Type="@ButtonType.Primary" OnClick="_dataSource.RefreshAsync"></Button>
                    </SpaceItem>
                </Space>
            </GridRow>
        </TitleTemplate>
        <ColumnDefinitions>
            <PropertyColumn Title="标志" Ellipsis Sortable Property="c => c.Id"></PropertyColumn>
            <PropertyColumn Title="名称" Sortable Property="c => c.Name"></PropertyColumn>
            <PropertyColumn Title="版本" Sortable="true" Property="c => c.Version"></PropertyColumn>
            <PropertyColumn Title="状态" Sortable="true" Property="c => c.Status"></PropertyColumn>
            <ActionColumn Fixed="right" Width="250" Title="操作">
                <CellRender Context="cellData">
                    <Space>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Copy" OnClick="() => ShowEditForm(context.CopyClone<ClientUpdateConfigModel>())"></Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Edit" OnClick="() => ShowEditForm(context)"></Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Danger Icon="@IconType.Outline.Delete" OnClick="() => DeleteConfig(context)"></Button>
                        </SpaceItem>

                    </Space>
                </CellRender>
            </ActionColumn>
        </ColumnDefinitions>
    </Table>
</GridContent>

@code {
    StringEntryTable _nodesTable;
    string _modalTitle;
    bool _editFormVisible;
    bool _editFormSubmitting;
    bool _editFormConfirmLoading;
    Form<ClientUpdateConfigModel> _editForm;
    ClientUpdateConfigModel _editModel = new();
    IEnumerable<PackageConfigModel> _selectedPackageConfigs;
    IEnumerable<NodeInfoModel> _selectedNodes;

    bool _loading;
    RoutedPaginationDataSource<ClientUpdateConfigModel, PaginationQueryParameters> _dataSource;


    async Task ShowEditForm(ClientUpdateConfigModel? model = null)
    {
        _editFormVisible = true;
        _loading = true;
        if (model == null)
        {
            _editModel = new ClientUpdateConfigModel
            {
                Id = Guid.NewGuid().ToString()
            };
            _modalTitle = "编辑配置";
        }
        else
        {
            _editModel = model;
            var packageConfig = await ApiService.GetPackageConfigAsync(model.PackageConfigId);
            _selectedPackageConfigs = packageConfig == null ? [] : [packageConfig];
            _selectedNodes = await _editModel.DnsFilters.LoadNodeListAsync(ApiService);
            _modalTitle = "新建客户端更新配置";
        }

        _loading = false;
    }

    async Task OnEditFormFinish(EditContext editContext)
    {
        try
        {
            if (_editModel.DnsFilters == null)
            {
                _editModel.DnsFilters = new List<StringEntry>();
            }
            _editModel.DnsFilters.Clear();
            _editModel.DnsFilters.AddRange(_selectedNodes.Select(x => new StringEntry(x.Name, x.Id)));
            var apiResponse = await ApiService.AddOrUpdateAsync(_editModel);
            if (apiResponse.ErrorCode == 0)
            {
                await _dataSource.RefreshAsync();
                _editFormVisible = false;
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = apiResponse.Message
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = ex.Message
            });
        }
        finally
        {
            _editFormSubmitting = false;
            _editFormConfirmLoading = false;
        }
    }

    void OnEditFormFinishFailed(EditContext editContext)
    {
        _editFormSubmitting = false;
        _editFormConfirmLoading = false;
    }


    Task<ConfirmResult> ShowConfirmDialogAsync(string title, string content)
    {
        var options = new ConfirmButtonOptions
        {
            Button1Props = new ButtonProps
            {
                ChildContent = "确定",
                Type = ButtonType.Primary
            },
            Button2Props = new ButtonProps
            {
                ChildContent = "取消"
            }
        };
        return _confirmService.Show(
            content,
            title,
            ConfirmButtons.OKCancel,
            ConfirmIcon.Info,
            options);
    }

    async Task DeleteConfig(ClientUpdateConfigModel model)
    {
        try
        {
            if (await ShowConfirmDialogAsync("删除确认", "确定要删除吗？") != ConfirmResult.OK)
            {
                return;
            }

            var apiResponse = await ApiService.RemoveAsync(model);
            if (apiResponse.ErrorCode == 0)
            {
                await _dataSource.RefreshAsync();
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = apiResponse.Message
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = "加载配置失败"
            });
        }
    }


    void HandleEditFormCancel(MouseEventArgs e)
    {
        _editFormSubmitting = false;
        _editFormVisible = false;
    }


    async Task HandleEditFormOk(MouseEventArgs e)
    {
        if (_selectedPackageConfigs.IsNullOrEmpty())
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = "请选择包"
            });
            return;
        }

        _editModel.PackageConfigId = _selectedPackageConfigs.FirstOrDefault()?.Id;
        _editFormSubmitting = true;
        _editForm.Submit();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _dataSource = new RoutedPaginationDataSource<ClientUpdateConfigModel, PaginationQueryParameters>(NavigationManager, ApiService.QueryClientUpdateListAsync, StateHasChanged);
        _dataSource.Request();
    }

    string ConvertFilterType(string filerType)
    {
        switch (filerType)
        {
            case "exclude":
                return "排除";
                break;
            case "include":
                return "包含";
                break;
            default:
                return string.Empty;
        }
    }

    public void Dispose()
    {
        _dataSource.Dispose();
    }

}