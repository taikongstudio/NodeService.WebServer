
@if (IsEditable)
{
    <Button Shape="@ButtonShape.Circle" Icon="@IconType.Outline.Plus" OnClick="AddNewItem" Type="primary" Style="margin-top:4px;margin-left:4px;margin-bottom:4px;">
    </Button>
    <Button Shape="@ButtonShape.Circle" Danger Icon="@IconType.Outline.Delete" OnClick="RemoveSelectedItems" Type="primary" Style="margin-top:4px;margin-left:4px;margin-bottom:4px;">
    </Button>
}

<Table 
       Context="mappingEntry"
       TItem="DateTimeFilter"
       DataSource="@ItemsSource"
       Size="TableSize.Small"
       SelectedRows="SelectedItems"
       SelectedRowsChanged="@OnSelectedItemsChanged"
       RowKey="x => x.Id">
    <Selection Key="@mappingEntry.Id" Type="checkbox"/>
    <PropertyColumn Hidden="@IsOperatorHidden" Title="@OperatorTitle" Property="c => c.Operator" Sortable>
        @if (mappingEntry.IsEditing && IsOperatorEditable)
        {
            if (OperatorList != null && OperatorList.Any())
            {
                <Select DataSource="@OperatorList"
                        @bind-Value="@mappingEntry.Operator"
                        TItem="EnumModel<CompareOperators>"
                        AutoFocus
                        TItemValue="CompareOperators"
                        LabelName="@nameof(EnumModel<CompareOperators>.Name)"
                        ValueName="@nameof(EnumModel<CompareOperators>.Value)" />
            }
        }
        else
        {
            <div class="editable-cell-value-wrap" @onclick="() => mappingEntry.BeginEdit()" style="padding-right:24px">@(FindCompareOperatorName(mappingEntry.Operator))</div>
        }
    </PropertyColumn>
    <PropertyColumn Title="@DateTimeTitle" Property="c => c.Values" Sortable>

        @if (mappingEntry.Operator == CompareOperators.WithinRange || mappingEntry.Operator == CompareOperators.OutOfRange)
        {        
            @if (mappingEntry.IsEditing && IsDateTimeEditable)
            {
                <RangePicker Format="yyyy-MM-dd HH:mm:ss" TValue="DateTime[]" @bind-Value="@mappingEntry.Values" ShowTime="@true" />
            }
            else if (IsDateTimeEditable)
            {
                <div class="editable-cell-value-wrap" style="padding-right:24px" @onclick="() => mappingEntry.BeginEdit()">
                    @($"{mappingEntry.Values[0].ToString("yyyy-MM-dd HH:mm:ss")} ~ {mappingEntry.Values[1].ToString("yyyy-MM-dd HH:mm:ss")}")
                </div>
            }
            else
            {
                <div class="editable-cell-value-wrap" style="padding-right:24px">
                    @($"{mappingEntry.Values[0].ToString("yyyy-MM-dd HH:mm:ss")} ~ {mappingEntry.Values[1].ToString("yyyy-MM-dd HH:mm:ss")}")
                </div>
            }

        }
        else
        {   
            if (mappingEntry.IsEditing && IsDateTimeEditable)
            {
                <DatePicker Format="yyyy-MM-dd HH:mm:ss" ShowTime="true" Type="text" Value="@mappingEntry.Values[0]" ValueChanged="(DateTime value) => OnValuesChanged(mappingEntry, [value,default])" AutoFocus="@(!IsOperatorEditable && IsDateTimeEditable)" />
            }
            else if (IsDateTimeEditable)
            {
                <div class="editable-cell-value-wrap" style="padding-right:24px" @onclick="() => mappingEntry.BeginEdit()">
                    @($"{mappingEntry.Values[0].ToString("yyyy-MM-dd HH:mm:ss")}")
                </div>
            }
            else
            {
                <div class="editable-cell-value-wrap" style="padding-right:24px">
                    @($"{mappingEntry.Values[0].ToString("yyyy-MM-dd HH:mm:ss")}")
                </div>
            }
        }

    </PropertyColumn>
    @if (IsEditable)
    {
        <ActionColumn Fixed="right" Width="100" Title="操作">
            <Space>
                @if (IsOperatorEditable || IsDateTimeEditable)
                {
                    @if (mappingEntry.IsEditing)
                    {
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Save" OnClick="() => mappingEntry.EndEdit()"></Button>
                        </SpaceItem>
                    }
                    else
                    {
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Edit" OnClick="() => mappingEntry.BeginEdit()"></Button>
                        </SpaceItem>
                    }
                }

                <SpaceItem>
                    <Button Shape="@ButtonShape.Circle" Danger Type="@ButtonType.Primary" Icon="@IconType.Outline.Delete" OnClick="() => RemoveSelectedItem(mappingEntry)"></Button>
                </SpaceItem>

            </Space>
        </ActionColumn>
    }

</Table>


@code {

    [Parameter] public IList<DateTimeFilter> ItemsSource { get; set; }


    public IEnumerable<DateTimeFilter> SelectedItems { get; set; } = [];


    [Parameter] public EventCallback<IEnumerable<DateTimeFilter>> SelectedItemsChanged { get; set; }

    [Parameter] public EventCallback<AddingNewItemEventArgs<DateTimeFilter>> AddingNewItem { get; set; }

    [Parameter] public EventCallback<ValueChangedEventArgs<DateTimeFilter, DateTime[]>> ValuesChanged { get; set; }


    [Parameter] public EventCallback<ValueChangedEventArgs<DateTimeFilter, CompareOperators>> SelectedOperatorChanged { get; set; }

    [Parameter] public string OperatorTitle { get; set; } = "运算符";

    [Parameter] public string DateTimeTitle { get; set; } = "时间";


    [Parameter] public bool IsOperatorEditable { get; set; } = true;

    [Parameter] public bool IsDateTimeEditable { get; set; } = true;

    [Parameter] public bool IsOperatorHidden { get; set; } = false;

    [Parameter] public bool IsEditable { get; set; } = true;

    [Parameter] public IEnumerable<EnumModel<CompareOperators>> OperatorList { get; set; } = [];

    [Parameter] public IEnumerable<DateTimeFilter> ValueList { get; set; } = [];

    void RemoveSelectedItem(DateTimeFilter value)
    {
        ItemsSource.Remove(value);
    }

    protected override Task OnParametersSetAsync()
    {
        if (!IsEditable)
        {
            IsOperatorEditable = false;
            IsDateTimeEditable = false;
        }

        return base.OnParametersSetAsync();
    }

    protected override void OnInitialized()
    {
        OperatorList = new List<EnumModel<CompareOperators>>()
        {
            new EnumModel<CompareOperators>()
            {
                 Name = "小于",
                 Value = CompareOperators.LessThan,
            },
            new EnumModel<CompareOperators>()
            {
                 Name = "小于等于",
                 Value = CompareOperators.LessThan,
            },
            new EnumModel<CompareOperators>()
            {
                 Name = "等于",
                 Value = CompareOperators.Equals,
            },
            new EnumModel<CompareOperators>()
            {
                 Name = "大于",
                 Value = CompareOperators.GreatThan,
            },
            new EnumModel<CompareOperators>()
            {
                 Name = "大于等于",
                 Value = CompareOperators.GreatThanEqual,
            },
            new EnumModel<CompareOperators>()
            {
                 Name = "范围内",
                 Value = CompareOperators.WithinRange,
            },
            new EnumModel<CompareOperators>()
            {
                 Name = "范围外",
                 Value = CompareOperators.OutOfRange,
            },
        };
        base.OnInitialized();
    }

    private string FindCompareOperatorName(CompareOperators range)
    {
        return OperatorList.FirstOrDefault(x => x.Value == range)?.Name ?? range.ToString();
    }

    async Task OnSelectedItemsChanged(IEnumerable<DateTimeFilter> items)
    {
        SelectedItems = items;
        await SelectedItemsChanged.InvokeAsync(items);
    }

    public void RemoveSelectedItems()
    {
        foreach (var item in SelectedItems)
        {
            ItemsSource.Remove(item);
        }

        SelectedItems = [];
    }

    async Task AddNewItem()
    {
        var entry = new DateTimeFilter();
        var e = new AddingNewItemEventArgs<DateTimeFilter>(entry);
        await AddingNewItem.InvokeAsync(e);
        if (e.Handled)
        {
            return;
        }

        ItemsSource.Add(entry);
        entry.BeginEdit();
    }


    async Task OnValuesChanged(DateTimeFilter filter, DateTime[] value)
    {
        var e = new ValueChangedEventArgs<DateTimeFilter, DateTime[]>(filter, value);
        if (ValuesChanged.HasDelegate)
        {
            await ValuesChanged.InvokeAsync(e);
        }
        if (!e.Handled)
        {
            filter.Values = value;
        }
    }

    async Task OnOperatorChanged(DateTimeFilter filter, CompareOperators value)
    {
        var e = new ValueChangedEventArgs<DateTimeFilter, CompareOperators>(filter, value);
        if (SelectedOperatorChanged.HasDelegate)
        {
            await SelectedOperatorChanged.InvokeAsync(e);
        }
        if (!e.Handled)
        {
            filter.Operator = value;
        }
    }


}