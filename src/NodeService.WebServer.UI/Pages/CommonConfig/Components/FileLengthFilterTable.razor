@if (IsEditable)
{
    <Button Shape="@ButtonShape.Circle" Icon="@IconType.Outline.Plus" OnClick="AddNewItem" Type="primary" Style="margin-top:4px;margin-left:4px;margin-bottom:4px;">
    </Button>
    <Button Shape="@ButtonShape.Circle" Danger Icon="@IconType.Outline.Delete" OnClick="RemoveSelectedItems" Type="primary" Style="margin-top:4px;margin-left:4px;margin-bottom:4px;">
    </Button>
}

<Table
    Context="mappingEntry"
    TItem="FileLengthFilter"
    DataSource="@ItemsSource"
    Size="TableSize.Small"
    SelectedRows="SelectedItems"
    SelectedRowsChanged="@OnSelectedItemsChanged"
    RowKey="x => x.Id">
    <Selection Key="@mappingEntry.Id" Type="checkbox"/>
    <PropertyColumn Hidden="@IsOperatorHidden" Title="@OperatorTitle" Property="c => c.Operator" Sortable>
        @if (mappingEntry.IsEditing && IsOperatorEditable)
        {
            if (CompareOperatorList != null && CompareOperatorList.Any())
            {
                <Select DataSource="@CompareOperatorList"
                        @bind-Value="@mappingEntry.Operator"
                        TItem="EnumModel<CompareOperator>"
                        AutoFocus
                        TItemValue="CompareOperator"
                        LabelName="@nameof(EnumModel<CompareOperator>.Name)"
                        ValueName="@nameof(EnumModel<CompareOperator>.Value)"/>
            }
        }
        else
        {
            <div class="editable-cell-value-wrap" @onclick="() => mappingEntry.BeginEdit()" style="padding-right:24px">@(FindCompareOperatorName(mappingEntry.Operator))</div>
        }
    </PropertyColumn>
    <PropertyColumn Hidden="@IsValuesHidden" Title="@ValuesTitle" Property="c => c.Values" Sortable>
        @if (mappingEntry.IsEditing && IsValuesEditable)
        {
            if (mappingEntry.Operator == CompareOperator.WithinRange || mappingEntry.Operator == CompareOperator.OutOfRange)
            {
                <AntDesign.InputNumber Value="@mappingEntry.Values[0]" OnChange="(double value) => OnValuesChanged(mappingEntry, [value, mappingEntry.Values[1]])"/>
                <Text>~</text>
                <AntDesign.InputNumber Value="@mappingEntry.Values[1]" OnChange="(double value) => OnValuesChanged(mappingEntry, [mappingEntry.Values[0], value])"/>
            }
            else
            {
                <AntDesign.InputNumber Value="@mappingEntry.Values[0]" OnChange="(double value) => OnValuesChanged(mappingEntry, [value, mappingEntry.Values[0]])"/>
            }
        }
        else
        {
            if (mappingEntry.Operator == CompareOperator.WithinRange || mappingEntry.Operator == CompareOperator.OutOfRange)
            {
                <div class="editable-cell-value-wrap" @onclick="() => mappingEntry.BeginEdit()" style="padding-right:24px">@($"{mappingEntry.Values[0]}~{mappingEntry.Values[1]}")</div>
            }
            else
            {
                <div class="editable-cell-value-wrap" @onclick="() => mappingEntry.BeginEdit()" style="padding-right:24px">@($"{mappingEntry.Values[0]}")</div>
            }
        }
    </PropertyColumn>
    <PropertyColumn Hidden="@IsLengthUnitHidden" Title="@FileLengthUnitTitle" Property="c => c.LengthUnit" Sortable>
        @if (mappingEntry.IsEditing && IsLengthUnitEditable)
        {
            if (LengthUnitList != null && LengthUnitList.Any())
            {
                <Select DataSource="@LengthUnitList"
                        @bind-Value="@mappingEntry.LengthUnit"
                        TItem="EnumModel<BinaryLengthUnit>"
                        AutoFocus
                        TItemValue="BinaryLengthUnit"
                        LabelName="@nameof(EnumModel<BinaryLengthUnit>.Name)"
                        ValueName="@nameof(EnumModel<BinaryLengthUnit>.Value)"/>
            }
        }
        else
        {
            <div class="editable-cell-value-wrap" @onclick="() => mappingEntry.BeginEdit()" style="padding-right:24px">@(FindLengthUnitName(mappingEntry.LengthUnit))</div>
        }
    </PropertyColumn>
    @if (IsEditable)
    {
        <ActionColumn Fixed="right" Width="100" Title="操作">
            <Space>
                @if (IsOperatorEditable || IsLengthUnitEditable || IsValuesEditable)
                {
                    @if (mappingEntry.IsEditing)
                    {
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Save" OnClick="() => mappingEntry.EndEdit()"></Button>
                        </SpaceItem>
                    }
                    else
                    {
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Edit" OnClick="() => mappingEntry.BeginEdit()"></Button>
                        </SpaceItem>
                    }
                }

                <SpaceItem>
                    <Button Shape="@ButtonShape.Circle" Danger Type="@ButtonType.Primary" Icon="@IconType.Outline.Delete" OnClick="() => RemoveSelectedItem(mappingEntry)"></Button>
                </SpaceItem>

            </Space>
        </ActionColumn>
    }

</Table>


@code {

    [Parameter] public IList<FileLengthFilter> ItemsSource { get; set; }


    public IEnumerable<FileLengthFilter> SelectedItems { get; set; } = [];


    [Parameter] public EventCallback<IEnumerable<FileLengthFilter>> SelectedItemsChanged { get; set; }

    [Parameter] public EventCallback<AddingNewItemEventArgs<FileLengthFilter>> AddingNewItem { get; set; }

    [Parameter] public EventCallback<ValueChangedEventArgs<FileLengthFilter, double[]>> ValuesChanged { get; set; }

    [Parameter] public EventCallback<ValueChangedEventArgs<FileLengthFilter, BinaryLengthUnit>> SelectedLengthUnitChanged { get; set; }

    [Parameter] public EventCallback<ValueChangedEventArgs<FileLengthFilter, CompareOperator>> SelectedOperatorChanged { get; set; }

    [Parameter] public string OperatorTitle { get; set; } = "运算符";

    [Parameter] public string FileLengthUnitTitle { get; set; } = "单位";

    [Parameter] public string ValuesTitle { get; set; } = "值";


    [Parameter] public bool IsOperatorEditable { get; set; } = true;

    [Parameter] public bool IsLengthUnitEditable { get; set; } = true;

    [Parameter] public bool IsValuesEditable { get; set; } = true;

    [Parameter] public bool IsOperatorHidden { get; set; } = false;

    [Parameter] public bool IsLengthUnitHidden { get; set; } = false;

    [Parameter] public bool IsValuesHidden { get; set; } = false;

    [Parameter] public bool IsEditable { get; set; } = true;

    [Parameter] public IEnumerable<EnumModel<CompareOperator>> CompareOperatorList { get; set; } = [];

    [Parameter] public IEnumerable<EnumModel<BinaryLengthUnit>> LengthUnitList { get; set; } = [];

    [Parameter] public IEnumerable<FileLengthFilter> ValueList { get; set; } = [];

    void RemoveSelectedItem(FileLengthFilter value)
    {
        ItemsSource.Remove(value);
    }

    protected override Task OnParametersSetAsync()
    {
        if (!IsEditable)
        {
            IsOperatorEditable = false;
            IsLengthUnitEditable = false;
            IsValuesEditable = false;
        }

        return base.OnParametersSetAsync();
    }

    protected override void OnInitialized()
    {
        CompareOperatorList =
        [
            new EnumModel<CompareOperator>()
            {
                Name = "小于",
                Value = CompareOperator.LessThan
            },
            new EnumModel<CompareOperator>()
            {
                Name = "小于等于",
                Value = CompareOperator.LessThan
            },
            new EnumModel<CompareOperator>()
            {
                Name = "等于",
                Value = CompareOperator.Equals
            },
            new EnumModel<CompareOperator>()
            {
                Name = "大于",
                Value = CompareOperator.GreatThan
            },
            new EnumModel<CompareOperator>()
            {
                Name = "大于等于",
                Value = CompareOperator.GreatThanEqual
            },
            new EnumModel<CompareOperator>()
            {
                Name = "范围内",
                Value = CompareOperator.WithinRange
            },
            new EnumModel<CompareOperator>()
            {
                Name = "范围外",
                Value = CompareOperator.OutOfRange
            }
        ];
        LengthUnitList =
        [
            new EnumModel<BinaryLengthUnit>()
            {
                Name = "KB",
                Value = BinaryLengthUnit.KB
            },
            new EnumModel<BinaryLengthUnit>()
            {
                Name = "MB",
                Value = BinaryLengthUnit.MB
            },
            new EnumModel<BinaryLengthUnit>()
            {
                Name = "GB",
                Value = BinaryLengthUnit.GB
            },
            new EnumModel<BinaryLengthUnit>()
            {
                Name = "PB",
                Value = BinaryLengthUnit.PB
            }
        ];
        base.OnInitialized();
    }

    private string FindCompareOperatorName(CompareOperator op)
    {
        return CompareOperatorList.FirstOrDefault(x => x.Value == op)?.Name ?? op.ToString();
    }

    private string FindLengthUnitName(BinaryLengthUnit unit)
    {
        return LengthUnitList.FirstOrDefault(x => x.Value == unit)?.Name ?? unit.ToString();
    }

    async Task OnSelectedItemsChanged(IEnumerable<FileLengthFilter> items)
    {
        SelectedItems = items;
        await SelectedItemsChanged.InvokeAsync(items);
    }

    public void RemoveSelectedItems()
    {
        foreach (var item in SelectedItems)
        {
            ItemsSource.Remove(item);
        }

        SelectedItems = [];
    }

    async Task AddNewItem()
    {
        var entry = new FileLengthFilter();
        var e = new AddingNewItemEventArgs<FileLengthFilter>(entry);
        await AddingNewItem.InvokeAsync(e);
        if (e.Handled)
        {
            return;
        }

        ItemsSource.Add(entry);
        entry.BeginEdit();
    }


    async Task OnValuesChanged(FileLengthFilter filter, double[] values)
    {
        var e = new ValueChangedEventArgs<FileLengthFilter, double[]>(filter, values);
        if (ValuesChanged.HasDelegate)
        {
            await ValuesChanged.InvokeAsync(e);
        }

        if (!e.Handled)
        {
            filter.Values = values;
        }
    }

    async Task OnOperatorChanged(FileLengthFilter filter, CompareOperator value)
    {
        var e = new ValueChangedEventArgs<FileLengthFilter, CompareOperator>(filter, value);
        if (SelectedOperatorChanged.HasDelegate)
        {
            await SelectedOperatorChanged.InvokeAsync(e);
        }

        if (!e.Handled)
        {
            filter.Operator = value;
        }
    }

    async Task OnFileLengthUnitChanged(FileLengthFilter filter, BinaryLengthUnit value)
    {
        var e = new ValueChangedEventArgs<FileLengthFilter, BinaryLengthUnit>(filter, value);
        if (SelectedLengthUnitChanged.HasDelegate)
        {
            await SelectedLengthUnitChanged.InvokeAsync(e);
        }

        if (!e.Handled)
        {
            filter.LengthUnit = value;
        }
    }


}