@using NodeService.WebServer.UI.Pages.Components
<style type="text/css">
    .CodeEditor {
    height:400px;
    border-color:dodgerblue;
    border-width:1px;
    }
</style>
@foreach (var kv in OptionValueEditors)
{
    var editorBase = kv.Value;
    <FormItem Style="border:1px;border-color:dodgerblue" Label="@(string.Format($"{kv.Key}"))">
        @switch (editorBase.EditorType)
        {
            case OptionValueType.TextValue:
                var textValueEditor = editorBase as TextValueEditor;
                <Input Disabled="@disabled" @bind-Value="@textValueEditor.Value" Type="text"></Input>
                break;
            case OptionValueType.NumberValue:
                var numberValueEditor = editorBase as NumberValueEditor;
                <Input Disabled="@disabled" @bind-Value="@numberValueEditor.Value" Type="number"></Input>
                break;
            case OptionValueType.BooleanValue:
                var booleanValueEditor = editorBase as BooleanValueEditor;
                <Switch Disabled="@disabled" @bind-Value="@booleanValueEditor.Value"></Switch>
                break;
            case OptionValueType.TextArrayValue:
                var textArrayValueEditor = editorBase as TextArrayValueEditor;
                <Button Disabled="@disabled" OnClick="() => textArrayValueEditor.AddNewItem()" Type="primary" Style="margin-top:4px;margin-left:4px;margin-bottom:4px;">
                </Button>
                <Button Disabled="@disabled" Danger OnClick="() => textArrayValueEditor.RemoveSelectedItems()" Type="primary" Style="margin-top:4px;margin-left:4px;margin-bottom:4px;">
                </Button>
                <StringEntryTable ItemsSource="@textArrayValueEditor.DataSource"
                                  NameTitle="备注"
                                  IsNameHidden
                                  ValueTitle="文本值"
                                  IsEditable="@IsEditable"
                                  @bind-SelectedItems="@textArrayValueEditor.SelectedItems"/>
                break;
            case OptionValueType.PythonCodeValue:
                var scriptCodeEditor = editorBase as PythonCodeEditor;
                <BlazorMonaco.Editor.StandaloneCodeEditor @ref="@_pythonCodeEditor" OnDidInit="InitAsync" CssClass="CodeEditor" ConstructionOptions="BuildPythonCodeEditorConstructionOptions"/>

                break;
            case OptionValueType.BatchScriptValue:
                var batchScriptCodeEditor = editorBase as BatchScriptCodeEditor;
                <BlazorMonaco.Editor.StandaloneCodeEditor @ref="@_batchScriptCodeEditor" OnDidInit="InitAsync" CssClass="CodeEditor" ConstructionOptions="BuildBatchScriptEditorConstructionOptions"/>

                break;
            case OptionValueType.FtpConfigurationListValue:
                var ftpConfigurationListEditor = editorBase as FtpConfigurationListEditor;
                <FtpConfigSelector Mode="SelectionMode.Multiple" @bind-SelectedItems="ftpConfigurationListEditor.SelectedItems"/>
                break;
            case OptionValueType.MysqlConfigurationListValue:
                var mysqlConfigurationListEditor = editorBase as MysqlConfigurationListEditor;
                <MysqlConfigSelector Mode="SelectionMode.Multiple" @bind-SelectedItems="mysqlConfigurationListEditor.SelectedItems"/>
                break;
            case OptionValueType.KafkaConfigurationListValue:
                var kafkaConfigurationListEditor = editorBase as KafkaConfigurationListEditor;
                <KafkaConfigSelector Mode="SelectionMode.Multiple" @bind-SelectedItems="kafkaConfigurationListEditor.SelectedItems"/>
                break;
            case OptionValueType.FtpConfigurationValue:
                var ftpConfigurationEditor = editorBase as FtpConfigurationEditor;
                <FtpConfigSelector Mode="SelectionMode.Single" @bind-SelectedItems="ftpConfigurationEditor.SelectedItems"/>
                break;
            case OptionValueType.MysqlConfigurationValue:
                var mysqlConfigurationEditor = editorBase as MysqlConfigurationEditor;
                <MysqlConfigSelector Mode="SelectionMode.Single" @bind-SelectedItems="mysqlConfigurationEditor.SelectedItems"/>
                break;
            case OptionValueType.KafkaConfigurationValue:
                var kafkaConfigurationEditor = editorBase as KafkaConfigurationEditor;
                <KafkaConfigSelector Mode="SelectionMode.Single" @bind-SelectedItems="kafkaConfigurationEditor.SelectedItems"/>
                break;
            case OptionValueType.FtpUploadConfigurationValue:
                var ftpUploadConfigurationEditor = editorBase as FtpUploadConfigurationEditor;
                <FtpUploadConfigSelector Mode="SelectionMode.Single" @bind-SelectedItems="ftpUploadConfigurationEditor.SelectedItems"/>
                break;
            case OptionValueType.FtpUploadConfigurationListValue:
                var ftpUploadConfigurationListEditor = editorBase as FtpUploadConfigurationListEditor;
                <FtpUploadConfigSelector Mode="SelectionMode.Multiple" @bind-SelectedItems="ftpUploadConfigurationListEditor.SelectedItems"/>
                break;
            case OptionValueType.LogUploadConfigurationValue:
                break;
            case OptionValueType.LogUploadConfigurationListValue:
                break;
            case OptionValueType.NodeEnvVarsConfigurationValue:
                var nodeEnvironmentVariablesConfigurationEditor = editorBase as NodeEnvVarsConfigurationEditor;
                <NodeEnvVarSelector Mode="SelectionMode.Single" @bind-SelectedItems="nodeEnvironmentVariablesConfigurationEditor.SelectedItems"/>
                break;
            case OptionValueType.NodeEnvVarsConfigurationListValue:
                var nodeEnvironmentVariablesConfigurationListEditor = editorBase as NodeEnvVarsConfigurationListEditor;
                <NodeEnvVarSelector Mode="SelectionMode.Multiple" @bind-SelectedItems="nodeEnvironmentVariablesConfigurationListEditor.SelectedItems"/>
                break;
            case OptionValueType.PackageConfigurationValue:
                var packageConfigurationEditor = editorBase as PackageConfigurationEditor;
                <PackageSelector Mode="SelectionMode.Single" @bind-SelectedItems="packageConfigurationEditor.SelectedItems"/>
                break;
            case OptionValueType.PackageConfigurationListValue:
                var packageConfigurationListEditor = editorBase as PackageConfigurationListEditor;
                <PackageSelector Mode="SelectionMode.Multiple" @bind-SelectedItems="packageConfigurationListEditor.SelectedItems"/>
                break;
            case OptionValueType.RestApiConfigurationValue:
                var restApiConfigurationEditor = editorBase as RestApiConfigurationEditor;
                <RestApiSelector Mode="SelectionMode.Single" @bind-SelectedItems="restApiConfigurationEditor.SelectedItems"/>
                break;
            case OptionValueType.RestApiConfigurationListValue:
                var restApiConfigurationListEditor = editorBase as RestApiConfigurationListEditor;
                <RestApiSelector Mode="SelectionMode.Multiple" @bind-SelectedItems="restApiConfigurationListEditor.SelectedItems"/>
                break;
            case OptionValueType.FtpDownloadConfigurationValue:
                var ftpDownloadConfigurationEditor = editorBase as FtpDownloadConfigurationEditor;
                <FtpDownloadConfigSelector Mode="SelectionMode.Single" @bind-SelectedItems="ftpDownloadConfigurationEditor.SelectedItems"/>
                break;
            case OptionValueType.FtpDownloadConfigurationListValue:
                var ftpDownloadConfigurationListEditor = editorBase as FtpDownloadConfigurationListEditor;
                <FtpDownloadConfigSelector Mode="SelectionMode.Multiple" @bind-SelectedItems="ftpDownloadConfigurationListEditor.SelectedItems"/>
                break;
        }

    </FormItem>
}

@code {

    StandaloneCodeEditor _batchScriptCodeEditor;
    StandaloneCodeEditor _pythonCodeEditor;

    [Parameter] public IEnumerable<KeyValuePair<string, EditorBase>> OptionValueEditors { get; set; } = [];

    [Parameter] public bool IsEditable { get; set; } = true;

    private bool disabled = false;

    protected override void OnInitialized()
    {
        if (IsEditable)
        {
            disabled = false;
        }
        else
        {
            disabled = true;
        }

        base.OnInitialized();
    }

    private StandaloneEditorConstructionOptions BuildPythonCodeEditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "python",
            Value = "#loading"
        };
    }

    private StandaloneEditorConstructionOptions BuildBatchScriptEditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "bat",
            Value = "rem loading"
        };
    }

    private async Task InitAsync()
    {
        foreach (var kv in OptionValueEditors)
        {
            var editorBase = kv.Value;
            switch (editorBase.EditorType)
            {
                case OptionValueType.PythonCodeValue:
                    var pythonCodeEditor = editorBase as PythonCodeEditor;
                    await _pythonCodeEditor.SetValue(pythonCodeEditor.Value ?? string.Empty);
                    if (!IsEditable)
                    {
                        await _pythonCodeEditor.UpdateOptions(new EditorUpdateOptions
                        {
                            ReadOnly = true
                        });
                    }

                    break;
                case OptionValueType.BatchScriptValue:
                    var batchScriptCodeEditor = editorBase as BatchScriptCodeEditor;
                    await _batchScriptCodeEditor.SetValue(batchScriptCodeEditor.Value ?? string.Empty);
                    if (!IsEditable)
                    {
                        await _batchScriptCodeEditor.UpdateOptions(new EditorUpdateOptions
                        {
                            ReadOnly = true
                        });
                    }

                    break;
            }
        }
    }


    public async Task CommitAsync()
    {
        foreach (var kv in OptionValueEditors)
        {
            var editorBase = kv.Value;
            switch (editorBase.EditorType)
            {
                case OptionValueType.PythonCodeValue:
                    var scriptCodeEditor = editorBase as PythonCodeEditor;
                    scriptCodeEditor.Value = await _pythonCodeEditor.GetValue();
                    break;
                case OptionValueType.BatchScriptValue:
                    var batchScriptCodeEditor = editorBase as BatchScriptCodeEditor;
                    batchScriptCodeEditor.Value = await _batchScriptCodeEditor.GetValue();
                    break;
            }
        }
    }

}