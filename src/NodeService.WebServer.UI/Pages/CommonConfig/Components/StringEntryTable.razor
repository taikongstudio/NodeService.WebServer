@if (IsEditable)
{
    <Button Shape="@ButtonShape.Circle" Icon="@IconType.Outline.Plus" OnClick="AddNewItem" Type="primary" Style="margin-top:4px;margin-left:4px;margin-bottom:4px;">
    </Button>
    <Button Shape="@ButtonShape.Circle" Danger Icon="@IconType.Outline.Delete" OnClick="RemoveSelectedItems" Type="primary" Style="margin-top:4px;margin-left:4px;margin-bottom:4px;">
    </Button>
}

<Table @ref="_table"
       Context="mappingEntry"
       TItem="StringEntry"
       DataSource="@ItemsSource"
       Size="TableSize.Small"
       SelectedRows="SelectedItems"
       SelectedRowsChanged="@OnSelectedItemsChanged"
       RowKey="x => x.Id">
    <Selection Key="@mappingEntry.Id" Type="checkbox"/>
    <PropertyColumn Hidden="@IsNameHidden" Title="@NameTitle" Property="c => c.Name" Sortable>
        @if (mappingEntry.IsEditing && IsNameEditable)
        {
            if (NameList != null && NameList.Any())
            {
                <Select DataSource="@NameList"
                        @bind-value="@mappingEntry.Name"
                        TItem="StringEntry"
                        AutoFocus
                        TItemValue="string"
                        LabelName="@nameof(StringEntry.Name)"
                        ValueName="@nameof(StringEntry.Value)" />
            }
            else
            {
                <Input Type="text" @bind-Value="@mappingEntry.Name" AutoFocus="@IsNameEditable" />
            }
        }
        else if (IsNameEditable)
        {
            <div class="editable-cell-value-wrap" style="padding-right:24px" @onclick="() => mappingEntry.BeginEdit()">
                @mappingEntry.Name
            </div>
        }
        else
        {
            <div class="editable-cell-value-wrap" style="padding-right:24px">@mappingEntry.Name</div>
        }
    </PropertyColumn>
    <PropertyColumn Hidden="@IsValueHidden" Title="@ValueTitle" Property="c => c.Value" Sortable>
        @if (mappingEntry.IsEditing && IsValueEditable)
        {
            if (ValueList != null && ValueList.Any())
            {
                <Select DataSource="@ValueList"
                        @bind-value="@mappingEntry.Name"
                        TItem="StringEntry"
                        AutoFocus
                        TItemValue="string"
                        LabelName="@nameof(StringEntry.Name)"
                        ValueName="@nameof(StringEntry.Value)" />
            }
            else
            {
                <Input Type="text" @bind-Value="@mappingEntry.Value" AutoFocus="@(!IsNameEditable && IsValueEditable)" />
            }
        }
        else if (IsValueEditable)
        {
            <div class="editable-cell-value-wrap" style="padding-right:24px" @onclick="() => mappingEntry.BeginEdit()">
                @mappingEntry.Value
            </div>
        }
        else
        {
            <div class="editable-cell-value-wrap" style="padding-right:24px">@mappingEntry.Value</div>
        }
    </PropertyColumn>
    <PropertyColumn Hidden="@IsTagHidden" Title="@TagTitle" Property="c => c.Tag" Sortable>
        @if (mappingEntry.IsEditing && IsTagEditable)
        {
            <Input Type="text" @bind-Value="@mappingEntry.Tag" AutoFocus="@(!IsNameEditable && IsTagEditable)"/>
        }
        else if (IsTagEditable)
        {
            <div class="editable-cell-value-wrap" style="padding-right:24px" @onclick="() => mappingEntry.BeginEdit()">
                @mappingEntry.Tag
            </div>
        }
        else
        {
            <div class="editable-cell-value-wrap" style="padding-right:24px">@mappingEntry.Tag</div>
        }
    </PropertyColumn>
    @if (IsEditable)
    {
        <ActionColumn Fixed="right" Width="100" Title="操作">
            <Space>
                @if (IsNameEditable || IsValueEditable || IsTagEditable)
                {
                    @if (mappingEntry.IsEditing)
                    {
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Save" OnClick="() => mappingEntry.EndEdit()"></Button>
                        </SpaceItem>
                    }
                    else
                    {
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Edit" OnClick="() => mappingEntry.BeginEdit()"></Button>
                        </SpaceItem>
                    }
                }

                <SpaceItem>
                    <Button Shape="@ButtonShape.Circle" Danger Type="@ButtonType.Primary" Icon="@IconType.Outline.Delete" OnClick="() => RemoveSelectedItem(mappingEntry)"></Button>
                </SpaceItem>

            </Space>
        </ActionColumn>
    }

</Table>


@code {
    private ITable _table;


    [Parameter] public IList<StringEntry> ItemsSource { get; set; }


    public IEnumerable<StringEntry> SelectedItems { get; private set; } = [];


    [Parameter] public EventCallback<IEnumerable<StringEntry>> SelectedItemsChanged { get; set; }

    [Parameter] public EventCallback<AddingNewItemEventArgs> AddingNewItem { get; set; }

    [Parameter] public EventCallback<ValueChangingEventArgs<string>> ValueChanging { get; set; }

    [Parameter] public EventCallback<ValueChangingEventArgs<string>> NameChanging { get; set; }

    [Parameter] public string NameTitle { get; set; } = "名称";

    [Parameter] public string ValueTitle { get; set; } = "值";

    [Parameter] public string TagTitle { get; set; } = "标签";

    [Parameter] public bool IsNameEditable { get; set; } = true;

    [Parameter] public bool IsValueEditable { get; set; } = true;

    [Parameter] public bool IsNameHidden { get; set; } = false;

    [Parameter] public bool IsValueHidden { get; set; } = false;

    [Parameter] public bool IsTagHidden { get; set; } = true;

    [Parameter] public bool IsTagEditable { get; set; } = false;


    [Parameter] public bool IsEditable { get; set; } = true;

    [Parameter] public IEnumerable<StringEntry> NameList { get; set; } = [];

    [Parameter] public IEnumerable<StringEntry> ValueList { get; set; } = [];

    private void RemoveSelectedItem(StringEntry value)
    {
        ItemsSource.Remove(value);
    }

    protected override Task OnParametersSetAsync()
    {
        if (!IsEditable)
        {
            IsNameEditable = false;
            IsValueEditable = false;
            IsTagEditable = false;
        }

        return base.OnParametersSetAsync();
    }

    private async Task OnSelectedItemsChanged(IEnumerable<StringEntry> items)
    {
        SelectedItems = items;
        await SelectedItemsChanged.InvokeAsync(items);
    }

    public void RemoveSelectedItems()
    {
        foreach (var item in SelectedItems)
        {
            ItemsSource.Remove(item);
        }

        SelectedItems = [];
    }

    private async Task AddNewItem()
    {
        var entry = new StringEntry();
        var e = new AddingNewItemEventArgs(entry);
        await AddingNewItem.InvokeAsync(e);
        if (e.Handled)
        {
            return;
        }

        ItemsSource.Add(entry);
        entry.BeginEdit();
    }


    private async Task OnValueChanging(StringEntry stringEntry, string? value)
    {
        var e = new ValueChangingEventArgs<string>(stringEntry, value);
        await ValueChanging.InvokeAsync(e);
    }


}