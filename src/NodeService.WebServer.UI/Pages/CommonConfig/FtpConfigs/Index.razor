@namespace NodeService.WebServer.UI.Pages.CommonConfig.FtpConfigs
@page "/CommonConfig/FtpConfigs"
@inject NotificationService _notice
@inject ApiService ApiService
@inject ConfirmService _confirmService
<GridContent>
    <Modal Width="800"
           Title="@_modalTitle"
           Visible="@_editFormVisible"
           ConfirmLoading="@_editFormConfirmLoading"
           OnOk="@HandleEditFormOk" 
           OnCancel="@HandleEditFormCancel">
        <Form Model="@_editModel" Size="@AntSizeLDSType.Default"
              LabelColSpan="4" 
              Layout="@FormLayout.Horizontal"
              WrapperColSpan="20"
              OnFinish="OnEditFormFinish"
              OnFinishFailed="OnEditFormFinishFailed"
              @ref="@_editForm">
            <FormItem Label="配置名称">
                <Input @bind-Value="@context.Name"  />
             </FormItem>
             <FormItem Label="主机名称">
                <Input @bind-Value="@context.Host" />
             </FormItem>
             <FormItem Label="端口">
                <AntDesign.InputNumber @bind-Value="@context.Port" />
             </FormItem>
             <FormItem Label="用户名称">
                <Input @bind-Value="@context.Username" />
             </FormItem>
             <FormItem Label="密码">
                <InputPassword  @bind-Value="@context.Password" />
             </FormItem>
            <FormItem Label="读取超时">
                <AntDesign.InputNumber Style="width:300px" PlaceHolder="请输入超时（毫秒）" @bind-Value="@context.ReadTimeout" />
            </FormItem>
            <FormItem Label="连接超时">
                <AntDesign.InputNumber Style="width:300px" PlaceHolder="请输入超时（毫秒）" @bind-Value="@context.ConnectTimeout" />
            </FormItem>
            <FormItem Label="数据通信读取超时">
                <AntDesign.InputNumber Style="width:300px" PlaceHolder="请输入超时（毫秒）" @bind-Value="@context.DataConnectionReadTimeout" />
            </FormItem>
            <FormItem Label="数据通信连接超时">
                <AntDesign.InputNumber Style="width:300px" PlaceHolder="请输入超时（毫秒）" @bind-Value="@context.DataConnectionConnectTimeout" />
            </FormItem>
        </Form>
    </Modal>

    <Space Style="margin-bottom:16px">
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="()=>ShowEditForm()">新建配置</Button>
        </SpaceItem>
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="()=>this.QueryConfigurationListAsync()">刷新</Button>
        </SpaceItem>

    </Space>
<Table @ref="@_table" Size="TableSize.Small" 
           Loading="_loading"
           EnableVirtualization="true"
           TItem="FtpConfigModel"
           Resizable
           OnChange="OnTableChange"
           DataSource="@_dataSource.Items" 
           PageIndex="_dataSource.PageIndex"
           PageSize="_dataSource.PageSize"
           OnPageIndexChange="@_dataSource.OnPageSizeChanged"
           OnPageSizeChange="@_dataSource.OnPageSizeChanged">
        <TitleTemplate>
            <GridRow Style="margin-bottom:16px">
                <GridCol Span="4">
                    <Title Level="3">Ftp配置</Title>
                </GridCol>
                <GridCol Span="4" Offset="20">
                    <Search Placeholder="搜索" @bind-Value="@_searchText" OnSearch="()=>_table?.ReloadData()" />
                </GridCol>
            </GridRow>
        </TitleTemplate>
    <ColumnDefinitions>
    <PropertyColumn Title="标志" Ellipsis Sortable Property="c=>c.Id"></PropertyColumn>
    <PropertyColumn Title="名称" Sortable Property="c=>c.Name"></PropertyColumn>
    <PropertyColumn Title="主机名称" Sortable="true" Property="c=>c.Host"></PropertyColumn>
    <PropertyColumn Title="端口" Sortable="true" Property="c=>c.Port"></PropertyColumn>
    <PropertyColumn Title="用户名称" Sortable="true" Property="c=>c.Username"></PropertyColumn>
    <PropertyColumn Title="密码" Sortable="true" Property="c=>c.Password">
             <Text>@string.Join(string.Empty,context.Password.Select(x=>'*'))</Text>
    </PropertyColumn>
                <ActionColumn Fixed="right" Width="250" Title="操作">
                    <CellRender Context="cellData">
                        <Space>
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Copy" OnClick="()=>ShowEditForm(context.CopyClone<FtpConfigModel>())"></Button>
                            </SpaceItem>
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Edit" OnClick="()=>ShowEditForm(context)"></Button>
                            </SpaceItem>
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Danger Icon="@IconType.Outline.Delete" OnClick="()=>DeleteConfig(context)"></Button>
                         </SpaceItem>
                         @if (cellData.RowData.Expanded)
                        {
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.FullscreenExit" OnClick="()=>cellData.RowData.Expanded=false"></Button>
                            </SpaceItem>
                        }
                        else
                        {
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Fullscreen" OnClick="()=>cellData.RowData.Expanded=true"></Button>
                            </SpaceItem>
                        }

                    </Space>
                </CellRender>
            </ActionColumn>
    </ColumnDefinitions>
    <ExpandTemplate>
         <Tabs Animated>
                <TabPane Tab="参数" Key="1">
                    @if (context.Data != null)
                    {
                        var data = new List<StringEntry>([
                            new StringEntry("连接超时",context.Data.ConnectTimeout.ToString()),
                            new StringEntry("读取超时", context.Data.ReadTimeout.ToString()),
                            new StringEntry("数据通信读取超时", context.Data.DataConnectionReadTimeout.ToString()),
                            new StringEntry("数据通信连接超时", context.Data.DataConnectionConnectTimeout.ToString()),
                        ]);
                        <StringEntryTable DataSource="@data"
                        NameTitle="备注"
                        ValueTitle="值"
                        IsEditable="false" />
                    }

                </TabPane>
            </Tabs>
    </ExpandTemplate>
</Table>
</GridContent>

@code {
        ITable _table;
        string _searchText;
        string _modalTitle;
        bool _editFormVisible = false;
        bool _editFormSubmitting = false;
        bool _editFormConfirmLoading = false;
        Form<FtpConfigModel> _editForm;
        FtpConfigModel _editModel = new FtpConfigModel();

    private bool _loading;
    private PaginationDataSource<FtpConfigModel> _dataSource;

    protected override void OnInitialized()
    {
        _dataSource = new PaginationDataSource<FtpConfigModel>(ApiService);
        _dataSource.Filter = FilterModel;
        base.OnInitialized();
    }

    private void ShowEditForm(FtpConfigModel? model = null)
    {
        this._editFormVisible = true;
        if (model == null)
        {
            this._editModel = new FtpConfigModel()
                {
                    Id = Guid.NewGuid().ToString()
                };
            this._modalTitle = "编辑配置";
        }
        else
        {
            this._editModel = model.ReferenceClone<FtpConfigModel>();
            this._modalTitle = "新建配置";
        }
    }

    private async Task OnEditFormFinish(EditContext editContext)
    {
        try
        {
            var apiResponse = await this.ApiService.AddOrUpdateAsync(this._editModel);
            if (apiResponse.ErrorCode == 0)
            {
                await this._dataSource.UpdateSourceAsync();
                this._editFormVisible = false;
            }
            else
            {
                await this._notice.Open(new NotificationConfig()
                    {
                        Message = "错误提示",
                        Description = apiResponse.Message,
                    });
            }
        }
        catch (Exception ex)
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Message = "错误提示",
                    Description = ex.Message,
                });
        }
        finally
        {
            this._editFormSubmitting = false;
            this._editFormConfirmLoading = false;
        }
    }

    private void OnEditFormFinishFailed(EditContext editContext)
    {
        this._editFormSubmitting = false;
        this._editFormConfirmLoading = false;
    }


    private Task<ConfirmResult> ShowConfirmDialogAsync(string title, string content)
    {
        var options = new ConfirmButtonOptions()
            {
                Button1Props = new AntDesign.ButtonProps()
                {
                    ChildContent = "确定",
                    Type = ButtonType.Primary,
                },
                Button2Props = new AntDesign.ButtonProps()
                {
                    ChildContent = "取消"
                }
            };
        return _confirmService.Show(
                content,
                title,
                ConfirmButtons.OKCancel,
                ConfirmIcon.Info,
                options);
    }

    private async Task DeleteConfig(FtpConfigModel model)
    {
        try
        {
            if (await ShowConfirmDialogAsync("删除确认", "确定要删除吗？") != ConfirmResult.OK)
            {
                return;
            }
            var apiResponse = await this.ApiService.RemoveAsync(model);
            if (apiResponse.ErrorCode == 0)
            {
                await this._dataSource.UpdateSourceAsync();
            }
            else
            {
                await this._notice.Open(new NotificationConfig()
                    {
                        Message = "错误提示",
                        Description = apiResponse.Message,
                    });
            }
        }
        catch (Exception ex)
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Message = "错误提示",
                    Description = "加载配置失败",
                });
        }
    }


    private void HandleEditFormCancel(MouseEventArgs e)
    {
        this._editFormSubmitting = false;
        this._editFormVisible = false;
    }


    private void HandleEditFormOk(MouseEventArgs e)
    {
        this._editFormSubmitting = true;
        this._editForm.Submit();


    }

    protected override async Task OnInitializedAsync()
    {
        this._loading = true;
        await this.QueryConfigurationListAsync().ConfigureAwait(false);
        this._loading = false;
    }

    private async Task QueryConfigurationListAsync()
    {
        try
        {
            await this._dataSource.UpdateSourceAsync();
        }
        catch (Exception ex)
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Message = "错误提示",
                    Description = ex.ToString(),
                });
        }

    }

    private bool FilterModel(FtpConfigModel model)
    {
        if (string.IsNullOrEmpty(model.Name) || string.IsNullOrEmpty(_searchText))
        {
            return true;
        }
        return model.Name.Contains(this._searchText, StringComparison.OrdinalIgnoreCase);
    }

    void OnTableChange(QueryModel<FtpConfigModel> query)
    {
        this._dataSource.SetItemsSource(query.ExecuteQuery(this._dataSource.ItemsSource.AsQueryable()));
        this._dataSource.Refresh();
    }

}
