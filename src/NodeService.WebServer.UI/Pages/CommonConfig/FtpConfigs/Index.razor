@namespace NodeService.WebServer.UI.Pages.CommonConfig.FtpConfigs
@page "/CommonConfig/Ftp"
@inject NotificationService _notice
@inject ApiService ApiService
@inject ConfirmService _confirmService
@inject NavigationManager NavigationManager
@implements IDisposable
<GridContent>
    <Modal Width="800"
           Style="top:0"
           Title="@_modalTitle"
           @bind-Visible="@_editFormVisible"
           ConfirmLoading="@_editFormConfirmLoading"
           OnOk="@HandleEditFormOk"
           OnCancel="@HandleEditFormCancel">
        <Form Model="@_editModel" Size="@AntSizeLDSType.Default"
              LabelColSpan="4"
              Layout="@FormLayout.Horizontal"
              WrapperColSpan="20"
              OnFinish="OnEditFormFinish"
              OnFinishFailed="OnEditFormFinishFailed"
              @ref="@_editForm">
            <FormItem Label="配置名称">
                <Input @bind-Value="@context.Name"/>
            </FormItem>
            <FormItem Label="主机名称">
                <Input @bind-Value="@context.Host"/>
            </FormItem>
            <FormItem Label="端口">
                <AntDesign.InputNumber @bind-Value="@context.Port"/>
            </FormItem>
            <FormItem Label="用户名称">
                <Input @bind-Value="@context.Username"/>
            </FormItem>
            <FormItem Label="密码">
                <InputPassword @bind-Value="@context.Password"/>
            </FormItem>
            <FormItem Label="读取超时">
                <AntDesign.InputNumber Style="width:300px" PlaceHolder="请输入超时（毫秒）" @bind-Value="@context.ReadTimeout"/>
            </FormItem>
            <FormItem Label="连接超时">
                <AntDesign.InputNumber Style="width:300px" PlaceHolder="请输入超时（毫秒）" @bind-Value="@context.ConnectTimeout"/>
            </FormItem>
            <FormItem Label="数据通信读取超时">
                <AntDesign.InputNumber Style="width:300px" PlaceHolder="请输入超时（毫秒）" @bind-Value="@context.DataConnectionReadTimeout"/>
            </FormItem>
            <FormItem Label="数据通信连接超时">
                <AntDesign.InputNumber Style="width:300px" PlaceHolder="请输入超时（毫秒）" @bind-Value="@context.DataConnectionConnectTimeout"/>
            </FormItem>
        </Form>
    </Modal>

    <Table @ref="@_table" Size="TableSize.Small"
           Loading="@_dataSource.IsLoading"
           EnableVirtualization="false"
           TItem="FtpConfigModel"
           Resizable
           OnChange="OnTableChange"
           DataSource="@_dataSource.ItemsSource"
           PageIndex="@_dataSource.PageIndex"
           PageSize="@_dataSource.PageSize"
           Total="@_dataSource.TotalCount"
           OnPageIndexChange="@_dataSource.OnPaginationEvent"
           OnPageSizeChange="@_dataSource.OnPaginationEvent">
        <TitleTemplate>
            <GridRow Style="margin-bottom:16px">
                <GridCol Span="6">
                    <Title Level="3">Ftp配置</Title>
                </GridCol>
                <GridCol Span="6" Offset="12">
                    <Search Placeholder="搜索" @bind-Value="@_dataSource.QueryParameters.Keywords" OnSearch="@_dataSource.RefreshAsync"/>
                </GridCol>
            </GridRow>
            <GridRow>
                <Space>
                    <SpaceItem>
                        <Button Shape="@ButtonShape.Circle" Icon="@IconType.Outline.Plus" Type="@ButtonType.Primary" OnClick="() => ShowEditForm()"></Button>
                    </SpaceItem>
                    <SpaceItem>
                        <Button Shape="@ButtonShape.Circle" Icon="@IconType.Outline.Reload" Type="@ButtonType.Primary" OnClick="_dataSource.RefreshAsync"></Button>
                    </SpaceItem>
                </Space>
            </GridRow>
        </TitleTemplate>
        <ColumnDefinitions>
            <PropertyColumn Title="标志" Ellipsis Sortable Property="c => c.Id"></PropertyColumn>
            <PropertyColumn Title="名称" Sortable Property="c => c.Name"></PropertyColumn>
            <PropertyColumn Title="主机名称" Sortable="true" Property="c => c.Host"></PropertyColumn>
            <PropertyColumn Title="端口" Sortable="true" Property="c => c.Port"></PropertyColumn>
            <PropertyColumn Title="用户名称" Sortable="true" Property="c => c.Username"></PropertyColumn>
            <PropertyColumn Title="密码" Sortable="true" Property="c => c.Password">
                <Text>@string.Join(string.Empty, context.Password.Select(x => '*'))</Text>
            </PropertyColumn>
            <ActionColumn Fixed="right" Width="250" Title="操作">
                <CellRender Context="cellData">
                    <Space>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Copy" OnClick="() => ShowEditForm(context.CopyClone<FtpConfigModel>())"></Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Edit" OnClick="() => ShowEditForm(context.JsonClone<FtpConfigModel>())"></Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Danger Icon="@IconType.Outline.Delete" OnClick="() => DeleteConfig(context)"></Button>
                        </SpaceItem>

                    </Space>
                </CellRender>
            </ActionColumn>
        </ColumnDefinitions>
        <ExpandTemplate>
            <Tabs Animated>
                <TabPane Tab="参数" Key="1">
                    @if (context.Data != null)
                    {
                        var data = new List<StringEntry>([
                            new StringEntry("连接超时", context.Data.ConnectTimeout.ToString()),
                            new StringEntry("读取超时", context.Data.ReadTimeout.ToString()),
                            new StringEntry("数据通信读取超时", context.Data.DataConnectionReadTimeout.ToString()),
                            new StringEntry("数据通信连接超时", context.Data.DataConnectionConnectTimeout.ToString())
                        ]);
                        <StringEntryTable ItemsSource="@data"
                                          NameTitle="备注"
                                          ValueTitle="值"
                                          IsEditable="false"/>
                    }

                </TabPane>
            </Tabs>
        </ExpandTemplate>
    </Table>
</GridContent>

@code {
    ITable _table;
    string _modalTitle;
    bool _editFormVisible;
    bool _editFormSubmitting;
    bool _editFormConfirmLoading;
    Form<FtpConfigModel> _editForm;
    FtpConfigModel _editModel = new();

    bool _loading;
    RoutedPaginationDataSource<FtpConfigModel, PaginationQueryParameters> _dataSource;

    protected override void OnInitialized()
    {
        _dataSource = new RoutedPaginationDataSource<FtpConfigModel, PaginationQueryParameters>(
            NavigationManager,
            ApiService.QueryFtpConfigurationListAsync,
            StateHasChanged);
        _dataSource.Request();
        base.OnInitialized();
    }

    void ShowEditForm(FtpConfigModel? model = null)
    {
        _editFormVisible = true;
        if (model == null)
        {
            _editModel = new FtpConfigModel
            {
                Id = Guid.NewGuid().ToString()
            };
            _modalTitle = "编辑配置";
        }
        else
        {
            _editModel = model;
            _modalTitle = "新建配置";
        }
    }

    async Task OnEditFormFinish(EditContext editContext)
    {
        try
        {
            var apiResponse = await ApiService.AddOrUpdateAsync(_editModel);
            if (apiResponse.ErrorCode == 0)
            {
                await _dataSource.RefreshAsync();
                _editFormVisible = false;
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = apiResponse.Message
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = ex.Message
            });
        }
        finally
        {
            _editFormSubmitting = false;
            _editFormConfirmLoading = false;
        }
    }

    void OnEditFormFinishFailed(EditContext editContext)
    {
        _editFormSubmitting = false;
        _editFormConfirmLoading = false;
    }


    Task<ConfirmResult> ShowConfirmDialogAsync(string title, string content)
    {
        var options = new ConfirmButtonOptions
        {
            Button1Props = new ButtonProps
            {
                ChildContent = "确定",
                Type = ButtonType.Primary
            },
            Button2Props = new ButtonProps
            {
                ChildContent = "取消"
            }
        };
        return _confirmService.Show(
            content,
            title,
            ConfirmButtons.OKCancel,
            ConfirmIcon.Info,
            options);
    }

    async Task DeleteConfig(FtpConfigModel model)
    {
        try
        {
            if (await ShowConfirmDialogAsync("删除确认", "确定要删除吗？") != ConfirmResult.OK)
            {
                return;
            }

            var apiResponse = await ApiService.RemoveAsync(model);
            if (apiResponse.ErrorCode == 0)
            {
                await _dataSource.RefreshAsync();
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = apiResponse.Message
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = "加载配置失败"
            });
        }
    }


    void HandleEditFormCancel(MouseEventArgs e)
    {
        _editFormSubmitting = false;
        _editFormVisible = false;
    }


    void HandleEditFormOk(MouseEventArgs e)
    {
        _editFormSubmitting = true;
        _editForm.Submit();
    }

    void OnTableChange(QueryModel<FtpConfigModel> query)
    {
        _dataSource.QueryParameters.SortDescriptions.Clear();
        foreach (var sortModel in query.SortModel)
        {
            if (sortModel.Sort == null)
            {
                continue;
            }

            _dataSource.QueryParameters.SortDescriptions.Add(new SortDescription(sortModel.FieldName, sortModel.Sort));
        }

        _dataSource.Request();
    }

    public void Dispose()
    {
        _dataSource.Dispose();
    }

}