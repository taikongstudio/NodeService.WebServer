@namespace NodeService.WebServer.UI.Pages.CommonConfig.FtpUploadConfigs
@page "/CommonConfig/FtpUpload"
@inject NotificationService _notice
@inject ApiService ApiService
@inject ConfirmService _confirmService
@inject NavigationManager NavigationManager
@implements IDisposable

<GridContent>
    <ConfigurationVersionSelectorDialog Title="版本列表"
                                        Closed="()=>_dataSource.QueryAsync()"
                                        ConfigurationId="@_configurationId"
                                        @bind-Visible="@_versionSelectorDialogVisible"
                                        TItem="FtpUploadConfigModel">
    </ConfigurationVersionSelectorDialog>
    <Modal Width="800"
           Title="@_modalTitle"
           MaskClosable="false"
           DefaultMaximized
           Maximizable
           Style="top:0"
           @bind-Visible="@_editFormVisible"
           ConfirmLoading="@_editFormConfirmLoading"
           OnOk="@HandleEditFormOk"
           OnCancel="@HandleEditFormCancel">
        <Form Model="@_editModel" Size="@AntSizeLDSType.Default"
              LabelColSpan="4"
              WrapperColSpan="20"
              OnFinish="OnEditFormFinish"
              OnFinishFailed="OnEditFormFinishFailed"
              @ref="@_editForm">
            @if (context == null)
            {
                <Empty/>
            }
            else
            {
                <FormItem Label="配置名称">
                    <Input @bind-Value="@context.Name"/>
                </FormItem>
                <FormItem Label="Ftp配置">
                    <FtpConfigSelector @ref="_ftpConfigSelector" @bind-SelectedItems="@_selectedFtpConfigs" Mode="SelectionMode.Single" />

                </FormItem>
                <FormItem Label="远程目录">
                    <AntDesign.Input @bind-Value="@context.RemoteDirectory">
                        <AddOnBefore>@(GetDefaultWorkingDirectory())</AddOnBefore>
                    </AntDesign.Input>
                </FormItem>
                <FormItem Label="清空远程目录">
                    <Switch @bind-Checked="@context.CleanupRemoteDirectory"/>
                </FormItem>
                <FormItem Label="本地目录">
                    <Input @bind-Value="@context.LocalDirectory"/>
                </FormItem>
                <FormItem Label="大小写匹配">
                    <RadioGroup @bind-Value="@context.MatchCasing">
                        <Radio RadioButton Value="@(MatchCasing.PlatformDefault)">平台默认</Radio>
                        <Radio RadioButton Value="@(MatchCasing.CaseInsensitive)">大小写无关</Radio>
                        <Radio RadioButton Value="@(MatchCasing.CaseSensitive)">大小写有关</Radio>
                    </RadioGroup>
                </FormItem>

                <FormItem Label="文件通配模式">
                    <Switch @bind-Checked="@context.UseFileGlobbing" />
                </FormItem>

                @if (context.UseFileGlobbing)
                {
                    <FormItem Label="文件通配">
                        <StringEntryTable ItemsSource="@context.Value.FileGlobbingPatterns"
                                          NameList="_fileGlobbingList"
                                          EndEdit="OnFilterEndEdit"
                                          Deleted="OnFilterDeleted" />
                    </FormItem>
                }
                else
                {
                    <FormItem Label="目录过滤器">
                        <StringEntryTable ItemsSource="@context.DirectoryFilters"
                        NameList="_filterList"
                        EndEdit="OnFilterEndEdit"
                        Deleted="OnFilterDeleted" />
                    </FormItem>
                    <FormItem Label="包含子目录">
                        <Switch @bind-Checked="@context.IncludeSubDirectories" />
                    </FormItem>
                    @if (context.IncludeSubDirectories)
                    {
                        <FormItem Label="最大递归深度">
                            <AntDesign.InputNumber @bind-Value="@context.MaxRecursionDepth" Style="width:200px" />
                        </FormItem>
                    }


                    <FormItem Label="模式匹配">
                        <Input Disabled="@(_editModel.Value.Filters != null && _editModel.Value.Filters.Any(IsSearchPatternFilter))" @bind-Value="@context.SearchPattern" />
                    </FormItem>

                    <FormItem Label="匹配模式">
                        <RadioGroup @bind-Value="@context.MatchType">
                            <Radio RadioButton Value="@(MatchType.Simple)">简单匹配</Radio>
                            <Radio RadioButton Value="@(MatchType.Win32)">Win32匹配语义</Radio>
                        </RadioGroup>
                    </FormItem>

                    <FormItem Label="路径过滤器">
                        <StringEntryTable ItemsSource="@context.Filters"
                                          NameList="_filterList"
                                          EndEdit="OnFilterEndEdit"
                                          Deleted="OnFilterDeleted" />
                    </FormItem>
                }
                <FormItem Label="日期过滤器">
                    <DateTimeFilterTable ItemsSource="@context.DateTimeFilters"/>
                </FormItem>
                <FormItem Label="长度过滤器">
                    <FileLengthFilterTable ItemsSource="@context.LengthFilters"/>
                </FormItem>
                @if (!context.CleanupRemoteDirectory)
                {
                    <FormItem Label="文件处理方式">
                        <RadioGroup @bind-Value="@context.FtpFileExists">
                            <Radio RadioButton Value="@FileExists.Skip">跳过</Radio>
                            <Radio RadioButton Value="@FileExists.Overwrite">覆盖</Radio>
                            <Radio RadioButton Value="@FileExists.Resume">恢复</Radio>
                            <Radio RadioButton Value="@FileExists.AddToEnd">追加</Radio>
                        </RadioGroup>
                        <br/>
                        <Text>本地文件时间和服务器文件时间差异</Text>
                        <br/>
                        <RadioGroup @bind-Value="@context.FileExistsTimeRange">
                            <Radio RadioButton Value="@CompareOperator.LessThan">小于</Radio>
                            <Radio RadioButton Value="@CompareOperator.GreatThan">大于</Radio>
                            <Radio RadioButton Value="@CompareOperator.LessThanEqual">小于等于</Radio>
                            <Radio RadioButton Value="@CompareOperator.GreatThanEqual">大于等于</Radio>
                            <Radio RadioButton Value="@CompareOperator.Equals">等于</Radio>
                        </RadioGroup>
                        <br/>
                        <AntDesign.InputNumber Min="1" @bind-Value="@context.FileExistsTime"/>
                        <RadioGroup @bind-Value="@context.FileExistsTimeUnit">
                            <Radio RadioButton Value="@FileTimeUnit.Seconds">秒</Radio>
                            <Radio RadioButton Value="@FileTimeUnit.Minutes">分钟</Radio>
                            <Radio RadioButton Value="@FileTimeUnit.Hours">小时</Radio>
                            <Radio RadioButton Value="@FileTimeUnit.Days">天</Radio>
                        </RadioGroup>
                        <Text>的文件</Text>
                    </FormItem>
                }


                <FormItem Label="重试次数">
                    <AntDesign.InputNumber @bind-Value="@context.RetryTimes" Style="width:200px"/>
                </FormItem>

                <FormItem Label="打印本地文件">
                    <Switch @bind-Checked="@context.PrintLocalFiles"></Switch>
                </FormItem>
                <FormItem Label="打印远程文件">
                    <Switch @bind-Checked="@context.PrintRemoteFiles"></Switch>
                </FormItem>
            }
        </Form>
    </Modal>

    <Table @ref="_table"
           Size="TableSize.Small"
           Loading="@_dataSource.IsLoading"
           EnableVirtualization="false"
           TItem="FtpUploadConfigModel"
           OnChange="OnTableChange"
           Resizable
           DataSource="@_dataSource.ItemsSource"
           PageIndex="@_dataSource.PageIndex"
           PageSize="@_dataSource.PageSize"
           Total="@_dataSource.TotalCount"
           OnPageIndexChange="@_dataSource.OnPaginationEvent"
           OnPageSizeChange="@_dataSource.OnPaginationEvent">
        <TitleTemplate>
            <GridRow Style="margin-bottom:16px">
                <GridCol Span="6">
                    <Title Level="3">Ftp上传配置</Title>
                </GridCol>
                <GridCol Span="6" Offset="12">
                    <Search Placeholder="搜索" @bind-Value="@_dataSource.QueryParameters.Keywords" OnSearch="@_dataSource.QueryAsync"/>
                </GridCol>
            </GridRow>
            <GridRow>
                <Space>
                    <SpaceItem>
                        <Button Shape="@ButtonShape.Circle" Icon="@IconType.Outline.Plus" Type="@ButtonType.Primary" OnClick="() => ShowEditForm()"></Button>
                    </SpaceItem>
                    <SpaceItem>
                        <Button Shape="@ButtonShape.Circle" Icon="@IconType.Outline.Reload" Type="@ButtonType.Primary" OnClick="_dataSource.QueryAsync"></Button>
                    </SpaceItem>
                </Space>
            </GridRow>
        </TitleTemplate>
        <ColumnDefinitions>
            <PropertyColumn Title="标志" Sortable="true" Width="100" Property="c => c.Id">
                <Text Ellipsis Copyable Style="max-height:30px;display:flex;flex-direction:row">
                    <div style="overflow: hidden; white-space: nowrap;text-overflow: ellipsis;" title="@context.Id">@context.Id</div>
                </Text>
            </PropertyColumn>
            <PropertyColumn Title="名称" Ellipsis Sortable Property="c => c.Name"></PropertyColumn>
            <PropertyColumn Title="Ftp配置" Sortable="true" Property="c => c.FtpConfig">
                <Text>@context.FtpConfig?.Name</Text>
            </PropertyColumn>
            <PropertyColumn Title="远程目录" Ellipsis Sortable="true" Property="c => c.RemoteDirectory"></PropertyColumn>
            <PropertyColumn Title="本地目录" Ellipsis Sortable="true" Property="c => c.LocalDirectory"></PropertyColumn>
            <PropertyColumn Title="包含子目录" Sortable="true" Property="c => c.IncludeSubDirectories"></PropertyColumn>
            <PropertyColumn Title="模式匹配" Sortable="true" Property="c => c.SearchPattern"></PropertyColumn>
            <PropertyColumn Title="重试次数" Sortable="true" Property="c => c.RetryTimes"></PropertyColumn>
            <ActionColumn Fixed="right" Width="250" Title="操作">
                <CellRender Context="cellData">
                    <Space>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Copy" OnClick="() => ShowEditForm(context.CopyClone<FtpUploadConfigModel>())"></Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Edit" OnClick="() => ShowEditForm(context.JsonClone<FtpUploadConfigModel>())"></Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.UnorderedList" OnClick="() => ShowVersionSelectorDialog(context.Id)"></Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Danger Icon="@IconType.Outline.Delete" OnClick="() => DeleteConfig(context)"></Button>
                        </SpaceItem>
                    </Space>
                </CellRender>
            </ActionColumn>
        </ColumnDefinitions>
    </Table>
</GridContent>

@code {
    ITable _table;
    string _modalTitle;
    bool _editFormVisible;
    bool _editFormSubmitting;
    bool _editFormConfirmLoading;
    Form<FtpUploadConfigModel> _editForm;
    FtpUploadConfigModel _editModel = new();

    CommonDialog _ftpConfigDialog;
    FtpConfigSelector _ftpConfigSelector;
    IEnumerable<FtpConfigModel> _selectedFtpConfigs;

    List<StringEntry> _filterList = [];

    List<StringEntry> _fileGlobbingList = [];


    RoutedPaginationDataSource<FtpUploadConfigModel, PaginationQueryParameters> _dataSource;

    string _configurationId;
    bool _versionSelectorDialogVisible;

    async Task ShowVersionSelectorDialog(string id)
    {
        _configurationId = id;
        _versionSelectorDialogVisible = true;
        await Task.CompletedTask;
    }

    protected override void OnInitialized()
    {
        _filterList =
        [
            new StringEntry { Name = "包含", Value = nameof(FilePathFilter.Contains).ToLower() },
    new StringEntry { Name = "不包含", Value = nameof(FilePathFilter.NotContains).ToLower() },
    new StringEntry { Name = "开头匹配", Value = nameof(FilePathFilter.StartWith).ToLower() },
    new StringEntry { Name = "开头不匹配", Value = nameof(FilePathFilter.NotStartWith).ToLower() },
    new StringEntry { Name = "结尾匹配", Value = nameof(FilePathFilter.EndsWith).ToLower() },
    new StringEntry { Name = "结尾不匹配", Value = nameof(FilePathFilter.NotEndsWith).ToLower() },
    new StringEntry { Name = "模式匹配", Value = nameof(FilePathFilter.SearchPattern).ToLower() },
    new StringEntry { Name = "正则表达式匹配", Value = nameof(FilePathFilter.RegExp).ToLower() },
    new StringEntry { Name = "正则表达式不匹配", Value = nameof(FilePathFilter.RegExpNotMatch).ToLower() }
        ];
        _fileGlobbingList =
        [
            new StringEntry { Name = "包含", Value = nameof(FilePathFilter.Include).ToLower() },
    new StringEntry { Name = "排除", Value = nameof(FilePathFilter.Exclude).ToLower() },
    ];
        _dataSource = new RoutedPaginationDataSource<FtpUploadConfigModel, PaginationQueryParameters>(
            NavigationManager.BaseUri,
            ApiService.QueryFtpUploadConfigurationListAsync,
            StateHasChanged);
        _dataSource.ItemInitializer = InitAsync;
        _dataSource.ExceptionHandler = OnExepction;
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        await _dataSource.RequestAsync();
        await base.OnInitializedAsync();
    }

    private void OnFilterDeleted(StringEntry stringEntry)
    {
        StateHasChanged();
    }

    private void OnFilterEndEdit(StringEntry stringEntry)
    {
        stringEntry.EndEdit();
        StateHasChanged();
    }

    private static bool IsSearchPatternFilter(StringEntry entry)
    {
        return entry.IsSearchPatternFilter();
    }

    async Task OnExepction(Exception ex)
    {
        await _notice.Open(new NotificationConfig
        {
            Message = "加载失败",
            Description = ex.ToString()
        });
    }


    async ValueTask InitAsync(
        FtpUploadConfigModel model,
        CancellationToken cancellationToken = default)
    {
        if (model == null)
        {
            return;
        }

        var rsp = await ApiService.QueryFtpConfigAsync(model.Value.FtpConfigId);
        if (rsp.ErrorCode == 0)
        {
            model.Value.FtpConfig = rsp.Result;
        }
    }

    async Task ShowEditForm(FtpUploadConfigModel? model = null)
    {
        _editFormVisible = true;
        if (model == null)
        {
            _editModel = new FtpUploadConfigModel
                {
                    Id = Guid.NewGuid().ToString()
                };
            _modalTitle = "新建配置";
        }
        else
        {
            _modalTitle = "编辑配置";
            _editModel = model;
            if (_editModel.DateTimeFilters == null)
            {
                _editModel.DateTimeFilters = [];
            }

            if (_editModel.LengthFilters == null)
            {
                _editModel.LengthFilters = [];
            }

            if (_editModel.DirectoryFilters == null)
            {
                _editModel.DirectoryFilters = [];
            }

            if (_editModel.MaxRecursionDepth == 0)
            {
                _editModel.MaxRecursionDepth = int.MaxValue;
            }
            if (_editModel.FileGlobbingPatterns == null)
            {
                _editModel.FileGlobbingPatterns = [];
            }
            await InitSelectedFtpConfigAsync();
        }
    }

    async Task InitSelectedFtpConfigAsync()
    {
        if (_editModel.FtpConfigId == null)
        {
            _selectedFtpConfigs = [];
        }
        else
        {
            var ftpConfig = await ApiService.GetFtpConfigAsync(_editModel.FtpConfigId);
            if (ftpConfig != null)
            {
                _selectedFtpConfigs = [ftpConfig];
            }
        }
    }


    async Task OnEditFormFinish(EditContext editContext)
    {
        try
        {
            _editFormVisible = true;
            if (_editModel.DateTimeFilters == null)
            {
                _editModel.DateTimeFilters = [];
            }

            if (!_editModel.Value.RemoteDirectory.StartsWith('/'))
            {
                _editModel.Value.RemoteDirectory = '/' + _editModel.Value.RemoteDirectory;
            }

            var apiResponse = await ApiService.AddOrUpdateAsync(_editModel);
            if (apiResponse.ErrorCode == 0)
            {
                await _dataSource.QueryAsync();
                _editFormVisible = false;
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = apiResponse.Message
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = ex.ToString()
            });
        }
        finally
        {
            _editFormSubmitting = false;
            _editFormConfirmLoading = false;
        }
    }

    void OnEditFormFinishFailed(EditContext editContext)
    {
        _editFormSubmitting = false;
        _editFormConfirmLoading = false;
    }

    Task<ConfirmResult> ShowConfirmDialogAsync(string title, string content)
    {
        var options = new ConfirmButtonOptions
        {
            Button1Props = new ButtonProps
            {
                ChildContent = "确定",
                Type = ButtonType.Primary
            },
            Button2Props = new ButtonProps
            {
                ChildContent = "取消"
            }
        };
        return _confirmService.Show(
            content,
            title,
            ConfirmButtons.OKCancel,
            ConfirmIcon.Info,
            options);
    }

    Task OnSelectFtpConfigDialogClosed()
    {
        var selectedFtpConfigId = _selectedFtpConfigs.FirstOrDefault()?.Id;
        if (selectedFtpConfigId != null)
        {
            _editModel.Value.FtpConfigId = selectedFtpConfigId;
        }
        StateHasChanged();
        return Task.CompletedTask;
    }

    async Task DeleteConfig(FtpUploadConfigModel model)
    {
        try
        {
            if (await ShowConfirmDialogAsync("删除确认", "确定要删除吗？") != ConfirmResult.OK)
            {
                return;
            }

            var apiResponse = await ApiService.RemoveAsync(model);
            if (apiResponse.ErrorCode == 0)
            {
                await _dataSource.QueryAsync();
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = apiResponse.Message
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = "加载配置失败"
            });
        }
    }


    void HandleEditFormCancel(MouseEventArgs e)
    {
        _editFormVisible = false;
    }


    void HandleEditFormOk(MouseEventArgs e)
    {
        _editFormSubmitting = true;
        _editForm.Submit();
    }

    private string GetDefaultWorkingDirectory()
    {
        if (_selectedFtpConfigs == null || !_selectedFtpConfigs.Any())
        {
            return "/";
        }

        var defaultConfig = _selectedFtpConfigs.FirstOrDefault();
        if (defaultConfig == null || string.IsNullOrEmpty(defaultConfig.Value.DefaultWorkingDirectory))
        {
            return "/";
        }

        if (!defaultConfig.Value.DefaultWorkingDirectory.StartsWith("/"))
        {
            return "/" + defaultConfig.Value.DefaultWorkingDirectory;
        }

        return defaultConfig.Value.DefaultWorkingDirectory;
    }


    async Task OnTableChange(QueryModel<FtpUploadConfigModel> query)
    {
        _dataSource.QueryParameters.SortDescriptions.Clear();
        foreach (var sortModel in query.SortModel)
        {
            if (sortModel.Sort == null)
            {
                continue;
            }

            _dataSource.QueryParameters.SortDescriptions.Add(new SortDescription(sortModel.FieldName, sortModel.Sort));
        }

        await _dataSource.RequestAsync();
    }

    async Task ShowFtpConfigSelectorDialogAsync()
    {
        await _ftpConfigDialog.ShowAsync();
    }

    public void Dispose()
    {
        _dataSource.Dispose();
    }

}