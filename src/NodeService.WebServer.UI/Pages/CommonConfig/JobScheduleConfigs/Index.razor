@namespace NodeService.WebServer.UI.Pages.CommonConfig.JobScheduleConfigs
@page "/CommonConfig/JobScheduleConfigs"
@using CronExpressionDescriptor
@using Microsoft.Extensions.Logging
@using NodeService.WebServer.UI.Pages.Components
@using Quartz
@inject NotificationService _notice
@inject ApiService ApiService
@inject ConfirmService _confirmService
@inject NavigationManager NavigationManager
@inject ILogger<Index> _logger;

<GridContent>
    <Modal Width="800"
           Title="@_modalTitle"
           Visible="@_editFormVisible"
           Maximizable="true"
           DefaultMaximized="true"
           ConfirmLoading="@_editFormConfirmLoading"
           OnOk="@HandleEditFormOk"
           OnCancel="@HandleEditFormCancel">
        <CommonDialog @ref="_taskTypeDescSelectorDialog" Closed="OnTaskTypeDescSelectorDialogClosed">
            <TaskTypeDescSelector @ref="_taskTypeDescSelector"
                                  @bind-SelectedItems="@_selectedTaskTypeDescConfigList"
                                  Mode="SelectionMode.Single"/>
        </CommonDialog>
        <Form Model="@_editModel"
              LabelColSpan="6"
              Layout="@FormLayout.Horizontal"
              Loading="@_loading"
              WrapperColSpan="18"
              OnFinish="OnEditFormFinish"
              OnFinishFailed="OnEditFormFinishFailed"
              @ref="@_editForm">
            <FormItem Label="名称">
                <Input @bind-Value="@context.Name"/>
            </FormItem>
            <FormItem Label="描述">
                <Input @bind-Value="@context.Description"/>
            </FormItem>
            <FormItem Label="启用">
                <Switch @bind-Checked="@context.IsEnabled"/>
            </FormItem>
            <FormItem Label="环境变量">
                <StringEntryTable ItemsSource="@context.EnvironmentVariables"
                                  NameTitle="变量"
                                  ValueTitle="值"
                                  AddingNewItem="NewEnvVarAdding"/>
            </FormItem>

            <FormItem Label="任务类型">
                @if (_editModel != null && _editModel.Value.JobTypeDesc != null)
                {
                    <Tag @key="_editModel.Value.JobTypeDesc.Id">@_editModel.Value.JobTypeDesc.Name</Tag>
                }
                <Tag Class="site-tag-plus" OnClick="() => _taskTypeDescSelectorDialog.ShowAsync()">
                    <Icon Type="@IconType.Outline.FolderOpen"/>
                </Tag>
            </FormItem>
            <OptionValueEditor @ref="@_optionValueEditor" OptionValueEditors="@_editModel.OptionValueEditors"/>


            <FormItem Label="执行时长" Help="控制作业的执行时长，单位为秒，默认值0表示不限制执行时长。">
                <AntDesign.InputNumber TValue="int" @bind-Value="@context.ExecutionLimitTimeSeconds"/><Text> 秒</Text>
            </FormItem>
            <FormItem Label="触发方式">
                <RadioGroup @bind-Value="@context.TriggerType">
                    <Radio RadioButton Value="@JobScheduleTriggerType.Schedule">定时触发</Radio>
                    <Radio RadioButton Value="@JobScheduleTriggerType.Manual">手动执行</Radio>
                </RadioGroup>
            </FormItem>
            @if (context.TriggerType == JobScheduleTriggerType.Schedule)
            {
                <FormItem Label="Cron表达式">
                    <StringEntryTable ItemsSource="@context.CronExpressions"
                                      NameTitle="备注"
                                      ValueTitle="Cron表达式"
                                      AddingNewItem="AddCronExpression"
                                      ValueChanging="OnCronExpressionValueChanging"/>
                </FormItem>
            }
            <FormItem Label="优先级">
                <RadioGroup @bind-Value="context.Value.Priority" Size="middle">
                    <Radio RadioButton Value="@(TaskExecutionPriority.Lowest)">最低</Radio>
                    <Radio RadioButton Value="@(TaskExecutionPriority.Low)">低</Radio>
                    <Radio RadioButton Value="@(TaskExecutionPriority.Normal)">正常</Radio>
                    <Radio RadioButton Value="@(TaskExecutionPriority.High)">高</Radio>
                    <Radio RadioButton Value="@(TaskExecutionPriority.Highest)">最高</Radio>
                </RadioGroup>
            </FormItem>
            <FormItem Label="并发执行策略">
                <RadioGroup @bind-Value="@context.ExecutionStrategy">
                    <Radio RadioButton Value="@JobExecutionStrategy.Skip">请勿启动新示例</Radio>
                    <Radio RadioButton Value="@JobExecutionStrategy.Concurrent">并行运行新示例</Radio>
                    <Radio RadioButton Value="@JobExecutionStrategy.Queue">对新实例排队</Radio>
                    <Radio RadioButton Value="@JobExecutionStrategy.Stop">停止现有实例</Radio>
                </RadioGroup>
            </FormItem>
            <FormItem Label="等待时长">
                <AntDesign.InputNumber Max="3600" Min="30" @bind-Value="@context.PenddingLimitTimeSeconds"/><Text> 秒</Text>
            </FormItem>

            <FormItem Label="指定节点">

                <NodeSelector
                    Mode="SelectionMode.Multiple"
                    SelectedItems="@_selectedNodes"
                    SelectedItemsChanged="OnSelectedNodesChanged"/>

            </FormItem>
            <FormItem Label="后续任务">
                <TaskDefinitionSelector 
                    Mode="SelectionMode.Multiple"
                    @bind-SelectedItems="@_selectedTaskScheduleConfigList" />
            </FormItem>

        </Form>
    </Modal>
    <Space Style="margin-bottom:16px">
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="() => ShowEditForm()">新建配置</Button>
        </SpaceItem>
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="_dataSource.Request">刷新</Button>
        </SpaceItem>

    </Space>
    <Table @ref="_table"
           Size="TableSize.Small"
           Loading="@_dataSource.IsLoading"
           RowExpandable="c => true"
           EnableVirtualization="false"
           TItem="JobScheduleConfigModel"
           DataSource="@_dataSource.ItemsSource"
           Resizable
           Total="@_dataSource.TotalCount"
           OnChange="OnTableChange"
           PageIndex="@_dataSource.PageIndex"
           PageSize="@_dataSource.PageSize"
           OnPageIndexChange="@_dataSource.OnPaginationEvent"
           OnPageSizeChange="@_dataSource.OnPaginationEvent">
        <TitleTemplate>
            <GridRow Style="margin-bottom:16px">
                <GridCol Span="4">
                    <Title Level="3">作业调度配置</Title>
                </GridCol>
                <GridCol Span="4" Offset="20">
                    <Search Placeholder="搜索" @bind-Value="@_dataSource.QueryParameters.Keywords" OnSearch="_dataSource.ForceRequest"/>
                </GridCol>
            </GridRow>
        </TitleTemplate>
        <ColumnDefinitions>
            <PropertyColumn Title="标志" Ellipsis Sortable Property="c => c.Id"></PropertyColumn>
            <PropertyColumn Title="名称" Sortable Property="c => c.Name"></PropertyColumn>
            <PropertyColumn Title="描述" Ellipsis Sortable Property="c => c.Description"></PropertyColumn>
            <PropertyColumn Title="启用" Ellipsis Sortable Property="c => c.IsEnabled"></PropertyColumn>
            <PropertyColumn Title="任务类型" Ellipsis Property="c => c.JobTypeDesc">
                <Text>@context.JobTypeDesc?.Name</Text>
            </PropertyColumn>

            <ActionColumn Fixed="right" Width="250" Title="操作">
                <CellRender Context="cellData">
                    <Space>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.PlayCircle" OnClick="() => InvokeTaskAsync(context)"></Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Copy" OnClick="() => ShowEditForm(context.CopyClone<JobScheduleConfigModel>())"></Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Edit" OnClick="() => ShowEditForm(context.JsonClone<JobScheduleConfigModel>())"></Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Danger Icon="@IconType.Outline.Delete" OnClick="() => DeleteConfig(context)"></Button>
                        </SpaceItem>

                    </Space>
                </CellRender>
            </ActionColumn>
        </ColumnDefinitions>
        <ExpandTemplate>
            <Tabs Animated>
                <TabPane Tab="任务选项" Key="1">
                    @if (context.Data.OptionValueEditors != null && !_loading)
                    {
                        <Form Model="@context.Data"
                              Context="taskContext"
                              LabelColSpan="4"
                              WrapperColSpan="20">
                            <OptionValueEditor IsEditable="false"
                                               OptionValueEditors="@context.Data.OptionValueEditors"/>

                        </Form>
                    }
                </TabPane>
                <TabPane Tab="Cron表达式" Key="2">
                    <StringEntryTable ItemsSource="@context.Data.CronExpressions"
                                      NameTitle="备注"
                                      ValueTitle="Cron表达式"
                                      IsEditable="false"/>
                </TabPane>
            </Tabs>
        </ExpandTemplate>
    </Table>
</GridContent>

@code {
    OptionValueEditor _optionValueEditor;
    ITable _childTaskDefinitionTable;
    ITable _nodeTable;
    ITable _table;

    string _modalTitle;
    bool _nodeTableLoading = false;
    bool _editFormVisible;
    bool _editFormSubmitting;
    bool _editFormConfirmLoading;
    Form<JobScheduleConfigModel> _editForm;
    JobScheduleConfigModel _editModel = new();


    string _selectedTaskScheduleDefinitionId;

    JobScheduleConfigModel _taskDefinition;
    Form<JobScheduleConfigModel> _fireTaskForm;
    TaskTypeDescSelector _taskTypeDescSelector;
    CommonDialog _taskTypeDescSelectorDialog;

    bool _fireTaskFormVisible;
    bool _fireTaskFormSubmitting;
    bool _fireTaskFormConfirmLoading;

    private bool _loading;


    IEnumerable<NodeInfoModel> _selectedNodes = [];
    IEnumerable<JobTypeDescConfigModel> _selectedTaskTypeDescConfigList = [];
    IEnumerable<JobScheduleConfigModel> _selectedTaskScheduleConfigList = [];

    private string? _selectedNodeInfoId;


    private RoutedPaginationDataSource<JobScheduleConfigModel, PaginationQueryParameters> _dataSource;
    private PaginationDataSource<NodeInfoModel, PaginationQueryParameters> _nodeDataSource;

    protected override void OnInitialized()
    {
        _dataSource = new RoutedPaginationDataSource<JobScheduleConfigModel, PaginationQueryParameters>(
            NavigationManager,
            ApiService.QueryTaskScheduleConfigurationListAsync,
            StateHasChanged);
        _dataSource.ItemInitializer = InitAsync;
        _nodeDataSource = new PaginationDataSource<NodeInfoModel, PaginationQueryParameters>(
            ApiService.QueryNodeListAsync,
            StateHasChanged
        );

        _dataSource.Request();

        base.OnInitialized();
    }

    private void OnSelectedNodesChanged(IEnumerable<NodeInfoModel> nodes)
    {
        _selectedNodes = nodes;
    }

    private async Task InitAsync(JobScheduleConfigModel model)
    {
        if (model == null)
        {
            return;
        }

        var rsp = await ApiService.QueryJobTypeDescConfigAsync(model.Value.JobTypeDescId);
        if (rsp.ErrorCode == 0)
        {
            model.Value.JobTypeDesc = rsp.Result;
            //await BuildOptionValueEditorsAsync(model, model.OptionValueEditors);
        }
    }

    private string ConvertFilterType(string filerType)
    {
        switch (filerType)
        {
            case "exclude":
                return "排除";
                break;
            case "include":
                return "包含";
                break;
            default:
                return string.Empty;
        }
    }


    private async Task ShowEditForm(JobScheduleConfigModel? model = null)
    {
        _loading = true;
        _editFormVisible = true;
        if (model == null)
        {
            _editModel = new JobScheduleConfigModel
            {
                Id = Guid.NewGuid().ToString(),
                IsEnabled = true
            };
            _modalTitle = "新建配置";
        }
        else
        {
            _modalTitle = "编辑配置";
            _editModel = model;
            await OnSelectedTaskTypeDescChanged([model.Value.JobTypeDesc]);
            _selectedNodes = await InitSelectedNodeInfoListAsync();
        }

        _loading = false;
    }

    private async Task<IEnumerable<NodeInfoModel>> InitSelectedNodeInfoListAsync()
    {
        var nodeList = new List<NodeInfoModel>();
        var queryPageIndex = 0;
        var queryPageSize = 50;
        while (true)
        {
            var idList = _editModel.Value.NodeList
                .Skip(queryPageIndex * queryPageSize)
                .Take(queryPageSize)
                .Select(x => x.Value)
                .ToList();
            if (idList.Count == 0)
            {
                break;
            }
            queryPageIndex++;
            var pageIndex = 0;
            var pageSize = 50;
            var count = 0;
            while (true)
            {
                pageIndex++;
                var rsp = await ApiService.QueryNodeListAsync(new QueryNodeListParameters
                    {
                        AreaTag = "*",
                        Status = NodeStatus.All,
                        IdList = idList,
                        PageIndex = pageIndex,
                        PageSize = pageSize
                    });

                if (rsp.ErrorCode == 0 && rsp.Result != null)
                {
                    nodeList.AddRange(rsp.Result);
                    count += rsp.Result.Count();
                }

                if (rsp.TotalCount == count)
                {
                    break;
                }
            }
        }



        return nodeList;
    }

    private void ShowFireTaskForm(JobScheduleConfigModel model)
    {
        _loading = true;
        _taskDefinition = model.CopyClone<JobScheduleConfigModel>();
        _fireTaskFormVisible = true;
        _loading = false;
    }


    private async Task OnEditFormFinish(EditContext editContext)
    {
        try
        {
            _editModel.Value.ChildTaskDefinitions.Clear();
            _editModel.Value.ChildTaskDefinitions.AddRange(_selectedTaskScheduleConfigList.Select(x => new StringEntry()
                {
                    Name = x.Name,
                    Value = x.Id,
                }));
            _editModel.NodeList.Clear();
            _editModel.NodeList.AddRange(
                _selectedNodes
                    .DistinctBy(x => x.Id)
                    .Select(x => new StringEntry
                    {
                        Name = x.Name,
                        Value = x.Id
                    }));
            var apiResponse = await ApiService.AddOrUpdateAsync(_editModel);
            if (apiResponse.ErrorCode == 0)
            {
                _editFormVisible = false;
                _selectedNodes = [];
                await _dataSource.RefreshAsync();
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = apiResponse.Message
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = ex.ToString()
            });
        }
        finally
        {
            _editFormSubmitting = false;
            _editFormConfirmLoading = false;
        }
    }

    private void OnTriggerJobFormFinish()
    {
    }

    private async Task InvokeTaskAsync(JobScheduleConfigModel model)
    {
        try
        {
            if (await ShowConfirmDialogAsync("提示", $"确定要触发任务\"{model.Name}\"?") != ConfirmResult.OK)
            {
                return;
            }

            var invokeTaskScheduleParameters = new InvokeTaskScheduleParameters
            {
                JobScheduleConfigId = model.Id
            };
            var apiResponse = await ApiService.InvokeTaskScheduleAsync(invokeTaskScheduleParameters);
            if (apiResponse.ErrorCode == 0)
            {
                _fireTaskFormVisible = false;
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = apiResponse.Message
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = ex.ToString()
            });
        }
        finally
        {
            _fireTaskFormVisible = true;
        }
    }

    private void OnEditFormFinishFailed(EditContext editContext)
    {
        _editFormSubmitting = false;
        _editFormConfirmLoading = false;
    }

    private void OnTriggerJobFormFinishFailed(EditContext editContext)
    {
        _fireTaskFormConfirmLoading = false;
        _fireTaskFormSubmitting = false;
    }

    private Task<ConfirmResult> ShowConfirmDialogAsync(string title, string content)
    {
        var options = new ConfirmButtonOptions
        {
            Button1Props = new ButtonProps
            {
                ChildContent = "确定",
                Type = ButtonType.Primary
            },
            Button2Props = new ButtonProps
            {
                ChildContent = "取消"
            }
        };
        return _confirmService.Show(
            content,
            title,
            ConfirmButtons.OKCancel,
            ConfirmIcon.Info,
            options);
    }

    private async Task DeleteConfig(JobScheduleConfigModel model)
    {
        try
        {
            if (await ShowConfirmDialogAsync("删除确认", "确定要删除吗？") != ConfirmResult.OK)
            {
                return;
            }

            var apiResponse = await ApiService.RemoveAsync(model);
            if (apiResponse.ErrorCode == 0)
            {
                await _dataSource.RefreshAsync();
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = apiResponse.Message
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = ex.ToString()
            });
        }
    }

    private void HandleFireTaskFormCancel(MouseEventArgs e)
    {
        _fireTaskFormVisible = false;
        _taskDefinition = new JobScheduleConfigModel();
    }


    private void HandleFireTaskFormOk(MouseEventArgs e)
    {
        _fireTaskFormSubmitting = true;
        _fireTaskForm.Submit();
    }


    private void HandleEditFormCancel(MouseEventArgs e)
    {
        _editFormVisible = false;
    }


    private async Task HandleEditFormOk(MouseEventArgs e)
    {
        _editFormSubmitting = true;
        _editModel.Options.Clear();
        await _optionValueEditor.CommitAsync();
        foreach (var kv in _editModel.OptionValueEditors)
        {
            var key = kv.Key;
            var editorBase = kv.Value;
            switch (editorBase.EditorType)
            {
                case OptionValueType.TextValue:
                    var textValueEditor = editorBase as TextValueEditor;
                    _editModel.Options.TryAdd(key, textValueEditor.Value);
                    break;
                case OptionValueType.NumberValue:
                    var numberValueEditor = editorBase as NumberValueEditor;
                    _editModel.Options.TryAdd(key, numberValueEditor.Value);
                    break;
                case OptionValueType.BooleanValue:
                    var booleanValueEditor = editorBase as BooleanValueEditor;
                    _editModel.Options.TryAdd(key, booleanValueEditor.Value);
                    break;
                case OptionValueType.TextArrayValue:
                    var textArrayValueEditor = editorBase as TextArrayValueEditor;
                    _editModel.Options.TryAdd(key, textArrayValueEditor.DataSource.Select(x => x.Value).ToArray());
                    break;
                case OptionValueType.PythonCodeValue:
                    var scriptCodeEditor = editorBase as PythonCodeEditor;
                    _editModel.Options.TryAdd(key, scriptCodeEditor.Value);
                    break;
                case OptionValueType.BatchScriptValue:
                    var batchScriptCodeEditor = editorBase as BatchScriptCodeEditor;
                    _editModel.Options.TryAdd(key, batchScriptCodeEditor.Value);
                    break;
                case OptionValueType.FtpConfigurationListValue:
                    var ftpConfigurationListEditor = editorBase as FtpConfigurationListEditor;
                    _editModel.Options.TryAdd(key, ftpConfigurationListEditor.SelectedItems.Select(x => x.Id).ToArray());
                    break;
                case OptionValueType.MysqlConfigurationListValue:
                    var mysqlConfigurationListEditor = editorBase as MysqlConfigurationListEditor;
                    _editModel.Options.TryAdd(key, mysqlConfigurationListEditor.SelectedItems.Select(x => x.Id).ToArray());
                    break;
                case OptionValueType.KafkaConfigurationListValue:
                    var kafkaConfigurationListEditor = editorBase as KafkaConfigurationListEditor;
                    _editModel.Options.TryAdd(key, kafkaConfigurationListEditor.SelectedItems.Select(x => x.Id).ToArray());
                    break;
                case OptionValueType.FtpConfigurationValue:
                    var ftpConfigurationEditor = editorBase as FtpConfigurationEditor;
                    _editModel.Options.TryAdd(key, ftpConfigurationEditor.SelectedItems.FirstOrDefault());
                    break;
                case OptionValueType.MysqlConfigurationValue:
                    var mysqlEditor = editorBase as MysqlConfigurationEditor;
                    _editModel.Options.TryAdd(key, mysqlEditor.SelectedItems.FirstOrDefault());
                    break;
                case OptionValueType.KafkaConfigurationValue:
                    var kafkaEditor = editorBase as KafkaConfigurationEditor;
                    _editModel.Options.TryAdd(key, kafkaEditor.SelectedItems.FirstOrDefault());
                    break;
                case OptionValueType.PackageConfigurationValue:
                    var packageConfigurationEditor = editorBase as PackageConfigurationEditor;
                    _editModel.Options.TryAdd(key, packageConfigurationEditor.SelectedItems.FirstOrDefault());
                    break;
                case OptionValueType.PackageConfigurationListValue:
                    var packageConfigurationListEditor = editorBase as PackageConfigurationListEditor;
                    _editModel.Options.TryAdd(key, packageConfigurationListEditor.SelectedItems.Select(x => x.Id).ToArray());
                    break;
                case OptionValueType.NodeEnvVarsConfigurationValue:
                    var nodeEnvVarsConfigurationEditor = editorBase as NodeEnvVarsConfigurationEditor;
                    _editModel.Options.TryAdd(key, nodeEnvVarsConfigurationEditor.SelectedItems.FirstOrDefault());
                    break;
                case OptionValueType.NodeEnvVarsConfigurationListValue:
                    var nodeEnvVarsConfigurationListEditor = editorBase as NodeEnvVarsConfigurationListEditor;
                    _editModel.Options.TryAdd(key, nodeEnvVarsConfigurationListEditor.SelectedItems.Select(x => x.Id).ToArray());
                    break;
                case OptionValueType.LogUploadConfigurationValue:

                    break;
                case OptionValueType.LogUploadConfigurationListValue:

                    break;
                case OptionValueType.FtpUploadConfigurationValue:
                    var ftpUploadConfigurationEditor = editorBase as FtpUploadConfigurationEditor;
                    _editModel.Options.TryAdd(key, ftpUploadConfigurationEditor.SelectedItems.FirstOrDefault());
                    break;
                case OptionValueType.FtpUploadConfigurationListValue:
                    var ftpUploadConfigurationListEditor = editorBase as FtpUploadConfigurationListEditor;
                    _editModel.Options.TryAdd(key, ftpUploadConfigurationListEditor.SelectedItems.Select(x => x.Id).ToArray());
                    break;
                case OptionValueType.RestApiConfigurationValue:
                    var restApiConfigurationEditor = editorBase as RestApiConfigurationEditor;
                    _editModel.Options.TryAdd(key, restApiConfigurationEditor.SelectedItems.FirstOrDefault());
                    break;
                case OptionValueType.RestApiConfigurationListValue:
                    var restApiConfigurationListEditor = editorBase as RestApiConfigurationListEditor;
                    _editModel.Options.TryAdd(key, restApiConfigurationListEditor.SelectedItems.Select(x => x.Id).ToArray());
                    break;
                case OptionValueType.FtpDownloadConfigurationValue:
                    var ftpDownloadConfigurationEditor = editorBase as FtpDownloadConfigurationEditor;
                    _editModel.Options.TryAdd(key, ftpDownloadConfigurationEditor.SelectedItems.FirstOrDefault()?.Id);
                    break;
                case OptionValueType.FtpDownloadConfigurationListValue:
                    var ftpDownloadConfigurationListEditor = editorBase as FtpDownloadConfigurationListEditor;
                    _editModel.Options.TryAdd(key, ftpDownloadConfigurationListEditor.SelectedItems.Select(x => x.Id).ToArray());
                    break;
            }
        }

        if (_editModel.Value.TriggerType == JobScheduleTriggerType.Schedule
            &&
            _editModel.Value.CronExpressions.Count == 0)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = "调度触发模式需要设置至少一个Cron表达式"
            });
            return;
        }

        _editForm.Submit();
    }

    private void AddCronExpression(AddingNewItemEventArgs e)
    {
        e.DataItem.BeginEdit();
    }


    private async Task OnTaskTypeDescSelectorDialogClosed()
    {
        await OnSelectedTaskTypeDescChanged(_selectedTaskTypeDescConfigList);
    }


    private async Task OnSelectedTaskTypeDescChanged(IEnumerable<JobTypeDescConfigModel> items)
    {
        try
        {
            //this._selectedJobSchduleConfigList = items;
            var model = items.FirstOrDefault();
            _loading = true;
            if (model == null)
            {
                _editModel.JobTypeDescId = null;
                _editModel.JobTypeDesc = null;
                _editModel.OptionValueEditors.Clear();
                return;
            }

            _editModel.JobTypeDescId = model.Id;
            _editModel.JobTypeDesc = model;

            var optionValueEditors = new Dictionary<string, EditorBase>();
            await BuildOptionValueEditorsAsync(_editModel, optionValueEditors);
            _editModel.OptionValueEditors = optionValueEditors;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex.ToString());
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task BuildOptionValueEditorsAsync(JobScheduleConfigModel model, Dictionary<string, EditorBase> optionEditors)
    {
        if (model.JobTypeDesc == null)
        {
            return;
        }

        optionEditors.Clear();
        foreach (var optionEditor in model.JobTypeDesc.OptionValueEditors)
        {
            if (!Enum.TryParse<OptionValueType>(optionEditor.Tag, out var optionEditorType))
            {
                continue;
            }

            switch (optionEditorType)
            {
                case OptionValueType.TextValue:

                    optionEditors.TryAdd(optionEditor.Name,
                        new TextValueEditor(model.Options.ReadOptionValue<string>(optionEditor.Name)));
                    break;
                case OptionValueType.NumberValue:
                    optionEditors.TryAdd(optionEditor.Name,
                        new NumberValueEditor(model.Options.ReadOptionValue<double>(optionEditor.Name)));
                    break;
                case OptionValueType.BooleanValue:
                    optionEditors.TryAdd(optionEditor.Name,
                        new BooleanValueEditor(model.Options.ReadOptionValue<bool>(optionEditor.Name)));
                    break;
                case OptionValueType.TextArrayValue:
                    optionEditors.TryAdd(optionEditor.Name,
                        new TextArrayValueEditor(model.Options.ReadOptionListValues(optionEditor.Name, static x => x.ToStringEntry())));
                    break;
                case OptionValueType.PythonCodeValue:
                    optionEditors.TryAdd(optionEditor.Name,
                        new PythonCodeEditor(model.Options.ReadOptionValue<string>(optionEditor.Name)));
                    break;
                case OptionValueType.BatchScriptValue:
                    optionEditors.TryAdd(optionEditor.Name,
                        new BatchScriptCodeEditor(model.Options.ReadOptionValue<string>(optionEditor.Name)));
                    break;
                case OptionValueType.FtpConfigurationListValue:
                    var ftpConfigurationListEditor = new FtpConfigurationListEditor(
                        await model.Options.ReadOptionListValuesAsync(optionEditor.Name, ApiService.GetFtpConfigAsync));

                    optionEditors.TryAdd(optionEditor.Name, ftpConfigurationListEditor);
                    break;
                case OptionValueType.MysqlConfigurationListValue:
                    var mysqlConfigurationListEditor = new MysqlConfigurationListEditor(
                        await model.Options.ReadOptionListValuesAsync(optionEditor.Name, ApiService.GetMyConfigAsync));
                    optionEditors.TryAdd(optionEditor.Name, mysqlConfigurationListEditor);
                    break;
                case OptionValueType.KafkaConfigurationListValue:
                    var kafkaConfigurationListEditor = new KafkaConfigurationListEditor(
                        await model.Options.ReadOptionListValuesAsync(optionEditor.Name, ApiService.GetKafkaConfigAsync));
                    optionEditors.TryAdd(optionEditor.Name, kafkaConfigurationListEditor);
                    break;
                case OptionValueType.FtpConfigurationValue:
                    var ftpConfigurationEditor = new FtpConfigurationEditor(await model.Options.ReadOptionValueAsync<FtpConfigModel>(optionEditor.Name, ApiService.GetFtpConfigAsync));
                    optionEditors.TryAdd(optionEditor.Name, ftpConfigurationEditor);
                    break;
                case OptionValueType.MysqlConfigurationValue:
                    var mysqlConfigurationEditor = new MysqlConfigurationEditor(await model.Options.ReadOptionValueAsync<MysqlConfigModel>(optionEditor.Name, ApiService.GetMyConfigAsync));
                    optionEditors.TryAdd(optionEditor.Name, mysqlConfigurationEditor);
                    break;
                case OptionValueType.KafkaConfigurationValue:
                    var kafkaConfigurationEditor = new KafkaConfigurationEditor(await model.Options.ReadOptionValueAsync<KafkaConfigModel>(optionEditor.Name, ApiService.GetKafkaConfigAsync));
                    optionEditors.TryAdd(optionEditor.Name, kafkaConfigurationEditor);
                    break;
                case OptionValueType.FtpUploadConfigurationValue:
                    var ftpUploadConfigurationEditor = new FtpUploadConfigurationEditor(await model.Options.ReadOptionValueAsync<FtpUploadConfigModel>(optionEditor.Name, ApiService.GetFtpUploadConfigAsync));
                    optionEditors.TryAdd(optionEditor.Name, ftpUploadConfigurationEditor);
                    break;
                case OptionValueType.FtpUploadConfigurationListValue:
                    var ftpUploadConfigurationListEditor = new FtpUploadConfigurationListEditor(await model.Options.ReadOptionListValuesAsync(optionEditor.Name, ApiService.GetFtpUploadConfigAsync));
                    optionEditors.TryAdd(optionEditor.Name, ftpUploadConfigurationListEditor);
                    break;
                case OptionValueType.LogUploadConfigurationValue:

                    break;
                case OptionValueType.LogUploadConfigurationListValue:

                    break;
                case OptionValueType.NodeEnvVarsConfigurationValue:
                    var localDirectoryMappingConfigurationEditor = new NodeEnvVarsConfigurationEditor(await model.Options.ReadOptionValueAsync<NodeEnvVarsConfigModel>(optionEditor.Name, ApiService.GetNodeEnvVarsConfigAsync));
                    optionEditors.TryAdd(optionEditor.Name, localDirectoryMappingConfigurationEditor);
                    break;
                case OptionValueType.NodeEnvVarsConfigurationListValue:
                    var localDirectoryMappingConfigurationListEditor = new NodeEnvVarsConfigurationListEditor(await model.Options.ReadOptionListValuesAsync(optionEditor.Name, ApiService.GetNodeEnvVarsConfigAsync));
                    optionEditors.TryAdd(optionEditor.Name, localDirectoryMappingConfigurationListEditor);
                    break;
                case OptionValueType.PackageConfigurationValue:
                    var packageConfigurationEditor = new PackageConfigurationEditor(await model.Options.ReadOptionValueAsync<PackageConfigModel>(optionEditor.Name, ApiService.GetPackageConfigAsync));
                    optionEditors.TryAdd(optionEditor.Name, packageConfigurationEditor);
                    break;
                case OptionValueType.PackageConfigurationListValue:
                    var packageConfigurationListEditor = new PackageConfigurationListEditor(await model.Options.ReadOptionListValuesAsync(optionEditor.Name, ApiService.GetPackageConfigAsync));
                    optionEditors.TryAdd(optionEditor.Name, packageConfigurationListEditor);
                    break;
                case OptionValueType.RestApiConfigurationValue:
                    var restApiConfigurationEditor = new RestApiConfigurationEditor(await model.Options.ReadOptionValueAsync<RestApiConfigModel>(optionEditor.Name, ApiService.GetRestApiConfigAsync));
                    optionEditors.TryAdd(optionEditor.Name, restApiConfigurationEditor);
                    break;
                case OptionValueType.RestApiConfigurationListValue:
                    var restApiConfigurationListEditor = new RestApiConfigurationListEditor(await model.Options.ReadOptionListValuesAsync(optionEditor.Name, ApiService.GetRestApiConfigAsync));
                    optionEditors.TryAdd(optionEditor.Name, restApiConfigurationListEditor);
                    break;
                case OptionValueType.FtpDownloadConfigurationValue:
                    var ftpDownloadConfigurationEditor = new FtpDownloadConfigurationEditor(await model.Options.ReadOptionValueAsync<FtpDownloadConfigModel>(optionEditor.Name, ApiService.GetFtpDownloadConfigAsync));
                    optionEditors.TryAdd(optionEditor.Name, ftpDownloadConfigurationEditor);
                    break;
                case OptionValueType.FtpDownloadConfigurationListValue:
                    var ftpDownloadConfigurationListEditor = new FtpDownloadConfigurationListEditor(await model.Options.ReadOptionListValuesAsync(optionEditor.Name, ApiService.GetFtpDownloadConfigAsync));
                    optionEditors.TryAdd(optionEditor.Name, ftpDownloadConfigurationListEditor);
                    break;
            }
        }
    }

    void OnNodeTableChange(QueryModel<NodeInfoModel> query)
    {
    }

    private void AddChildTaskDefinition(AddingNewItemEventArgs e)
    {
        e.Handled = true;
        var target = _dataSource.ItemsSource.FirstOrDefault(x => x.Id == _selectedTaskScheduleDefinitionId);
        if (target == null)
        {
            return;
        }

        if (_editModel.ChildTaskDefinitions.Any(x => x.Value == _selectedTaskScheduleDefinitionId))
        {
            return;
        }

        var taskScheduleConfig = _dataSource.ItemsSource.FirstOrDefault(x => x.Id == _selectedTaskScheduleDefinitionId);
        if (taskScheduleConfig == null)
        {
            return;
        }

        e.Handled = false;
        e.DataItem.Name = taskScheduleConfig.Name;
        e.DataItem.Value = taskScheduleConfig.Id;
    }

    private void NewEnvVarAdding(AddingNewItemEventArgs e)
    {
        e.DataItem.Name = string.Empty;
        e.DataItem.Value = string.Empty;
        e.DataItem.BeginEdit();
    }

    void OnTableChange(QueryModel<JobScheduleConfigModel> query)
    {
    }

    void OnCronExpressionValueChanging(ValueChangingEventArgs<string> e)
    {
        try
        {
            e.DataItem.Value = e.Value;
            if (CronExpression.IsValidExpression(e.DataItem.Value))
            {
                var desc = ExpressionDescriptor.GetDescription(e.DataItem.Value, new Options
                {
                    DayOfWeekStartIndexZero = false,
                    Use24HourTimeFormat = true,
                    Locale = "zh-cn"
                });
                e.DataItem.Tag = desc;
            }
            else
            {
                CronExpression.ValidateExpression(e.DataItem.Value);
            }
        }
        catch (Exception ex)
        {
            e.DataItem.Tag = $"解析失败:{ex.Message}";
        }
    }

    void OnSelectedChildTaskDefinitionChanged(IEnumerable<JobScheduleConfigModel> items)
    {
        if (this._selectedTaskScheduleConfigList != items)
        {
            this._selectedTaskScheduleConfigList = items;
        }
    }

}