@namespace NodeService.WebServer.UI.Pages.CommonConfig.JobTypeDescConfigs
@page "/CommonConfig/JobTypeDescConfigs"
@inject NotificationService _notice
@inject ApiService ApiService
@inject IMessageService _message
@inject ConfirmService _confirmService
@inject NavigationManager NavigationManager
@implements IDisposable

<GridContent>
    <Modal Width="800"
           Title="@_modalTitle"
           Visible="@_editFormVisible"
           ConfirmLoading="@_editFormConfirmLoading"
           OnOk="@HandleEditFormOk"
           OnCancel="@HandleEditFormCancel">
        <Form Model="@_editModel" Size="@AntSizeLDSType.Default"
              LabelColSpan="4"
              Layout="@FormLayout.Horizontal"
              WrapperColSpan="20"
              OnFinish="OnEditFormFinish"
              OnFinishFailed="OnEditFormFinishFailed"
              @ref="@_editForm">
            <FormItem Label="名称">
                <Input @bind-Value="@context.Name"/>
            </FormItem>
            <FormItem Label="描述">
                <Input @bind-Value="@context.Description"/>
            </FormItem>
            <FormItem Label="类型">
                <Input @bind-Value="@context.FullName"/>
            </FormItem>
            <FormItem Label="选项编辑器器">
                <Select DataSource="@_optionEditors"
                        DefaultValue="@(_optionEditors.FirstOrDefault())"
                        @bind-Value="@_selectedEditor"
                        LabelName="@nameof(TypedEditor<OptionValueType>.Name)"
                        Style="width:200px"/>
                <StringEntryTable ItemsSource="@context.OptionValueEditors"
                                  NameTitle="字段"
                                  ValueTitle="编辑器"
                                  IsValueEditable="false"
                                  AddingNewItem="OnOptionValueAdding"/>
            </FormItem>

        </Form>
    </Modal>

    <Space Style="margin-bottom:16px">
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="() => ShowEditForm()">新建配置</Button>
        </SpaceItem>
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="_dataSource.ForceRequest">刷新</Button>
        </SpaceItem>

    </Space>
    <Table @ref="_table" 
        RowExpandable="c => true" 
        Size="TableSize.Small" 
        Loading="@_dataSource.IsLoading"
        EnableVirtualization="false"
        TItem="JobTypeDescConfigModel"
        Resizable
        OnChange="OnTableChange"
        DataSource="@_dataSource.ItemsSource"
        PageIndex="_dataSource.PageIndex"
        PageSize="_dataSource.PageSize"
        OnPageIndexChange="@_dataSource.OnPaginationEvent"
        OnPageSizeChange="@_dataSource.OnPaginationEvent">
        <TitleTemplate>
            <GridRow Style="margin-bottom:16px">
                <GridCol Span="4">
                    <Title Level="3">作业类型描述配置</Title>
                </GridCol>
                <GridCol Span="4" Offset="20">
                    <Search Placeholder="搜索" @bind-Value="@_dataSource.QueryParameters.Keywords" OnSearch="@_dataSource.RefreshAsync"/>
                </GridCol>
            </GridRow>
        </TitleTemplate>
        <ColumnDefinitions>
            <Selection Key="@context.Id" Type="checkbox"/>
            <PropertyColumn Title="标志" Ellipsis Sortable Property="c => c.Id"></PropertyColumn>
            <PropertyColumn Title="名称" Sortable Property="c => c.Name"></PropertyColumn>
            <PropertyColumn Title="类型" Sortable="true" Property="c => c.FullName"></PropertyColumn>
            <PropertyColumn Title="描述" Sortable="true" Property="c => c.Description"></PropertyColumn>
            <ActionColumn Fixed="right" Width="250" Title="操作">
                <CellRender Context="cellData">
                    <Space>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Copy" OnClick="() => ShowEditForm(context.CopyClone<JobTypeDescConfigModel>())"></Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Edit" OnClick="() => ShowEditForm(context.JsonClone<JobTypeDescConfigModel>())"></Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Danger Icon="@IconType.Outline.Delete" OnClick="() => DeleteConfig(context)"></Button>
                        </SpaceItem>

                    </Space>
                </CellRender>
            </ActionColumn>
        </ColumnDefinitions>
        <ExpandTemplate>
            <Tabs Animated>
                <TabPane Tab="选项编辑器" Key="1">
                    <StringEntryTable ItemsSource="@context.Data.OptionValueEditors"
                                      NameTitle="备注"
                                      ValueTitle="编辑器"
                                      IsEditable="false"/>
                </TabPane>
            </Tabs>
        </ExpandTemplate>
    </Table>
</GridContent>

@code {
    ITable _table;
    string _modalTitle;
    bool _editFormVisible;
    bool _editFormSubmitting;
    bool _editFormConfirmLoading;
    Form<JobTypeDescConfigModel> _editForm;
    JobTypeDescConfigModel _editModel = new();

    IEnumerable<StringEntry> _selectedOptionValueEditors;

    readonly List<TypedEditor<OptionValueType>> _optionEditors = new();

    TypedEditor<OptionValueType> _selectedEditor;


    private bool _loading;

    private RoutedPaginationDataSource<JobTypeDescConfigModel, PaginationQueryParameters> _dataSource;

    protected override void OnInitialized()
    {
        _optionEditors.AddRange(new TypedEditor<OptionValueType>[]
            {
                new()
                {
                    Name = "布尔编辑器",
                    Value = OptionValueType.BooleanValue
                },
                new()
                {
                    Name = "文本编辑器",
                    Value = OptionValueType.TextValue
                },
                new()
                {
                    Name = "Python代码编辑器",
                    Value = OptionValueType.PythonCodeValue
                },
                new()
                {
                    Name = "批处理脚本代码编辑器",
                    Value = OptionValueType.BatchScriptValue
                },
                new()
                {
                    Name = "数字编辑器",
                    Value = OptionValueType.NumberValue
                },
                new()
                {
                    Name = "文本数组编辑器",
                    Value = OptionValueType.TextArrayValue
                },
                new()
                {
                    Name = "Kafka配置选择器",
                    Value = OptionValueType.KafkaConfigurationValue
                },
                new()
                {
                    Name = "Mysql配置选择器",
                    Value = OptionValueType.MysqlConfigurationValue
                },
                new()
                {
                    Name = "Ftp配置选择器",
                    Value = OptionValueType.FtpConfigurationValue
                },
                new()
                {
                    Name = "Kafka列表编辑器",
                    Value = OptionValueType.KafkaConfigurationListValue
                },
                new()
                {
                    Name = "Mysql列表编辑器",
                    Value = OptionValueType.MysqlConfigurationListValue
                },
                new()
                {
                    Name = "Ftp上传配置选择器",
                    Value = OptionValueType.FtpUploadConfigurationValue
                },
                new()
                {
                    Name = "Ftp下载配置选择器",
                    Value = OptionValueType.FtpDownloadConfigurationValue
                },
                new()
                {
                    Name = "Ftp列表编辑器",
                    Value = OptionValueType.FtpConfigurationListValue
                },
                new()
                {
                    Name = "日志上传编辑器",
                    Value = OptionValueType.LogUploadConfigurationValue
                },
                new()
                {
                    Name = "插件编辑器",
                    Value = OptionValueType.PackageConfigurationValue
                },
                new()
                {
                    Name = "节点环境变量编辑器",
                    Value = OptionValueType.NodeEnvVarsConfigurationValue
                },
                new()
                {
                    Name = "RestApi配置选择器",
                    Value = OptionValueType.RestApiConfigurationValue
                },
                new()
                {
                    Name = "Ftp上传列表编辑器",
                    Value = OptionValueType.FtpUploadConfigurationListValue
                },
                new()
                {
                    Name = "日志上传列表编辑器",
                    Value = OptionValueType.LogUploadConfigurationListValue
                },
                new()
                {
                    Name = "插件列表编辑器",
                    Value = OptionValueType.PackageConfigurationListValue
                },
                new()
                {
                    Name = "节点环境变量列表编辑器",
                    Value = OptionValueType.NodeEnvVarsConfigurationListValue
                },
                new()
                {
                    Name = "RestApi配置列表编辑器",
                    Value = OptionValueType.FtpDownloadConfigurationValue
                },
                new()
                {
                    Name = "Ftp下载配置列表编辑器",
                    Value = OptionValueType.FtpUploadConfigurationListValue
                }
            }
        );

        _dataSource = new RoutedPaginationDataSource<JobTypeDescConfigModel, PaginationQueryParameters>(
            NavigationManager,
            ApiService.QueryJobTypeDescConfigurationListAsync,
            StateHasChanged);
        _dataSource.Request();

        base.OnInitialized();
    }

    private void ShowEditForm(JobTypeDescConfigModel? model = null)
    {
        _editFormVisible = true;
        if (model == null)
        {
            _editModel = new JobTypeDescConfigModel
            {
                Id = Guid.NewGuid().ToString()
            };
            _modalTitle = "新建配置";
        }
        else
        {
            _editModel = model.ReferenceClone<JobTypeDescConfigModel>();
            _modalTitle = "编辑配置";
        }
    }


    private async Task OnEditFormFinish(EditContext editContext)
    {
        try
        {
            var apiResponse = await ApiService.AddOrUpdateAsync(_editModel);
            if (apiResponse.ErrorCode == 0)
            {
                await _dataSource.RefreshAsync();
                _editFormVisible = false;
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = apiResponse.Message
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = ex.Message
            });
        }
        finally
        {
            _editFormSubmitting = false;
            _editFormConfirmLoading = false;
        }
    }

    private void OnEditFormFinishFailed(EditContext editContext)
    {
        _editFormSubmitting = false;
        _editFormConfirmLoading = false;
    }

    private Task<ConfirmResult> ShowConfirmDialogAsync(string title, string content)
    {
        var options = new ConfirmButtonOptions
        {
            Button1Props = new ButtonProps
            {
                ChildContent = "确定",
                Type = ButtonType.Primary
            },
            Button2Props = new ButtonProps
            {
                ChildContent = "取消"
            }
        };
        return _confirmService.Show(
            content,
            title,
            ConfirmButtons.OKCancel,
            ConfirmIcon.Info,
            options);
    }

    private async Task DeleteConfig(JobTypeDescConfigModel model)
    {
        try
        {
            if (await ShowConfirmDialogAsync("删除确认", "确定要删除吗？") != ConfirmResult.OK)
            {
                return;
            }

            var apiResponse = await ApiService.RemoveAsync(model);
            if (apiResponse.ErrorCode == 0)
            {
                await _dataSource.RefreshAsync();
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = apiResponse.Message
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = "加载配置失败"
            });
        }
    }


    private void HandleEditFormCancel(MouseEventArgs e)
    {
        _editFormSubmitting = false;
        _editFormVisible = false;
    }


    private void HandleEditFormOk(MouseEventArgs e)
    {
        _editFormSubmitting = true;
        _editForm.Submit();
    }


    private void OnOptionValueAdding(AddingNewItemEventArgs e)
    {
        if (_selectedEditor == null)
        {
            return;
        }

        e.DataItem.Name = null;
        e.DataItem.Value = _selectedEditor.Name;
        e.DataItem.Tag = _selectedEditor.Value.ToString();
        e.DataItem.BeginEdit();
    }

    private void RemoveSelectedOptionValueEditors()
    {
    }

    void OnTableChange(QueryModel<JobTypeDescConfigModel> query)
    {
    }

    public void Dispose()
    {
        _dataSource.Dispose();
    }

}