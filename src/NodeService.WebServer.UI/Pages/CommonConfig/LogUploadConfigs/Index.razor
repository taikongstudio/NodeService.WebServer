@namespace NodeService.WebServer.UI.Pages.CommonConfig.LogUploadConfigs
@page "/CommonConfig/LogUploadConfigs"
@using NodeService.Infrastructure.DataModels
@inject ApiService ApiService
@inject NotificationService _notice
@inject ConfirmService _confirmService

<GridContent>
    <Modal 
           Width="800"
           Title="@_modalTitle"
           Visible="@_editFormVisible"
           ConfirmLoading="@_editFormConfirmLoading"
           OnOk="@HandleEditFormOk"
           OnCancel="@HandleEditFormCancel">
        <Form Model="@_editModel" 
              LabelColSpan="4"
              WrapperColSpan="20"
              OnFinish="OnEditFormFinish"
              OnFinishFailed="OnEditFormFinishFailed"
              @ref="@_editForm">
                <FormItem Required Label="名称">
                    <Input @bind-Value="@context.Name" />
                 </FormItem>
                <FormItem Required Label="Ftp配置">
                    <Select DataSource="@_ftpConfigs"
                            @bind-Value="@_editModel.FtpConfigId"
                            LabelName="@nameof(FtpConfigModel.Name)"
                            ValueName="@nameof(FtpConfigModel.Id)"
                            />
                </FormItem>
                <FormItem Label="远程目录">
                    <Input @bind-Value="@context.RemoteDirectory" />
                </FormItem>
                <FormItem Label="本地目录">
                <Button OnClick="AddLocalDirectory" Type="primary" Style="margin-bottom:16px;margin-left:16px;">
                    添加
                </Button>
                <Button OnClick="RemoveSelectedLocalDirectories" Type="primary" Style="margin-bottom:16px;margin-left:16px;">
                    删除
                </Button>
                 <StringEntryTable DataSource="@context.LocalDirectories"
                                   NameTitle="备注"
                                   ValueTitle="路径"
                                   @bind-SelectedItems="@_selectedLocalDirectories"
                                   RemoveItemAction="@RemoveSelectedLocalDirectory" />
                </FormItem>
                <FormItem Label="模式匹配">
                <Input @bind-Value="@context.SearchPattern" />
                </FormItem>
            <FormItem Label="大小写匹配">
                <RadioGroup @bind-Value="@context.MatchCasing">
                    <Radio RadioButton Value="@(System.IO.MatchCasing.PlatformDefault)">默认</Radio>
                    <Radio RadioButton Value="@(System.IO.MatchCasing.CaseInsensitive)">大小写无关</Radio>
                    <Radio RadioButton Value="@(System.IO.MatchCasing.CaseSensitive)">大小写有关</Radio>
                </RadioGroup>
            </FormItem>
                <FormItem Label="包含子目录">
                <Switch @bind-Checked="@context.IncludeSubDirectories" />
                 </FormItem>
                <FormItem Label="大小限制(字节)">
                <Input @bind-Value="@context.SizeLimitInBytes" Type="number" />
                 </FormItem>
                <FormItem Label="时间限制(秒)">
                <Input @bind-Value="@context.TimeLimitInSeconds" Type="number" />
                </FormItem>
        </Form>
    </Modal>

     <Space Style="margin-bottom:16px">
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="()=>ShowEditForm()">新建配置</Button>
        </SpaceItem>
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="()=>this.QueryConfigurationListAsync()">刷新</Button>
        </SpaceItem>

    </Space>
    <Table @ref="_table" Size="TableSize.Small" Loading="_loading" EnableVirtualization="true" TItem="LogUploadConfigModel"
           Resizable
           OnChange="OnTableChange"
           DataSource="@_dataSource.Items"
           PageIndex="_dataSource.PageIndex"
           PageSize="_dataSource.PageSize"
           OnPageIndexChange="@_dataSource.OnPageSizeChanged"
           OnPageSizeChange="@_dataSource.OnPageSizeChanged">
        <TitleTemplate>
            <GridRow Style="margin-bottom:16px">
                <GridCol Span="4">
                    <Title Level="3">日志上传配置</Title>
                </GridCol>
                <GridCol Span="4" Offset="20">
                    <Search Placeholder="搜索" @bind-Value="@_searchText" OnSearch="()=>_table?.ReloadData()" />
                </GridCol>
            </GridRow>
        </TitleTemplate>
        <ColumnDefinitions>
             <PropertyColumn Title="标志" Ellipsis Sortable Property="c=>c.Id"></PropertyColumn>
             <PropertyColumn Title="名称" Sortable Property="c=>c.Name"></PropertyColumn>
             <PropertyColumn Title="Ftp配置名称" Sortable="true" Property="c=>c.FtpConfig">
                 <Text>@context.FtpConfig?.Name</Text>
                </PropertyColumn>
            <PropertyColumn Title="远程目录" Sortable="true" Property="c=>c.RemoteDirectory"></PropertyColumn>
            <PropertyColumn Title="大小限制（字节）" Sortable="true" Property="c=>c.SizeLimitInBytes"></PropertyColumn>
            <PropertyColumn Title="时间限制（秒）" Sortable="true" Property="c=>c.TimeLimitInSeconds"></PropertyColumn>
                <ActionColumn Fixed="right" Width="250" Title="操作">
                    <CellRender Context="cellData">
                        <Space>
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Copy" OnClick="()=>ShowEditForm(context.CopyClone<LogUploadConfigModel>())"></Button>
                            </SpaceItem>
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Edit" OnClick="()=>ShowEditForm(context)"></Button>
                            </SpaceItem>
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Danger Icon="@IconType.Outline.Delete" OnClick="()=>DeleteConfig(context)"></Button>
                         </SpaceItem>
                         @if (cellData.RowData.Expanded)
                        {
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.FullscreenExit" OnClick="()=>cellData.RowData.Expanded=false"></Button>
                            </SpaceItem>
                        }
                        else
                        {
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Fullscreen" OnClick="()=>cellData.RowData.Expanded=true"></Button>
                            </SpaceItem>
                        }

                    </Space>
                </CellRender>
            </ActionColumn>
        </ColumnDefinitions>
         <ExpandTemplate>
             <Tabs Animated>
                <TabPane Tab="本地目录" Key="1">
                    <StringEntryTable DataSource="@context.Data.LocalDirectories"
                                      NameTitle="备注"
                                      ValueTitle="路径"
                                      IsEditable="false" />
                </TabPane>
            </Tabs>
        </ExpandTemplate>

    </Table>
</GridContent>

@code {
    ITable _table;
    string _searchText;
    string _modalTitle;
    bool _editFormVisible = false;
    bool _editFormSubmitting = false;
    bool _editFormConfirmLoading = false;
    Form<LogUploadConfigModel> _editForm;
    LogUploadConfigModel _editModel = new LogUploadConfigModel();
    IEnumerable<StringEntry> _selectedLocalDirectories;

    IEnumerable<FtpConfigModel> _ftpConfigs = Array.Empty<FtpConfigModel>();

    private bool _loading;
    private PaginationDataSource<LogUploadConfigModel> _dataSource;

    protected override void OnInitialized()
    {
        _dataSource = new PaginationDataSource<LogUploadConfigModel>(ApiService);
        _dataSource.Filter = FilterModel;
        base.OnInitialized();
    }

    private async Task ShowEditForm(LogUploadConfigModel? model = null)
    {
        this._loading = true;
        this._editFormVisible = true;
        if (model == null)
        {
            this._editModel = new LogUploadConfigModel()
                {
                    Id = Guid.NewGuid().ToString()
                };
            this._modalTitle = "新建配置";
        }
        else
        {
            this._editModel = model.ReferenceClone<LogUploadConfigModel>();
            this._modalTitle = "编辑配置";
        }
        this._loading = false;
    }

    private void FindConfigs(LogUploadConfigModel model)
    {
        model.FtpConfig = this._ftpConfigs.FirstOrDefault(x => x.Id == model.FtpConfigId);
    }

    private async Task OnEditFormFinish(EditContext editContext)
    {
        try
        {
            var apiResponse = await this.ApiService.AddOrUpdateAsync(this._editModel);
            if (apiResponse.ErrorCode == 0)
            {
                await this._dataSource.UpdateSourceAsync();
                FindConfigs();
                this._editFormVisible = false;
            }
            else
            {
                await this._notice.Open(new NotificationConfig()
                    {
                        Message = "错误提示",
                        Description = apiResponse.Message,
                    });
            }
        }
        catch (Exception ex)
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Message = "错误提示",
                    Description = ex.ToString(),
                });
        }
        finally
        {
            this._editFormSubmitting = false;
            this._editFormConfirmLoading = false;
        }
    }

    private void OnEditFormFinishFailed(EditContext editContext)
    {
        this._editFormSubmitting = false;
        this._editFormConfirmLoading = false;
    }


    async Task DeleteConfig(LogUploadConfigModel model)
    {
        try
        {
            var apiResponse = await this.ApiService.RemoveAsync(model);
            if (apiResponse.ErrorCode == 0)
            {
                await this._dataSource.UpdateSourceAsync();
            }
            else
            {
                await this._notice.Open(new NotificationConfig()
                    {
                        Message = "错误提示",
                        Description = apiResponse.Message,
                    });
            }
        }
        catch (Exception ex)
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Message = "错误提示",
                    Description = ex.ToString(),
                });
        }
    }

    private async Task QueryFtpConfigListAsync()
    {
        var rsp = await this.ApiService.QueryFtpConfigurationListAsync(QueryParameters.All);
        if (rsp.ErrorCode == 0)
        {
            this._ftpConfigs = rsp.Result;
        }

    }


    private void HandleEditFormCancel(MouseEventArgs e)
    {
        this._editFormVisible = false;
    }


    private async Task HandleEditFormOk(MouseEventArgs e)
    {
        this._editFormSubmitting = true;
        this._editForm.Submit();

    }


    protected override async Task OnInitializedAsync()
    {
        this._loading = true;
        await this.QueryConfigurationListAsync().ConfigureAwait(false);
        this._loading = false;
    }

    private async Task QueryConfigurationListAsync()
    {
        try
        {
            await QueryFtpConfigListAsync();
            await this._dataSource.UpdateSourceAsync();
            FindConfigs();
        }
        catch (Exception ex)
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Message = "错误提示",
                    Description = ex.ToString(),
                });
        }

    }

    private async Task QueryFtpConfigurationListAsync()
    {
        try
        {
            await this._dataSource.UpdateSourceAsync();

        }
        catch (Exception ex)
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Message = "错误提示",
                    Description = ex.ToString(),
                });
        }

    }

    private void AddLocalDirectory()
    {
        var newEntry = new StringEntry()
            {
                Id = Guid.NewGuid().ToString()
            };
        this._editModel.LocalDirectories.Add(newEntry);
        newEntry.BeginEdit();
    }

    private void RemoveSelectedLocalDirectories()
    {
        if (this._selectedLocalDirectories == null)
        {
            return;
        }
        foreach (var item in this._selectedLocalDirectories)
        {
            this._editModel.LocalDirectories.Remove(item);
        }
    }

    private void RemoveSelectedLocalDirectory(StringEntry stringEntry)
    {
        this._editModel.LocalDirectories.Remove(stringEntry);
    }

    private void FindConfigs()
    {
        foreach (var item in this._dataSource.Items)
        {
            item.FtpConfig = this._ftpConfigs.FirstOrDefault(x => x.Id == item.FtpConfigId);
        }
    }

    private bool FilterModel(LogUploadConfigModel model)
    {
        if (string.IsNullOrEmpty(model.Name) || string.IsNullOrEmpty(_searchText))
        {
            return true;
        }
        return model.Name.Contains(this._searchText, StringComparison.OrdinalIgnoreCase);
    }

    void OnTableChange(QueryModel<LogUploadConfigModel> query)
    {
        this._dataSource.SetItemsSource(query.ExecuteQuery(this._dataSource.ItemsSource.AsQueryable()));
        this._dataSource.Refresh();
    }

}

