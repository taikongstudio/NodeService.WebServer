@namespace NodeService.WebServer.UI.Pages.CommonConfig.NodeUsages
@page "/CommonConfig/NodeUsages"

@inject NotificationService _notice
@inject ApiService ApiService
@inject ConfirmService _confirmService
@inject NavigationManager NavigationManager
@implements IDisposable

<GridContent>
        <ConfigurationVersionSelectorDialog Title="版本列表"
                                        Closed="()=>_dataSource.QueryAsync()"
                                        ConfigurationId="@_configurationId"
                                        @bind-Visible="@_versionSelectorDialogVisible"
                                        TItem="NodeUsageConfigurationModel"/>
    <Modal Title="@_modalTitle"
           Width="800"
           MaskClosable="false"
           Style="top:0"
           @bind-Visible="@_editFormVisible"
           ConfirmLoading="@_editFormConfirmLoading"
           OnOk="@HandleEditFormOk"
           OnCancel="@HandleEditFormCancel">
        <Form Model="@_editModel"
              LabelColSpan="8"
               Layout="@FormLayout.Vertical"
              WrapperColSpan="24"
              OnFinish="OnEditFormFinish"
              OnFinishFailed="OnEditFormFinishFailed"
              @ref="@_editForm">
            @if (context == null)
            {
                <Empty/>
            }
            else
            {
                <FormItem Label="用途名称">
                    <Input @bind-Value="@context.Name"/>
                </FormItem>
                <FormItem Label="启用">
                    <Switch @bind-Value="@context.IsEnabled" />
                </FormItem>
                <FormItem Label="描述">
                    <Input @bind-Value="@context.Description" />
                </FormItem>
                <FormItem Label="区域">
                    <Select DataSource="@_nodeSettings.IpAddressMappings"
                            Value="@context.FactoryName"
                            OnSelectedItemChanged="(StringEntry value)=>OnSelectedAreaTagChanged(context,value)"
                            TItem="StringEntry"
                            Style="width:200px"
                            TItemValue="string"
                            Size="middle"
                            DefaultActiveFirstOption
                            LabelName="@nameof(StringEntry.Name)"
                            ValueName="@nameof(StringEntry.Tag)" />
                </FormItem>

                <Divider />
                <FormItem Label="启用自动检测" Help="实时分析节点进程信息，当相关进程启动时，自动加入此用途。">
                    <Switch @bind-Value="@context.Value.AutoDetect" />
                </FormItem>
                @if (context.Value.AutoDetect)
                {
                    <FormItem Label="启用动态检测" Help="当相关进程退出时，自动从此用途中移除。">
                        <Switch @bind-Value="@context.Value.DynamicDetect" />
                    </FormItem>
                    <Divider />
                    <FormItem Label="服务与进程检测">
                        <ServiceProcessDetectionTable ItemsSource="@context.Value.ServiceProcessDetections" />
                    </FormItem>
                }
                <Divider />
                <FormItem Label="节点">
                    <NodeSelector Mode="SelectionMode.Multiple" @bind-SelectedItems="_selectedNodes" LoadingSelectedItems="@_loadingSelectedItems" />
                </FormItem>

            }
        </Form>
    </Modal>

    <Table @ref="_table"
           Size="TableSize.Small"
           Loading="@_dataSource.IsLoading"
           EnableVirtualization="false"
           TItem="NodeUsageConfigurationModel"
           DataSource="@_dataSource.ItemsSource"
           Resizable
           OnChange="OnTableChange"
           PageIndex="@_dataSource.PageIndex"
           PageSize="@_dataSource.PageSize"
           Total="@_dataSource.TotalCount"
           OnPageIndexChange="@_dataSource.OnPaginationEvent"
           OnPageSizeChange="@_dataSource.OnPaginationEvent">
        <TitleTemplate>
            <GridRow Style="margin-bottom:16px">
                <GridCol Span="6">
                    <Title Level="3">节点用途配置</Title>
                </GridCol>
                <GridCol Span="6" Offset="12">
                    <Search Placeholder="搜索" @bind-Value="@_dataSource.QueryParameters.Keywords" OnSearch="@_dataSource.QueryAsync"/>
                </GridCol>
            </GridRow>
            <GridRow>
                <Space>
                    <SpaceItem>
                        <Button Shape="@ButtonShape.Circle" Icon="@IconType.Outline.Plus" Type="@ButtonType.Primary" OnClick="() => ShowEditForm()"></Button>
                    </SpaceItem>
                    <SpaceItem>
                        <Button Shape="@ButtonShape.Circle" Icon="@IconType.Outline.Reload" Type="@ButtonType.Primary" OnClick="_dataSource.QueryAsync"></Button>
                    </SpaceItem>
                </Space>
            </GridRow>
        </TitleTemplate>
        <ColumnDefinitions>
            <PropertyColumn Title="标志" Sortable="true" Width="100" Property="c => c.Id">
                <Text Ellipsis Copyable Style="max-height:30px;display:flex;flex-direction:row">
                    <div style="overflow: hidden; white-space: nowrap;text-overflow: ellipsis;" title="@context.Id">@context.Id</div>
                </Text>
            </PropertyColumn>
            <PropertyColumn Title="区域" Sortable Property="c => c.FactoryName">
                <Text>@_nodeSettings.IpAddressMappings.FirstOrDefault(x=>x.Tag==context.FactoryName)?.Name</Text>
            </PropertyColumn>
            <PropertyColumn Title="名称" Sortable Property="c => c.Name"></PropertyColumn>
            <PropertyColumn Title="节点"  Width="300" Property="c => c.Value.Nodes">

                <Text Ellipsis Copyable Style="max-width:280px;max-height:30px;display:flex;flex-direction:row">
                    <div style="max-width:auto;overflow: hidden; white-space: nowrap;text-overflow: ellipsis;">
                        @string.Join(",", context.Nodes.Select(x => x.Name))
                    </div>
                </Text>
            </PropertyColumn>
            <PropertyColumn Title="备注" Property="c => c.Description">

            </PropertyColumn>
            <ActionColumn Fixed="right" Width="250" Title="操作">
                <CellRender Context="cellData">
                    <Space>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Copy" OnClick="() => ShowEditForm(context.CopyClone<NodeUsageConfigurationModel>())"></Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Edit" OnClick="() => ShowEditForm(context.JsonClone<NodeUsageConfigurationModel>())"></Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.UnorderedList" OnClick="() => ShowVersionSelectorDialog(context.Id)"></Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Danger Icon="@IconType.Outline.Delete" OnClick="() => DeleteConfig(context)"></Button>
                        </SpaceItem>

                    </Space>
                </CellRender>
            </ActionColumn>
        </ColumnDefinitions>
    </Table>
</GridContent>

@code {
    ITable _table;
    string _modalTitle;
    bool _editFormVisible;
    bool _editFormSubmitting;
    bool _editFormConfirmLoading;
    bool _loadingSelectedItems;
    Form<NodeUsageConfigurationModel> _editForm;
    RoutedPaginationDataSource<NodeUsageConfigurationModel, PaginationQueryParameters> _dataSource;
    IEnumerable<NodeInfoModel> _selectedNodes;
    IEnumerable<StringEntry> _selectedEntries = [];
    NodeUsageConfigurationModel _editModel = new();
    NodeSettings _nodeSettings = new();

    string _configurationId;
    bool _versionSelectorDialogVisible;

    async Task ShowVersionSelectorDialog(string id)
    {
        _configurationId = id;
        _versionSelectorDialogVisible = true;
        await Task.CompletedTask;
    }

    async Task QueryNodeSettingsAsync()
    {
        try
        {
            var apiResponse = await ApiService.QueryNodeSettingsAsync();
            if (apiResponse.ErrorCode == 0)
            {
                _nodeSettings = apiResponse.Result ?? new NodeSettings();
            }
            else
            {
                await _notice.Open(new NotificationConfig
                    {
                        Message = "错误提示",
                        Description = apiResponse.Message
                    });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = ex.ToString()
                });
        }
    }

    protected override async void OnInitialized()
    {
        _dataSource = new RoutedPaginationDataSource<NodeUsageConfigurationModel, PaginationQueryParameters>(
            NavigationManager.BaseUri,
            ApiService.QueryNodeUsageConfigListAsync,
            StateHasChanged);
        _dataSource.ExceptionHandler = OnExepction;
        _dataSource.ItemInitializer = InitAsync;
        await QueryNodeSettingsAsync();
        base.OnInitialized();
    }

    ValueTask InitAsync(NodeUsageConfigurationModel? entity, CancellationToken cancellationToken = default)
    {
        if (entity != null)
        {
            if (entity.Value.ServiceProcessDetections == null)
            {
                entity.Value.ServiceProcessDetections = [];
            }
        }

        return ValueTask.CompletedTask;
    }

    async Task OnExepction(Exception ex)
    {
        await _notice.Open(new NotificationConfig
        {
            Message = "加载失败",
            Description = ex.ToString()
        });
    }

    protected override async Task OnInitializedAsync()
    {
        await _dataSource.RequestAsync();
        await base.OnInitializedAsync();
    }


    async Task ShowEditForm(NodeUsageConfigurationModel? model = null)
    {
        _editFormVisible = true;
        if (model == null)
        {
            _editModel = new NodeUsageConfigurationModel
                {
                    Id = Guid.NewGuid().ToString()
                };
            _modalTitle = "新建配置";
        }
        else
        {
            _modalTitle = "编辑配置";
            _editModel = model;
            _loadingSelectedItems = true;
            _selectedNodes = await _editModel.Value.Nodes.Select(x => x.NodeInfoId).QueryNodeListAsync(ApiService);
            _loadingSelectedItems = false;
        }
    }

    async Task OnEditFormFinish(EditContext editContext)
    {
        try
        {
            if (_selectedNodes != null)
            {
                _editModel.Value.Nodes.Clear();
                _editModel.Value.Nodes.AddRange(_selectedNodes.Select(x => new NodeUsageInfo()
                    {
                        Name = x.Name,
                        NodeInfoId = x.Id
                    }));
            }
            var apiResponse = await ApiService.AddOrUpdateAsync(_editModel);
            if (apiResponse.ErrorCode == 0)
            {
                _editFormVisible = false;
                _selectedNodes = [];
                await _dataSource.QueryAsync();
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = apiResponse.Message
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = ex.ToString()
            });
        }
        finally
        {
            _editFormSubmitting = false;
            _editFormConfirmLoading = false;
        }
    }

    void OnEditFormFinishFailed(EditContext editContext)
    {
        _editFormSubmitting = false;
        _editFormConfirmLoading = false;
    }

    Task<ConfirmResult> ShowConfirmDialogAsync(string title, string content)
    {
        var options = new ConfirmButtonOptions
        {
            Button1Props = new ButtonProps
            {
                ChildContent = "确定",
                Type = ButtonType.Primary
            },
            Button2Props = new ButtonProps
            {
                ChildContent = "取消"
            }
        };
        return _confirmService.Show(
            content,
            title,
            ConfirmButtons.OKCancel,
            ConfirmIcon.Info,
            options);
    }

    async Task DeleteConfig(NodeUsageConfigurationModel model)
    {
        try
        {
            if (await ShowConfirmDialogAsync("删除确认", "确定要删除吗？") != ConfirmResult.OK)
            {
                return;
            }

            var apiResponse = await ApiService.RemoveAsync(model);
            if (apiResponse.ErrorCode == 0)
            {
                await _dataSource.QueryAsync();
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = apiResponse.Message
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = "加载配置失败"
            });
        }
    }


    void HandleEditFormCancel(MouseEventArgs e)
    {
        _editFormVisible = false;
    }


    void HandleEditFormOk(MouseEventArgs e)
    {
        _editFormSubmitting = true;
        _editForm.Submit();
    }

    async Task OnTableChange(QueryModel<NodeUsageConfigurationModel> query)
    {
        _dataSource.QueryParameters.SortDescriptions.Clear();
        foreach (var sortModel in query.SortModel)
        {
            if (sortModel.Sort == null)
            {
                continue;
            }

            _dataSource.QueryParameters.SortDescriptions.Add(new SortDescription(sortModel.FieldName, sortModel.Sort));
        }

        await _dataSource.RequestAsync();
    }

    public void Dispose()
    {
        _dataSource.Dispose();
    }

    async Task OnSelectedAreaTagChanged(NodeUsageConfigurationModel nodeUsageConfiguration, StringEntry entry)
    {
        if (entry == null)
        {
            return;
        }
        nodeUsageConfiguration.FactoryName = entry.Tag;
    }

}