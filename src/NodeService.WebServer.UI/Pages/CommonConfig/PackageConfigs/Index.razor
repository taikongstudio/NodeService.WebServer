@namespace NodeService.WebServer.UI.Pages.CommonConfig.PackageConfigs
@page "/CommonConfig/Package"
@inject NotificationService _notice
@inject ApiService ApiService
@inject ConfirmService _confirmService
@inject NavigationManager NavigationManager
@using System.Security.Cryptography
@implements IDisposable


<GridContent>
    <Drawer Closable="true" Width="320" @bind-Visible="@_packageConfigDrawerVisible" Title='"查看内容"' OnClose="ClosePackageConfigJsonStringDrawer">
        <Template style="height:90%">
            <TextArea Style="height:500px" ReadOnly Value="@pluginString" />
        </Template>
    </Drawer>
    <Modal
        Width="800"
        Style="top:0"
        Title="@_modalTitle"
        @bind-Visible="@_editFormVisible"
        ConfirmLoading="@_editFormConfirmLoading"
        OnOk="@HandleEditOk"
        OnCancel="@HandleCancel">
        <Form Model="@_editModel"
              LabelColSpan="4"
              Loading="_loading"
              WrapperColSpan="20"
              OnFinish="OnEditFormFinish"
              OnFinishFailed="OnEditFormFinishFailed"
              @ref="@_editForm">
            <FormItem Label="名称">
                <Input @bind-Value="@context.Name"/>
            </FormItem>
            <FormItem Label="平台">
                <RadioGroup @bind-Value="@context.Platform">
                    @foreach (var platform in platforms)
                    {
                        <Radio RadioButton Value="@platform">@platform</Radio>
                    }
                </RadioGroup>
            </FormItem>
            <FormItem Label="版本">
                <Input @bind-Value="@context.Version"/>
            </FormItem>
            <FormItem Label="文件">
                <InputFile id="fileInput" OnChange="@OnInputFileChanged" hidden multiple/>
                <Upload Name="files" FileList="_uploadFileItems">
                    <label class="ant-btn" for="fileInput">
                        <Icon Type="upload"/>
                        上传文件
                    </label>
                </Upload>
                @if (!string.IsNullOrEmpty(_fileError))
                {
                    <Alert Type="@AlertType.Error"
                           Message="错误"
                           Description="@_fileError"
                           ShowIcon="true"/>
                }
            </FormItem>
            <FormItem Label="哈希">
                <Input Disabled @bind-Value="@context.Hash"/>
            </FormItem>
            <FormItem Label="入口点">
                <AutoComplete @bind-Value="@context.EntryPoint"
                              Options="@_entryPoints"
                              OnSelectionChange="OnSelectionChange"
                              OnActiveChange="OnActiveChange"
                              Placeholder="input here"/>

            </FormItem>
            <FormItem Label="参数">
                <TextArea @bind-Value="@context.Arguments" />
            </FormItem>
            <FormItem Label="启动">
                <Switch @bind-Checked="@context.Launch"/>
            </FormItem>
        </Form>
    </Modal>

    <Table 
           Size="TableSize.Small"
           Loading="@_dataSource.IsLoading"
           EnableVirtualization="false"
           TItem="PackageConfigModel"
           DataSource="@_dataSource.ItemsSource"
           Resizable
           OnChange="OnTableChange"
           PageIndex="@_dataSource.PageIndex"
           PageSize="@_dataSource.PageSize"
           Total="@_dataSource.TotalCount"
           OnPageIndexChange="@_dataSource.OnPaginationEvent"
           OnPageSizeChange="@_dataSource.OnPaginationEvent">
        <TitleTemplate>
            <GridRow Style="margin-bottom:16px">
                <GridCol Span="6">
                    <Title Level="3">包配置</Title>
                </GridCol>
                <GridCol Span="6" Offset="12">
                    <Search Placeholder="搜索" @bind-Value="@_dataSource.QueryParameters.Keywords" OnSearch="@_dataSource.RefreshAsync"/>
                </GridCol>
            </GridRow>
            <GridRow>
                <Space>
                    <SpaceItem>
                        <Button Shape="@ButtonShape.Circle" Icon="@IconType.Outline.Plus" Type="@ButtonType.Primary" OnClick="() => ShowEditForm()"></Button>
                    </SpaceItem>
                    <SpaceItem>
                        <Button Shape="@ButtonShape.Circle" Icon="@IconType.Outline.Reload" Type="@ButtonType.Primary" OnClick="_dataSource.RefreshAsync"></Button>
                    </SpaceItem>
                </Space>
            </GridRow>
        </TitleTemplate>
        <ColumnDefinitions>
            <PropertyColumn Title="标志" Ellipsis Sortable Property="c => c.Id"></PropertyColumn>
            <PropertyColumn Title="名称" Sortable Property="c => c.Name"></PropertyColumn>
            <PropertyColumn Title="平台" Property="c => c.Platform"></PropertyColumn>
            <PropertyColumn Title="版本" Sortable="true" Property="c => c.Version"></PropertyColumn>
            <ActionColumn Fixed="right" Width="250" Title="操作">
                <CellRender Context="cellData">
                    <Space>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Copy" OnClick="() => ShowEditForm(context.CopyClone<PackageConfigModel>())"></Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Edit" OnClick="() => ShowEditForm(context.JsonClone<PackageConfigModel>())"></Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Danger Icon="@IconType.Outline.Delete" OnClick="() => DeleteConfig(context)"></Button>
                        </SpaceItem>

                    </Space>
                </CellRender>
            </ActionColumn>
        </ColumnDefinitions>
        <ExpandTemplate>
            <Tabs Animated>
                <TabPane Tab="插件属性" Key="1">
                    <Space Size=@("small")>
                        <SpaceItem>
                            <a target="_blank" href="@("/api/CommonConfig/Package/Download/" + context.Data.Id)">下载插件</a>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Type="@ButtonType.Link" OnClick="() => OpenPackageConfigJsonStringDrawer(context.Data)">查看</Button>
                        </SpaceItem>
                    </Space>

                    @if (true)
                    {
                        var data = new List<StringEntry>([
                            new StringEntry("入口点", context.Data.EntryPoint),
                            new StringEntry("参数", context.Data.Arguments),
                            new StringEntry("哈希", context.Data.Hash),
                            new StringEntry("启动", context.Data.Launch.ToString())
                        ]);
                        <StringEntryTable ItemsSource="@data"
                                          NameTitle="备注"
                                          ValueTitle="值"
                                          IsEditable="false"/>
                    }
                </TabPane>
            </Tabs>
        </ExpandTemplate>
    </Table>


</GridContent>


@code{
    readonly string[] platforms =
    {
        "X64",
        "X86",
        "Unknown"
    };

    string _modalTitle;
    string? pluginString;
    bool _packageConfigDrawerVisible;
    bool _editFormVisible;
    bool _editFormSubmitting;
    bool _editFormConfirmLoading;
    bool _loading;
    string _fileError = string.Empty;
    Form<PackageConfigModel> _editForm;
    PackageConfigModel _editModel = new();
    readonly List<UploadFileItem> _uploadFileItems = new();

    List<string> _entryPoints = new();

    AutoCompleteOption selectItem;
    AutoCompleteOption activeItem;

    void OnSelectionChange(AutoCompleteOption item)
    {
        selectItem = item;
    }


    void OnActiveChange(AutoCompleteOption item)
    {
        activeItem = item;
    }


    RoutedPaginationDataSource<PackageConfigModel, PaginationQueryParameters> _dataSource;

    protected override void OnInitialized()
    {
        _dataSource = new RoutedPaginationDataSource<PackageConfigModel, PaginationQueryParameters>(
            NavigationManager,
            ApiService.QueryPackageConfigurationListAsync,
            StateHasChanged);
        _dataSource.Request();
        base.OnInitialized();
    }

    IBrowserFile _file;

    void ShowEditForm(PackageConfigModel? model = null)
    {
        _editFormVisible = true;
        if (model == null)
        {
            _editModel = new PackageConfigModel
            {
                Id = Guid.NewGuid().ToString()
            };
            _modalTitle = "新建配置";
        }
        else
        {
            _editModel = model;
            _modalTitle = "编辑配置";
        }
    }

    void OpenPackageConfigJsonStringDrawer(PackageConfigModel model)
    {
        pluginString = JsonSerializer.Serialize(model);
        _packageConfigDrawerVisible = true;
    }

    void ClosePackageConfigJsonStringDrawer()
    {
        pluginString = null;
        _packageConfigDrawerVisible = false;
    }


    void HandleEditOk(MouseEventArgs e)
    {
        if (_fileError != null)
        {
            return;
        }

        _editFormSubmitting = true;
        _editForm.Submit();
    }

    void HandleCancel(MouseEventArgs e)
    {
        _editFormVisible = false;
    }

    async Task OnEditFormFinish(EditContext editContext)
    {
        try
        {
            _editFormConfirmLoading = true;
            _loading = true;
            var apiResponse = await ApiService.AddOrUpdateAsync(_editModel, _file.OpenReadStream(1024 * 1024 * 200));
            if (apiResponse.ErrorCode == 0)
            {
                await _dataSource.RefreshAsync();
                _editFormVisible = false;
                _loading = false;
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "上传失败",
                    Description = $"上传失败,错误代码:{apiResponse.ErrorCode},错误消息:{apiResponse.Message}"
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "上传失败",
                Description = ex.ToString()
            });
        }
        finally
        {
            _editFormSubmitting = false;
            _editFormConfirmLoading = false;
        }
    }

    void OnEditFormFinishFailed(EditContext editContext)
    {
        _editFormSubmitting = false;
        _editFormConfirmLoading = false;
    }

    async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        try
        {
            _file = e.File;
            _loading = true;
            _entryPoints = [];
            _editModel.Hash = null;
            var readStream = e.File.OpenReadStream(1024 * 1024 * 200);
            using var memoryStream = new MemoryStream();
            await readStream.CopyToAsync(memoryStream);
            memoryStream.Position = 0;

            if (!ZipArchiveHelper.TryUpdate(memoryStream, out var zipArchive))
            {
                _fileError = "not a zip package";
                return;
            }

            if (!zipArchive.Entries.Any(ZipArchiveHelper.HasPackageKey))
            {
                _fileError = "Invalid package";
                return;
            }

            _entryPoints = zipArchive.Entries.Where(IsEntryPoint).Select(static x => x.FullName).ToList();
            memoryStream.Position = 0;
            var hash = await SHA256.HashDataAsync(memoryStream);
            _editModel.Hash = BitConverter.ToString(hash).Replace("-", "").ToLowerInvariant();
            memoryStream.Position = 0;
            _fileError = null;
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "操作",
                Description = ex.ToString()
            });
        }
        finally
        {
            _loading = false;
        }
    }


    bool IsEntryPoint(ZipArchiveEntry zipArchiveEntry)
    {
        return zipArchiveEntry.Name.EndsWith(".exe", StringComparison.OrdinalIgnoreCase);
    }

    Task<ConfirmResult> ShowConfirmDialogAsync(string title, string content)
    {
        var options = new ConfirmButtonOptions
        {
            Button1Props = new ButtonProps
            {
                ChildContent = "确定",
                Type = ButtonType.Primary
            },
            Button2Props = new ButtonProps
            {
                ChildContent = "取消"
            }
        };
        return _confirmService.Show(
            content,
            title,
            ConfirmButtons.OKCancel,
            ConfirmIcon.Info,
            options);
    }

    async Task DeleteConfig(PackageConfigModel model)
    {
        try
        {
            if (await ShowConfirmDialogAsync("删除确认", "确定要删除吗？") != ConfirmResult.OK)
            {
                return;
            }

            var apiResponse = await ApiService.RemoveAsync(model);
            if (apiResponse.ErrorCode == 0)
            {
                await _dataSource.RefreshAsync();
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "操作",
                    Description = apiResponse.Message
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "加载失败",
                Description = ex.ToString()
            });
        }
    }

    void OnTableChange(QueryModel<PackageConfigModel> query)
    {
        _dataSource.QueryParameters.SortDescriptions.Clear();
        foreach (var sortModel in query.SortModel)
        {
            if (sortModel.Sort == null)
            {
                continue;
            }

            _dataSource.QueryParameters.SortDescriptions.Add(new SortDescription(sortModel.FieldName, sortModel.Sort));
        }

        _dataSource.Request();
    }

    public void Dispose()
    {
        _dataSource.Dispose();
    }

}