@namespace NodeService.WebServer.UI.Pages.CommonConfig.WindowsTaskConfigs
@page "/CommonConfig/WindowsTaskConfigs"
@inject NotificationService _notice
@inject ApiService ApiService
@inject ConfirmService _confirmService
<style type="text/css">
    .xmlViwer { /* for a specific editor instance */
        height: calc(100% - 60px);
        min-height:300px;
        margin-top: 10px;
    }
</style>
<GridContent>
    <Modal Width="800"
           Title="@_modalTitle"
           Visible="@_editFormVisible"
           ConfirmLoading="@_editFormConfirmLoading"
           OnOk="@HandleEditFormOk" 
           OnCancel="@HandleEditFormCancel">
        <Form Model="@_editModel" Size="@AntSizeLDSType.Default"
              LabelColSpan="4" 
              Layout="@FormLayout.Horizontal"
              WrapperColSpan="20"
              OnFinish="OnEditFormFinish"
              OnFinishFailed="OnEditFormFinishFailed"
              @ref="@_editForm">
            <FormItem Label="配置名称">
                <Input @bind-Value="@context.Name"  />
             </FormItem>
            <FormItem Label="上传文件">
                <InputFile id="fileInput" OnChange="@OnInputFileChanged" hidden multiple />
                <Upload Name="files" FileList="_uploadFileItems">
                    <label class="ant-btn" for="fileInput">
                        <Icon Type="upload" />
                        上传文件
                    </label>
                </Upload>
            </FormItem>
             <FormItem Label="Xml文本">
                <StandaloneCodeEditor @ref="@_editor" CssClass="xmlViwer" OnDidInit="InitXmlEditorAsync" ConstructionOptions="EditorConstructionOptions" />
             </FormItem>
        </Form>
    </Modal>

    <Space Style="margin-bottom:16px">
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="()=>ShowEditForm()">新建配置</Button>
        </SpaceItem>
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="QueryConfigurationListAsync">刷新</Button>
        </SpaceItem>

    </Space>
<Table @ref="@_table" Size="TableSize.Small" 
           Loading="_loading"
           EnableVirtualization="true"
           TItem="WindowsTaskConfigModel"
           Resizable
           OnChange="OnTableChange"
           DataSource="@_dataSource.Items" 
           PageIndex="_dataSource.PageIndex"
           PageSize="_dataSource.PageSize"
           OnPageIndexChange="@_dataSource.OnPageSizeChanged"
           OnPageSizeChange="@_dataSource.OnPageSizeChanged">
        <TitleTemplate>
            <GridRow Style="margin-bottom:16px">
                <GridCol Span="6">
                    <Title Level="3">Windows计划任务配置</Title>
                </GridCol>
                <GridCol Span="6" Offset="18">
                    <Search Placeholder="搜索" @bind-Value="@_searchText" OnSearch="()=>_table?.ReloadData()" />
                </GridCol>
            </GridRow>
        </TitleTemplate>
    <ColumnDefinitions>
    <PropertyColumn Title="标志" Ellipsis Sortable Property="c=>c.Id"></PropertyColumn>
    <PropertyColumn Title="名称" Sortable Property="c=>c.Name"></PropertyColumn>
    <PropertyColumn Title="配置文本" Sortable="true" Ellipsis Property="c=>c.Value.XmlText"></PropertyColumn>
                <ActionColumn Fixed="right" Width="250" Title="操作">
                    <CellRender Context="cellData">
                        <Space>
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Copy" OnClick="()=>ShowEditForm(context.CopyClone<WindowsTaskConfigModel>())"></Button>
                            </SpaceItem>
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Edit" OnClick="()=>ShowEditForm(context)"></Button>
                            </SpaceItem>
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Danger Icon="@IconType.Outline.Delete" OnClick="()=>DeleteConfig(context)"></Button>
                         </SpaceItem>
                         @if (cellData.RowData.Expanded)
                        {
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.FullscreenExit" OnClick="()=>cellData.RowData.Expanded=false"></Button>
                            </SpaceItem>
                        }
                        else
                        {
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Fullscreen" OnClick="()=>cellData.RowData.Expanded=true"></Button>
                            </SpaceItem>
                        }

                    </Space>
                </CellRender>
            </ActionColumn>
    </ColumnDefinitions>
    <ExpandTemplate>
         <Tabs Animated>
                <TabPane Tab="Xml文本" Key="1">
                    <Text Disabled>@context.Data.Value.XmlText</Text>

                </TabPane>
            </Tabs>
    </ExpandTemplate>
</Table>
</GridContent>

@code {
    StandaloneCodeEditor _editor;
    ITable _table;
    string _searchText;
    string _modalTitle;
    bool _editFormVisible = false;
    bool _editFormSubmitting = false;
    bool _editFormConfirmLoading = false;
    Form<WindowsTaskConfigModel> _editForm;
    WindowsTaskConfigModel _editModel = new WindowsTaskConfigModel();
    List<UploadFileItem> _uploadFileItems = new List<UploadFileItem>();

    private bool _loading;
    private PaginationDataSource<WindowsTaskConfigModel> _dataSource;

    protected override void OnInitialized()
    {
        _dataSource = new PaginationDataSource<WindowsTaskConfigModel>(ApiService);
        _dataSource.Filter = FilterModel;
        base.OnInitialized();
    }

    private async Task InitXmlEditorAsync()
    {
        if (this._editModel != null)
        {
            await this._editor.SetValue(this._editModel.Value.XmlText ?? string.Empty);
        }
    }

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        try
        {
            using var streamReader = new StreamReader(e.File.OpenReadStream(), leaveOpen: false);
            this._editModel.Value.XmlText = await streamReader.ReadToEndAsync();
            await this._editor.SetValue(this._editModel.Value.XmlText ?? string.Empty);
        }
        catch (Exception ex)
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Message = "操作",
                    Description = ex.ToString(),
                });
        }
        finally
        {
            this._loading = false;
        }

    }

    private async Task ShowEditForm(WindowsTaskConfigModel? model = null)
    {
        this._editFormVisible = true;
        if (model == null)
        {
            this._editModel = new WindowsTaskConfigModel()
                {
                    Id = Guid.NewGuid().ToString()
                };
            this._modalTitle = "编辑配置";
        }
        else
        {
            this._editModel = model.ReferenceClone<WindowsTaskConfigModel>();
            this._modalTitle = "新建配置";
        }
    }

    private async Task OnEditFormFinish(EditContext editContext)
    {
        try
        {
            this._editModel.Value.XmlText = await this._editor.GetValue(preserveBOM: false, lineEnding: string.Empty);
            await this._editor.SetValue(string.Empty);
            var apiResponse = await this.ApiService.AddOrUpdateAsync(this._editModel);
            if (apiResponse.ErrorCode == 0)
            {
                await this._dataSource.UpdateSourceAsync();
                this._editFormVisible = false;
            }
            else
            {
                await this._notice.Open(new NotificationConfig()
                    {
                        Message = "错误提示",
                        Description = apiResponse.Message,
                    });
            }
        }
        catch (Exception ex)
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Message = "错误提示",
                    Description = ex.Message,
                });
        }
        finally
        {
            this._editFormSubmitting = false;
            this._editFormConfirmLoading = false;
        }
    }

    private void OnEditFormFinishFailed(EditContext editContext)
    {
        this._editFormSubmitting = false;
        this._editFormConfirmLoading = false;
    }


    private Task<ConfirmResult> ShowConfirmDialogAsync(string title, string content)
    {
        var options = new ConfirmButtonOptions()
            {
                Button1Props = new AntDesign.ButtonProps()
                {
                    ChildContent = "确定",
                    Type = ButtonType.Primary,
                },
                Button2Props = new AntDesign.ButtonProps()
                {
                    ChildContent = "取消"
                }
            };
        return _confirmService.Show(
                content,
                title,
                ConfirmButtons.OKCancel,
                ConfirmIcon.Info,
                options);
    }

    private async Task DeleteConfig(WindowsTaskConfigModel model)
    {
        try
        {
            if (await ShowConfirmDialogAsync("删除确认", "确定要删除吗？") != ConfirmResult.OK)
            {
                return;
            }
            var apiResponse = await this.ApiService.RemoveAsync(model);
            if (apiResponse.ErrorCode == 0)
            {
                await this._dataSource.UpdateSourceAsync();
            }
            else
            {
                await this._notice.Open(new NotificationConfig()
                    {
                        Message = "错误提示",
                        Description = apiResponse.Message,
                    });
            }
        }
        catch (Exception ex)
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Message = "错误提示",
                    Description = "加载配置失败",
                });
        }
    }


    private void HandleEditFormCancel(MouseEventArgs e)
    {
        this._editFormSubmitting = false;
        this._editFormVisible = false;
    }


    private void HandleEditFormOk(MouseEventArgs e)
    {
        this._editFormSubmitting = true;
        this._editForm.Submit();


    }

    protected override async Task OnInitializedAsync()
    {
        this._loading = true;
        await this.QueryConfigurationListAsync().ConfigureAwait(false);
        this._loading = false;
    }

    private async Task QueryConfigurationListAsync()
    {
        try
        {
            await this._dataSource.UpdateSourceAsync();
        }
        catch (Exception ex)
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Message = "错误提示",
                    Description = ex.ToString(),
                });
        }

    }

    private bool FilterModel(WindowsTaskConfigModel model)
    {
        if (string.IsNullOrEmpty(model.Name) || string.IsNullOrEmpty(_searchText))
        {
            return true;
        }
        return model.Name.Contains(this._searchText, StringComparison.OrdinalIgnoreCase);
    }

    void OnTableChange(QueryModel<WindowsTaskConfigModel> query)
    {
        this._dataSource.SetItemsSource(query.ExecuteQuery(this._dataSource.ItemsSource.AsQueryable()));
        this._dataSource.Refresh();
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Language = "xml",
                Value = string.Empty
            };
    }

}
