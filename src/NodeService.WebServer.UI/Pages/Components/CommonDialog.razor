<ErrorBoundary>
    <ErrorContent>
        <Text>@context</Text>
    </ErrorContent>
    <ChildContent>
        <Modal Width="800"
               Maximizable="@Maximizable"
               Style="top:0"
               Visible="@Visible"
               Title="@Title"
               Closable="true"
               DefaultMaximized="@DefaultMaximized"
               VisibleChanged="OnVisibleChanged"
               AfterClose="Closed.InvokeAsync"
               OnOk="OnOk"
               OnCancel="OnCancel"
               DestroyOnClose>
            @ChildContent
        </Modal>
    </ChildContent>
</ErrorBoundary>


@code {
    [Parameter] public string Title { get; set; } = "对话框";

    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter] public EventCallback Closed { get; set; }

    [Parameter] public EventCallback Opened { get; set; }

    [Parameter] public EventCallback OnOk { get; set; }

    [Parameter] public EventCallback OnCancel { get; set; }

    [Parameter] public bool Visible { get; set; }

    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }

    [Parameter] public bool Maximizable { get; set; } = true;

    [Parameter] public bool DefaultMaximized { get; set; } = true;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    public virtual Task ShowAsync()
    {
        Visible = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task OnVisibleChanged(bool visible)
    {
        if (VisibleChanged.HasDelegate)
        {
            await VisibleChanged.InvokeAsync(visible);
        }
        else
        {
            Visible = visible;
        }

        if (visible)
        {
            await Opened.InvokeAsync();
        }
    }

    async Task HandleFormOk(MouseEventArgs e)
    {
        await OnOk.InvokeAsync();
    }

    async Task HandleFormCancel(MouseEventArgs e)
    {
        await OnCancel.InvokeAsync();
    }

}