@using AntDesign.Select
@inject ApiService ApiService
@inject NotificationService _notice
@inherits Selector<NodeInfoModel>
<GridRow>
    <Select DataSource="@_nodeSettings.IpAddressMappings"
            Value="@_dataSource.QueryParameters.AreaTag"
            OnSelectedItemChanged="OnSelectedAreaTagChanged"
            TItem="StringEntry"
            Style="width:200px"

            TItemValue="string"
            Size="middle"
            DefaultActiveFirstOption
            LabelName="@nameof(StringEntry.Name)"
            ValueName="@nameof(StringEntry.Tag)"/>
    <RadioGroup Style="margin-left:20px"
                ValueChanged="(NodeStatus status) => OnSelectedStatusChanged(status)"
                Value="@_dataSource.QueryParameters.Status"
                Size="middle">
        <Radio RadioButton Value="@(NodeStatus.All)">全部</Radio>
        <Radio RadioButton Value="@(NodeStatus.Online)">
            <Badge Status="@(NodeStatus.Online.GetBadgeStatus())" Text="在线"/>
        </Radio>
        <Radio RadioButton Value="@(NodeStatus.Offline)">
            <Badge Status="@(NodeStatus.Offline.GetBadgeStatus())" Text="离线"/>
        </Radio>
    </RadioGroup>

</GridRow>

<GridRow>

    <Select ItemValue="c=>c"
            ItemLabel="c=>c.Name"
            TItem="NodeInfoModel"
            TItemValue="NodeInfoModel"
            @bind-Values="@SelectedItems"
            DataSource="@SelectedItems"
            Mode="multiple"
            AllowClear
            AutoFocus
            Disabled="@LoadingSelectedItems"
            TokenSeparators="new char[]{','}"
            Loading="@LoadingSelectedItems"
            Placeholder="选择节点"
            Style="margin-bottom:4px;margin-top:4px"
            MaxTagCount="50"
            BoundaryAdjustMode="TriggerBoundaryAdjustMode.InView"
            EnableSearch
            DropdownMatchSelectWidth="false"
>
    <LabelTemplate>
        <LabelTemplateItem Context="item"
                           TItem="NodeInfoModel"
                               TItemValue="NodeInfoModel"
                            
                           Style="margin-right: 4px;"
                           Class="ant-tag"
                           RemoveIconStyle="margin-top: 1px; display: inline-block;">
            <LabelTemplateItemContent>
                    <Badge Status="@(item.Status.GetBadgeStatus())" Text="@item.Name"></Badge>
            </LabelTemplateItemContent>
        </LabelTemplateItem>
    </LabelTemplate>
    </Select>

    <GridCol Span="24" >
        <GridCol Flex=@("auto")>
            <Table Size="TableSize.Small"
                   OnChange="(QueryModel<NodeInfoModel> query) => OnTableChanged(query)"
                   OnPageIndexChange="@_dataSource.OnPaginationEvent"
                   OnPageSizeChange="@_dataSource.OnPaginationEvent"
                   PageSize="@_dataSource.PageSize"
                   PageIndex="@_dataSource.PageIndex"
                   Total="@_dataSource.TotalCount"
                   DataSource="@_dataSource.ItemsSource"
                   Loading="@_dataSource.IsLoading"
                   SelectedRows="@SelectedItems"
                   Resizable
                   SelectedRowsChanged="(IEnumerable<NodeInfoModel> items) => OnSelectedItemsChanged(items)"
                   RowKey="x => x.Id">
                <TitleTemplate>
                    <GridRow Style="margin-bottom:4px">
                        <GridCol Span="12">
                            <Text>全部节点</Text>
                        </GridCol>
                        <GridCol Span="12" >
                            <Search Placeholder="搜索全部节点" @bind-Value="@_dataSource.QueryParameters.Keywords" OnSearch="QueryAsync" />
                        </GridCol>
                    </GridRow>
                </TitleTemplate>
                <ColumnDefinitions Context="ctx">
                    <Selection Key="@ctx.Id" Type="@GetSelectionMode()" />
                    <PropertyColumn Property="c => c.Id" Ellipsis Sortable Title="标志"></PropertyColumn>
                    <PropertyColumn Property="c => c.Name" Ellipsis Sortable Title="节点名称">
                        <Badge Status="@(ctx.Status.GetBadgeStatus())" Text="@ctx.Name"></Badge>
                    </PropertyColumn>
                    <PropertyColumn Property="c => c.Profile.Usages" Ellipsis Sortable Title="用途"></PropertyColumn>
                    <PropertyColumn Property="c => c.Profile.IpAddress" Ellipsis Sortable Title="Ip地址"></PropertyColumn>
                    <PropertyColumn Property="c => c.Profile.ClientVersion" Ellipsis Sortable Title="客户端版本"></PropertyColumn>
                </ColumnDefinitions>
            </Table>
        </GridCol>
    </GridCol>

</GridRow>

@code {
    NodeSettings _nodeSettings = new();
    PaginationDataSource<NodeInfoModel, QueryNodeListParameters> _dataSource;

    [Parameter] public bool LoadingSelectedItems { get; set; }

    protected override IEnumerable<NodeInfoModel> ItemsSource => _dataSource.ItemsSource;

    protected override void OnInitialized()
    {
        _dataSource = new PaginationDataSource<NodeInfoModel, QueryNodeListParameters>(ApiService.QueryNodeListAsync, StateHasChanged);
        _dataSource.QueryParameters.AreaTag = "*";
        _dataSource.QueryParameters.Status = NodeStatus.All;
        _dataSource.QueryParameters.PageIndex = 1;
        _dataSource.QueryParameters.PageSize = 10;
        _dataSource.ExceptionHandler = OnExepction;
        base.OnInitialized();
    }

    async Task OnExepction(Exception ex)
    {
        await _notice.Open(new NotificationConfig
        {
            Message = "加载失败",
            Description = ex.ToString()
        });
    }

    private void UnSelectAll()
    {
        SelectedItems = [];
    }

    protected override async Task OnInitializedAsync()
    {
        await QueryNodeSettingsAsync();
        _dataSource.QueryParameters.AreaTag = "*";
        _dataSource.QueryParameters.Status = NodeStatus.All;
        _dataSource.QueryParameters.Keywords = null;
        _dataSource.QueryParameters.PageIndex = 1;
        await QueryAsync();
        await base.OnInitializedAsync();
    }

    async Task OnSearch(string keywords)
    {
        _dataSource.QueryParameters.Keywords = keywords;
        await QueryAsync();
    }

    async Task QueryAsync()
    {
        await _dataSource.QueryAsync();
    }

    async Task QueryNodeSettingsAsync()
    {
        try
        {
            var apiResponse = await ApiService.QueryNodeSettingsAsync();
            if (apiResponse.ErrorCode == 0)
            {
                _nodeSettings = apiResponse.Result ?? new NodeSettings();
                _dataSource.QueryParameters.AreaTag = _nodeSettings.IpAddressMappings.FirstOrDefault()?.Tag;
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = apiResponse.Message
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = ex.ToString()
            });
        }
    }

    async Task OnSelectedAreaTagChanged(StringEntry value)
    {
        _dataSource.QueryParameters.AreaTag = value?.Tag;
        await _dataSource.QueryAsync();
    }

    async Task OnSelectedStatusChanged(NodeStatus status)
    {
        _dataSource.QueryParameters.Status = status;
        await _dataSource.QueryAsync();
    }


    async Task OnTableChanged(QueryModel<NodeInfoModel> query)
    {
        _dataSource.QueryParameters.SortDescriptions.Clear();
        foreach (var sortModel in query.SortModel)
        {
            if (sortModel.Sort == null)
            {
                continue;
            }

            _dataSource.QueryParameters.SortDescriptions.Add(new SortDescription(sortModel.FieldName, sortModel.Sort));
        }

        await QueryAsync();
    }

}