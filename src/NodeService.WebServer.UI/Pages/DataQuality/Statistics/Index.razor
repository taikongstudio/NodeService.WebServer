@namespace NodeService.WebServer.UI.Pages.DataQuality.Statistics
@page "/DataQuality/Statistics"
@using NodeService.WebServer.Models
@using NodeService.WebServer.UI.Pages.DataQuality.Components

@inject ApiService ApiService
@inject NotificationService _notice
@inject NavigationManager NavigationManager
@inject ClipboardService ClipboardService
@implements IDisposable
<GridContent>
  
    <CommonDialog Closed="OnDialogClosed" @ref="_nodeSelectorDialog">
        <NodeSelector @ref="_nodeSelector" @bind-SelectedItems="_selectedNodeList" Mode="SelectionMode.Multiple" />
    </CommonDialog>



    <Table Size="TableSize.Small"
           Loading="@_dataSource.IsLoading"
           Resizable
           Total="@_dataSource.TotalCount"
           EnableVirtualization="false"
           PageSize="@_dataSource.PageSize"
           PageIndex="@_dataSource.PageIndex"
           OnChange="OnTableChange"
           OnPageSizeChange="@_dataSource.OnPaginationEvent"
           OnPageIndexChange="@_dataSource.OnPaginationEvent"
           TItem="DataQualityNodeStatisticsRecordModel"
           DataSource="@_dataSource.ItemsSource">
        <TitleTemplate>
            <GridRow Style="margin-bottom:16px">
                <GridCol Span="6">
                    <Title Level="3">数据质量分析</Title>
                </GridCol>
                <GridCol Span="6" Offset="12">
                    <Search Placeholder="搜索" @bind-Value="@_dataSource.QueryParameters.Keywords" OnSearch="@_dataSource.QueryAsync" />
                </GridCol>
            </GridRow>
            <GridRow Wrap Style="min-height:30px">
                <Text>节点：</Text>
                <Button Shape="@ButtonShape.Circle" Icon="@IconType.Outline.Edit" Type="@ButtonType.Primary" OnClick="ShowNodeSelectorDialogAsync"></Button>

                @if (_selectedNodeList != null)
                {
                    foreach (var item in _selectedNodeList)
                    {
                        <Tag @key="item.Id" Style="height:20px">@item.Name</Tag>
                    }
                }
                else
                {
                    <Text>全部</Text>
                }

            </GridRow>

            <GridRow>
                <Space Wrap Style="margin-bottom:16px">
                    <SpaceItem>
                        <RangePicker ValueExpression="() => DateTimes" Size="middle" TValue="DateTime?[]" ShowTime="false" OnChange="OnDatePickerChanged" />
                    </SpaceItem>
@*                     <SpaceItem>
                        <Select TItem="CategoryModel"
                                TItemValue="string"
                                DataSource="@_categories"
                                @bind-Value="@_selectedCategory"
                                LabelName="@nameof(CategoryModel.Name)"
                                ValueName="@nameof(CategoryModel.Value)"
                                Placeholder="选择分类"
                                DefaultActiveFirstOption="true"
                                Style="width:200px">
                        </Select>
                        <Button Type="@ButtonType.Primary" Icon="@IconType.Outline.Reload" OnClick="QueryCategoriesAsync"></Button>
                    </SpaceItem> *@
                    <SpaceItem>
                        <Button Type="@ButtonType.Primary" OnClick="QueryNodeStatisticsRecordListAsync">查询</Button>
                    </SpaceItem>

                </Space>
            </GridRow>
        </TitleTemplate>
        <ColumnDefinitions>
            <Selection Key="@context.Id" Width="40" Fixed="left" Type="checkbox" />
            <PropertyColumn Title="标志" Width="150px" Ellipsis Sortable Property="c => c.Id"></PropertyColumn>
            <PropertyColumn Title="名称" Width="150px" Ellipsis Sortable Property="c => c.Name"></PropertyColumn>
            <PropertyColumn Title="创建时间" Width="100px" Sortable="true" Format="@NodePropertyModel.DateTimeFormatString" Property="c => c.CreationDateTime"></PropertyColumn>
            <PropertyColumn Title="修改时间" Width="100px" Sortable="true" Format="@NodePropertyModel.DateTimeFormatString" Property="c => c.ModifiedDateTime"></PropertyColumn>
            <PropertyColumn Title="进度"  Property="c => c.Value.Entries">
                @if (context.Value.Entries != null)
                {
                    <Descriptions Bordered Size="small" Column="1">
                        @foreach (var item in context.Value.Entries)
                        {
                            <DescriptionsItem LabelStyle="width:100px" Title="@item.Name">

                                @if (item.Value == null)
                                {
                                    <AntDesign.Progress Style="z-index:0;display:block" Percent=0 ShowInfo="true" Status="ProgressStatus.Exception" />
                                }
                                else if (item.Value.Value < 1)
                                {
                                    <AntDesign.Progress Style="z-index:0;display:block" Percent=@((double)item.Value.Value*100) Status="ProgressStatus.Normal" ShowInfo="true" />
                                }
                                else if (item.Value.Value == 1)
                                {
                                    <AntDesign.Progress Style="z-index:0;display:block" Percent=@((double)item.Value.Value*100) Status="ProgressStatus.Success" ShowInfo="true" />
                                }
                            </DescriptionsItem>
                        }

                    </Descriptions>
                }
            </PropertyColumn>

        </ColumnDefinitions>
    </Table>
</GridContent>

@code {



    CommonDialog _nodeSelectorDialog;
    NodeSelector _nodeSelector;

    DateTime BeginDateTime;
    DateTime EndDateTime;

    readonly DateTime?[] DateTimes = [DateTime.UtcNow.Date, DateTime.UtcNow.Date];

    string? _selectedCategory;

    RoutedPaginationDataSource<DataQualityNodeStatisticsRecordModel, QueryDataQualityNodeStatisticsReportParameters> _dataSource;


    readonly List<FileRecordStateModel> _stateList = [];

    IEnumerable<NodeInfoModel> _selectedNodeList = [];

    List<CategoryModel> _categories = [];


    FileRecordState _selectedState;

    FileRecordModel? _editingFileRecord;

    bool _isFileRecordPropertyWindowVisible;


    protected override void OnInitialized()
    {
        _dataSource = new RoutedPaginationDataSource<DataQualityNodeStatisticsRecordModel, QueryDataQualityNodeStatisticsReportParameters>(
            NavigationManager.BaseUri,
            ApiService.QueryDataQualityStatisticsNodeReportListAsync,
            StateHasChanged);
        _categories.Add(new CategoryModel() { Name = "全部分类" });
        _stateList.Add(new FileRecordStateModel { Value = FileRecordState.None, Name = "全部" });
        _stateList.Add(new FileRecordStateModel { Value = FileRecordState.Stat, Name = "统计" });
        _stateList.Add(new FileRecordStateModel { Value = FileRecordState.Uploaded, Name = "已上传" });
        _stateList.Add(new FileRecordStateModel { Value = FileRecordState.Processed, Name = "已处理" });
        BeginDateTime = DateTime.Today.Date.AddDays(-1);
        EndDateTime = DateTime.Today.Date.AddSeconds(-1);
        DateTimes[0] = BeginDateTime;
        DateTimes[1] = EndDateTime;
        _dataSource.ExceptionHandler = OnExepction;
        base.OnInitialized();
    }

    async Task OnExepction(Exception ex)
    {
        await _notice.Open(new NotificationConfig
            {
                Message = "加载失败",
                Description = ex.ToString()
            });
    }

    protected override async Task OnInitializedAsync()
    {
        await _dataSource.RequestAsync();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await QueryNodeStatisticsRecordListAsync();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    void OnDatePickerChanged(DateRangeChangedEventArgs<DateTime?[]> e)
    {
        BeginDateTime = e.Dates[0] ?? DateTime.Today.Date;
        EndDateTime = e.Dates[1] ?? DateTime.Today.AddDays(1).Date.AddSeconds(-1);
    }



    async Task QueryNodeStatisticsRecordListAsync()
    {
        try
        {
            _dataSource.QueryParameters.BeginDateTime = BeginDateTime;
            _dataSource.QueryParameters.EndDateTime = EndDateTime;
            _dataSource.QueryParameters.NodeIdList.Clear();
            _dataSource.QueryParameters.PageIndex = 1;
            _dataSource.QueryParameters.PageSize = 10;
            if (_selectedNodeList != null)
            {
                _dataSource.QueryParameters.NodeIdList.AddRange(_selectedNodeList.Select(x => x.Id));
            }

            await _dataSource.ForceRequestAsync();
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = ex.ToString()
                });
        }
    }

    void OnSelectedStateChanged(FileRecordStateModel? status)
    {
    }

    void OnSelectedCategoryChanged(CategoryModel? category)
    {
    }

    void OnTableChange(QueryModel<DataQualityNodeStatisticsRecordModel> query)
    {
        _dataSource.QueryParameters.SortDescriptions.Clear();
        foreach (var sortModel in query.SortModel)
        {
            if (sortModel.Sort == null)
            {
                continue;
            }

            _dataSource.QueryParameters.SortDescriptions.Add(new SortDescription(sortModel.FieldName, sortModel.Sort));
        }

        _dataSource.RequestAsync();
    }

    async Task ShowNodeSelectorDialogAsync()
    {
        await _nodeSelectorDialog.ShowAsync();
    }


    Task OnDialogClosed()
    {
        StateHasChanged();
        return Task.CompletedTask;
    }

    void OnFileRecordPropertyWindowClosed()
    {
        _isFileRecordPropertyWindowVisible = false;
        _editingFileRecord = null;
    }

    public void Dispose()
    {
        _dataSource.Dispose();
    }
}