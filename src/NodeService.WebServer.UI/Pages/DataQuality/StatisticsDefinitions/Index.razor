@namespace NodeService.WebServer.UI.Pages.CommonConfig.DataQualityStatisticsDefinitions
@page "/DataQuality/StatisticsDefinitions"
@using NodeService.WebServer.UI.Extensions
@inject NotificationService _notice
@inject ApiService ApiService
@inject ConfirmService _confirmService
@inject NavigationManager NavigationManager
@implements IDisposable

<style type="text/css">
    .ScriptsEditor {
        height: 300px;
    }
</style>

<GridContent>
    <ConfigurationVersionSelectorDialog Closed="()=>_dataSource.QueryAsync()"
                                        Title="版本列表"
                                        ConfigurationId="@_configurationId"
                                        @bind-Visible="@_versionSelectorDialogVisible"
                                        TItem="DataQualityStatisticsDefinitionModel">
    </ConfigurationVersionSelectorDialog>
    <Modal Width="800"
           Title="@_modalTitle"
           Style="top:0"
           @bind-Visible="@_editFormVisible"
           ConfirmLoading="@_editFormConfirmLoading"
           OnOk="@HandleEditFormOk"
           OnCancel="@HandleEditFormCancel">
        <Form Model="@_editModel" Size="@AntSizeLDSType.Default"
              LabelColSpan="4"
              Layout="@FormLayout.Horizontal"
              WrapperColSpan="20"
              OnFinish="OnEditFormFinish"
              OnFinishFailed="OnEditFormFinishFailed"
              @ref="@_editForm">
            <FormItem Label="名称">
                <Input @bind-Value="@context.Name"/>
            </FormItem>
            <FormItem Label="启用">
                <Switch @bind-Checked="@context.IsEnabled"/>
            </FormItem>
            <FormItem Label="节点">
                <NodeSelector @bind-SelectedItems="_selectedNodes" Mode="SelectionMode.Multiple"/>
            </FormItem>
            <FormItem Required Label="数据库配置">
                @if (_selectedDatabaseConfigs != null)
                {
                    foreach (var item in _selectedDatabaseConfigs)
                    {
                        <Tag @key="item.Id" Style="height:20px">@item.Name</Tag>
                        break;
                    }
                }
                <Tag Class="site-tag-plus" OnClick="ShowDatabaseConfigSelectorDialogAsync">
                    <Icon Type="@IconType.Outline.Search"/>
                </Tag>
                <CommonDialog @ref="_mySqlConfigDialog" Closed="OnSelectDatabaseConfigDialogClosed">
                    <MysqlConfigSelector @ref="_mySqlConfigSelector" @bind-SelectedItems="_selectedDatabaseConfigs" Mode="SelectionMode.Single"/>
                </CommonDialog>
            </FormItem>
            <FormItem Required Label="脚本">
                <StandaloneCodeEditor @ref="@_scriptsEditor"
                                      CssClass="ScriptsEditor"
                                      OnDidInit="ScriptEditorInitAsync"
                                      ConstructionOptions="BuildScriptsEditorConstructionOptions"/>
            </FormItem>
        </Form>
    </Modal>

    <Table @ref="_table"
           ScrollX="1000px"
           Size="TableSize.Small"
           Loading="@_dataSource.IsLoading"
           EnableVirtualization="false"
           TItem="DataQualityStatisticsDefinitionModel"
           Resizable
           OnChange="OnTableChange"
           DataSource="@_dataSource.ItemsSource"
           PageIndex="@_dataSource.PageIndex"
           PageSize="@_dataSource.PageSize"
           Total="@_dataSource.TotalCount"
           OnPageIndexChange="@_dataSource.OnPaginationEvent"
           OnPageSizeChange="@_dataSource.OnPaginationEvent">
        <TitleTemplate>
            <GridRow Style="margin-bottom:16px">
                <GridCol Span="6">
                    <Title Level="3">统计定义</Title>
                </GridCol>
                <GridCol Span="6" Offset="12">
                    <Search Placeholder="搜索" @bind-Value="@_dataSource.QueryParameters.Keywords" OnSearch="@_dataSource.QueryAsync"/>
                </GridCol>
            </GridRow>
            <GridRow>
                <Space>
                    <SpaceItem>
                        <Button Shape="@ButtonShape.Circle" Icon="@IconType.Outline.Plus" Type="@ButtonType.Primary" OnClick="() => ShowEditForm()"></Button>
                    </SpaceItem>
                    <SpaceItem>
                        <Button Shape="@ButtonShape.Circle" Icon="@IconType.Outline.Reload" Type="@ButtonType.Primary" OnClick="_dataSource.QueryAsync"></Button>
                    </SpaceItem>
                </Space>
            </GridRow>
        </TitleTemplate>
        <ColumnDefinitions>
            <PropertyColumn Title="标志" Ellipsis Sortable Property="c => c.Id"></PropertyColumn>
            <PropertyColumn Title="名称" Sortable Property="c => c.Name"></PropertyColumn>
            <PropertyColumn Title="创建时间" Ellipsis Sortable="true" Property="c => c.CreationDateTime"></PropertyColumn>
            <PropertyColumn Title="修改时间" Ellipsis Sortable="true" Property="c => c.ModifiedDateTime"></PropertyColumn>
            <PropertyColumn Title="统计脚本" Ellipsis Sortable="true" Property="c => c.Value.Scripts"></PropertyColumn>
            <ActionColumn Fixed="right" Width="250" Title="操作">
                <CellRender Context="cellData">
                    <Space>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Copy" OnClick="() => ShowEditForm(context.CopyClone<DataQualityStatisticsDefinitionModel>())"></Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Edit" OnClick="() => ShowEditForm(context.JsonClone<DataQualityStatisticsDefinitionModel>())"></Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.UnorderedList" OnClick="() => ShowVersionSelectorDialog(context.Id)"></Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Danger Icon="@IconType.Outline.Delete" OnClick="() => DeleteConfig(context)"></Button>
                        </SpaceItem>

                    </Space>
                </CellRender>
            </ActionColumn>
        </ColumnDefinitions>
    </Table>
</GridContent>

@code {
    ITable _table;
    string _modalTitle;
    bool _editFormVisible;
    bool _editFormSubmitting;
    bool _editFormConfirmLoading;
    Form<DataQualityStatisticsDefinitionModel> _editForm;
    DataQualityStatisticsDefinitionModel _editModel = new();
    StandaloneCodeEditor _scriptsEditor;

    CommonDialog _mySqlConfigDialog;
    MysqlConfigSelector _mySqlConfigSelector;
    IEnumerable<DatabaseConfigModel> _selectedDatabaseConfigs;

    CommonDialog _nodeSelectorDialog;
    NodeSelector _nodeSelector;

    IEnumerable<NodeInfoModel> _selectedNodes = [];


    bool _loading;

    RoutedPaginationDataSource<DataQualityStatisticsDefinitionModel, PaginationQueryParameters> _dataSource;

    string _configurationId;
    bool _versionSelectorDialogVisible;

    async Task ShowVersionSelectorDialog(string id)
    {
        _configurationId = id;
        _versionSelectorDialogVisible = true;
        await Task.CompletedTask;
    }

    protected override void OnInitialized()
    {
        _dataSource = new RoutedPaginationDataSource<DataQualityStatisticsDefinitionModel, PaginationQueryParameters>(
            NavigationManager.BaseUri,
            ApiService.QueryDataQualityStatisticsDefinitionListAsync,
            StateHasChanged);
        _dataSource.ItemInitializer = InitAsync;
        _dataSource.ExceptionHandler = OnExepction;
        base.OnInitialized();
    }

    async Task OnExepction(Exception ex)
    {
        await _notice.Open(new NotificationConfig
        {
            Message = "加载失败",
            Description = ex.ToString()
        });
    }

    protected override async Task OnInitializedAsync()
    {
        await _dataSource.RequestAsync();
        await base.OnInitializedAsync();
    }

    async Task ShowEditForm(DataQualityStatisticsDefinitionModel? model = null)
    {
        _editFormVisible = true;
        if (model == null)
        {
            _editModel = new DataQualityStatisticsDefinitionModel
            {
                Id = Guid.NewGuid().ToString()
            };
            _modalTitle = "新建配置";
        }
        else
        {
            _editModel = model;
            _modalTitle = "编辑配置";
            _selectedNodes = await _editModel.Value.NodeList.Select(x => x.Value).QueryNodeListAsync(ApiService);
            var databaseConfig = await ApiService.GetDatabaseConfigAsync(_editModel.Value.DatabaseConfigId);
            if (databaseConfig == null)
            {
                _selectedDatabaseConfigs = [];
            }
            else
            {
                _selectedDatabaseConfigs = [databaseConfig];
            }
        }
    }


    async Task OnEditFormFinish(EditContext editContext)
    {
        try
        {
            _editModel.Scripts = await _scriptsEditor.GetValue();
            if (_editModel.NodeList == null)
            {
                _editModel.NodeList = new List<StringEntry>();
            }

            _editModel.NodeList.Clear();
            _editModel.NodeList.AddRange(_selectedNodes.Select(x => new StringEntry(x.Name, x.Id)));
            var apiResponse = await ApiService.AddOrUpdateAsync(_editModel);
            if (apiResponse.ErrorCode == 0)
            {
                await _dataSource.QueryAsync();
                _editFormVisible = false;
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = apiResponse.Message
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = ex.ToString()
            });
        }
        finally
        {
            _editFormSubmitting = false;
            _editFormConfirmLoading = false;
        }
    }

    void OnEditFormFinishFailed(EditContext editContext)
    {
        _editFormSubmitting = false;
        _editFormConfirmLoading = false;
    }


    Task<ConfirmResult> ShowConfirmDialogAsync(string title, string content)
    {
        var options = new ConfirmButtonOptions
        {
            Button1Props = new ButtonProps
            {
                ChildContent = "确定",
                Type = ButtonType.Primary
            },
            Button2Props = new ButtonProps
            {
                ChildContent = "取消"
            }
        };
        return _confirmService.Show(
            content,
            title,
            ConfirmButtons.OKCancel,
            ConfirmIcon.Info,
            options);
    }

    async Task DeleteConfig(DataQualityStatisticsDefinitionModel model)
    {
        try
        {
            if (await ShowConfirmDialogAsync("删除确认", "确定要删除吗？") != ConfirmResult.OK)
            {
                return;
            }

            var apiResponse = await ApiService.RemoveAsync(model);
            if (apiResponse.ErrorCode == 0)
            {
                await _dataSource.QueryAsync();
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = apiResponse.Message
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = "加载配置失败"
            });
        }
    }


    void HandleEditFormCancel(MouseEventArgs e)
    {
        _editFormVisible = false;
    }


    void HandleEditFormOk(MouseEventArgs e)
    {
        _editFormSubmitting = true;
        _editForm.Submit();
    }

    async Task OnTableChange(QueryModel<DataQualityStatisticsDefinitionModel> query)
    {
        _dataSource.QueryParameters.SortDescriptions.Clear();
        foreach (var sortModel in query.SortModel)
        {
            if (sortModel.Sort == null)
            {
                continue;
            }

            _dataSource.QueryParameters.SortDescriptions.Add(new SortDescription(sortModel.FieldName, sortModel.Sort));
        }

        await _dataSource.RequestAsync();
    }

    public void Dispose()
    {
        _dataSource.Dispose();
    }

    private async Task ScriptEditorInitAsync()
    {
        if (_editModel != null && !string.IsNullOrEmpty(_editModel.Value.Scripts))
        {
            await _scriptsEditor.SetValue(_editModel.Value.Scripts);
        }
    }

    StandaloneEditorConstructionOptions BuildScriptsEditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "sql"
        };
    }

    async Task ShowDatabaseConfigSelectorDialogAsync()
    {
        _editModel.Value.DatabaseConfigId = null;
        await _mySqlConfigDialog.ShowAsync();
    }


    Task OnSelectDatabaseConfigDialogClosed()
    {
        _editModel.Value.DatabaseConfigId = _selectedDatabaseConfigs.FirstOrDefault()?.Id;
        StateHasChanged();
        return Task.CompletedTask;
    }

    async ValueTask InitAsync(
        DataQualityStatisticsDefinitionModel model,
        CancellationToken cancellationToken = default)
    {
        if (model == null || model.Value == null)
        {
            return;
        }

        if (!string.IsNullOrEmpty(model.Value.DatabaseConfigId))
        {
            var rsp = await ApiService.QueryDatabaseConfigAsync(model.Value.DatabaseConfigId);
            if (rsp.ErrorCode == 0)
            {
                model.Value.DatabaseConfig = rsp.Result;
            }
        }
    }

}