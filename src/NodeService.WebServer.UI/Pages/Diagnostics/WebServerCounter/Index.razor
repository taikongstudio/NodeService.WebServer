@namespace NodeService.WebServer.UI.Pages.Diagnostics.WebServerCounter
@page "/Diagnostics/WebServerCounter"
@using NodeService.WebServer.Services.Counters
@inject WebServerCounter WebServerCounter
@implements IDisposable

<Space Style="margin-bottom:16px">
    <SpaceItem>
        <Button Type="@ButtonType.Primary" OnClick="@Refresh">刷新</Button>
    </SpaceItem>

</Space>

<Table Size="TableSize.Small" Title="节点健康检查通知统计"
       DataSource="@NodeHealthyCheckNotificationStatistics">
    <ColumnDefinitions Context="ctx">
        <PropertyColumn Property="c => c.Desc" Ellipsis Title="分类"></PropertyColumn>
        <PropertyColumn Property="c => c.Value" Width="200" Title="数值"></PropertyColumn>
    </ColumnDefinitions>
</Table>

<Table Size="TableSize.Small" Title="任务执行"
       DataSource="@TaskExecutionStatistics">
    <ColumnDefinitions Context="ctx">
        <PropertyColumn Property="c => c.Desc" Ellipsis Title="分类"></PropertyColumn>
        <PropertyColumn Property="c => c.Value" Width="200" Title="数值"></PropertyColumn>
    </ColumnDefinitions>
</Table>

<Table Size="TableSize.Small" Title="任务执行报告生产分区偏移"
       DataSource="@TaskExecutionReportProducePartitionOffsetValues">
    <ColumnDefinitions Context="ctx">
        <PropertyColumn Property="c => c.Partition" Width="200" Ellipsis Title="分区"></PropertyColumn>
        <PropertyColumn Property="c => c" Title="值">@ctx</PropertyColumn>
        <PropertyColumn Property="c => c.Message" Title="值">@ctx.Message</PropertyColumn>
    </ColumnDefinitions>
</Table>

<Table Size="TableSize.Small" Title="任务执行报告消费分区偏移"
       DataSource="@TaskExecutionReportConsumePartitionOffsetValues">
    <ColumnDefinitions Context="ctx">
        <PropertyColumn Property="c => c.Partition" Width="200" Ellipsis Title="分区"></PropertyColumn>
        <PropertyColumn Property="c => c" Title="值">@ctx</PropertyColumn>
        <PropertyColumn Property="c => c.Message" Title="值">@ctx.Message</PropertyColumn>
    </ColumnDefinitions>
</Table>

<Table Size="TableSize.Small" Title="心跳"
       DataSource="@HeartBeatStatistics">
    <ColumnDefinitions Context="ctx">
        <PropertyColumn Property="c => c.Desc" Ellipsis Title="分类"></PropertyColumn>
        <PropertyColumn Property="c => c.Value" Width="200" Title="数值"></PropertyColumn>
    </ColumnDefinitions>
</Table>

<Table Size="TableSize.Small" Title="节点服务"
       DataSource="@NodeServiceStatistics">
    <ColumnDefinitions Context="ctx">
        <PropertyColumn Property="c => c.Desc" Ellipsis Title="分类"></PropertyColumn>
        <PropertyColumn Property="c => c.Value" Width="200" Title="数值"></PropertyColumn>
    </ColumnDefinitions>
</Table>

<Table Size="TableSize.Small" Title="任务日志"
       DataSource="@TaskLogStatistics">
    <ColumnDefinitions Context="ctx">
        <PropertyColumn Property="c => c.Desc" Ellipsis Title="分类"></PropertyColumn>
        <PropertyColumn Property="c => c.Value" Width="200" Title="数值"></PropertyColumn>
    </ColumnDefinitions>
</Table>

<Table Size="TableSize.Small" Title="Kafka日志消费"
       DataSource="@KafkaLogConsumeStatistics">
    <ColumnDefinitions Context="ctx">
        <PropertyColumn Property="c => c.Desc" Ellipsis Title="分类"></PropertyColumn>
        <PropertyColumn Property="c => c.Value" Width="200" Title="数值"></PropertyColumn>
    </ColumnDefinitions>
</Table>

<Table Size="TableSize.Small" Title="Kafka日志生产"
       DataSource="@KafkaLogProduceStatistics">
    <ColumnDefinitions Context="ctx">
        <PropertyColumn Property="c => c.Desc" Ellipsis Title="分类"></PropertyColumn>
        <PropertyColumn Property="c => c.Value" Width="200" Title="数值"></PropertyColumn>
    </ColumnDefinitions>
</Table>

<Table Size="TableSize.Small" Title="Kafka日志生产分区偏移"
       DataSource="@KafkaLogProducePartitionOffsetValues">
    <ColumnDefinitions Context="ctx">
        <PropertyColumn Property="c => c.Partition" Width="200" Ellipsis Title="分区"></PropertyColumn>
        <PropertyColumn Property="c => c"  Title="值">@ctx</PropertyColumn>
        <PropertyColumn Property="c => c.Message" Title="值">@ctx.Message</PropertyColumn>
    </ColumnDefinitions>
</Table>

<Table Size="TableSize.Small" Title="Kafka日志消费分区偏移"
       DataSource="@KafkaLogConsumePartitionOffsetValues">
    <ColumnDefinitions Context="ctx">
        <PropertyColumn Property="c => c.Partition" Width="200" Ellipsis Title="分区"></PropertyColumn>
        <PropertyColumn Property="c => c"  Title="值">@ctx</PropertyColumn>
        <PropertyColumn Property="c => c.Message" Title="值">@ctx.Message</PropertyColumn>
    </ColumnDefinitions>
</Table>

<Table Size="TableSize.Small" Title="Kafka延时消息"
       DataSource="@KafkaDelayMessageStatistics">
    <ColumnDefinitions Context="ctx">
        <PropertyColumn Property="c => c.Desc" Ellipsis Title="分类"></PropertyColumn>
        <PropertyColumn Property="c => c.Value" Width="200" Title="数值"></PropertyColumn>
    </ColumnDefinitions>
</Table>

<Table Size="TableSize.Small" Title="Kafka延时队列生产分区偏移"
       DataSource="@KafkaDelayMessageProducePartitionOffsetValues">
    <ColumnDefinitions Context="ctx">
        <PropertyColumn Property="c => c.Partition" Width="200" Ellipsis Title="分区"></PropertyColumn>
        <PropertyColumn Property="c => c" Title="值">@ctx</PropertyColumn>
        <PropertyColumn Property="c => c.Message" Title="值">@ctx.Message</PropertyColumn>
    </ColumnDefinitions>
</Table>

<Table Size="TableSize.Small" Title="Kafka延时队列消费分区偏移"
       DataSource="@KafkaDelayMessageConsumePartitionOffsetValues">
    <ColumnDefinitions Context="ctx">
        <PropertyColumn Property="c => c.Partition" Width="200" Ellipsis Title="分区"></PropertyColumn>
        <PropertyColumn Property="c => c" Title="值">@ctx</PropertyColumn>
        <PropertyColumn Property="c => c.Message" Title="值">@ctx.Message</PropertyColumn>
    </ColumnDefinitions>
</Table>

<Table Size="TableSize.Small" Title="Kafka任务监控事件统计"
       DataSource="@TaskObservationEventStatistics">
    <ColumnDefinitions Context="ctx">
        <PropertyColumn Property="c => c.Desc" Ellipsis Title="分类"></PropertyColumn>
        <PropertyColumn Property="c => c.Value" Width="200" Title="数值"></PropertyColumn>
    </ColumnDefinitions>
</Table>

<Table Size="TableSize.Small" Title="Kafka任务监控事件生产分区偏移"
       DataSource="@TaskObservationEventProducePartitionOffsetValues">
    <ColumnDefinitions Context="ctx">
        <PropertyColumn Property="c => c.Partition" Width="200" Ellipsis Title="分区"></PropertyColumn>
        <PropertyColumn Property="c => c" Title="值">@ctx</PropertyColumn>
        <PropertyColumn Property="c => c.Message" Title="值">@ctx.Message</PropertyColumn>
    </ColumnDefinitions>
</Table>

<Table Size="TableSize.Small" Title="Kafka任务监控事件消费分区偏移"
       DataSource="@TaskObservationEventConsumePartitionOffsetValues">
    <ColumnDefinitions Context="ctx">
        <PropertyColumn Property="c => c.Partition" Width="200" Ellipsis Title="分区"></PropertyColumn>
        <PropertyColumn Property="c => c" Title="值">@ctx</PropertyColumn>
        <PropertyColumn Property="c => c.Message" Title="值">@ctx.Message</PropertyColumn>
    </ColumnDefinitions>
</Table>


@code {
    IEnumerable<(string Desc, string Value)> TaskExecutionStatistics = [];
    IEnumerable<(string Desc, string Value)> HeartBeatStatistics = [];
    IEnumerable<(string Desc, string Value)> NodeServiceStatistics = [];
    IEnumerable<(string Desc, string Value)> TaskLogStatistics = [];
    IEnumerable<(string Desc, string Value)> KafkaLogConsumeStatistics = [];
    IEnumerable<(string Desc, string Value)> KafkaLogProduceStatistics = [];
    IEnumerable<(string Desc, string Value)> KafkaDelayMessageStatistics = [];
    IEnumerable<(string Desc, string Value)> NodeHealthyCheckNotificationStatistics = [];
    IEnumerable<(string Desc, string Value)> TaskObservationEventStatistics = [];


    IEnumerable<PartitionOffsetValue> TaskExecutionReportConsumePartitionOffsetValues = [];

    IEnumerable<PartitionOffsetValue> TaskExecutionReportProducePartitionOffsetValues = [];

    IEnumerable<PartitionOffsetValue> KafkaDelayMessageConsumePartitionOffsetValues = [];

    IEnumerable<PartitionOffsetValue> KafkaDelayMessageProducePartitionOffsetValues = [];

    IEnumerable<PartitionOffsetValue> KafkaLogConsumePartitionOffsetValues = [];

    IEnumerable<PartitionOffsetValue> KafkaLogProducePartitionOffsetValues = [];

    IEnumerable<PartitionOffsetValue> TaskObservationEventConsumePartitionOffsetValues = [];

    IEnumerable<PartitionOffsetValue> TaskObservationEventProducePartitionOffsetValues = [];

    Timer _timer;

    protected override void OnInitialized()
    {
        _timer = new Timer(TimeSpan.FromSeconds(1));
        _timer.Elapsed += OnTick;
        _timer.Start();
        base.OnInitialized();
    }

    async void OnTick(object? sender, EventArgs e)
    {
        Refresh();
        await InvokeAsync(this.StateHasChanged);
    }

    void Refresh()
    {
        NodeHealthyCheckNotificationStatistics = GetNodeHealthyCheckNotificationStatistics();
        TaskExecutionStatistics = GetTaskExecutionStatistics();
        TaskObservationEventStatistics = GetTaskObservationEventStatistics();
        HeartBeatStatistics = GetHeartBeatStatistics();
        NodeServiceStatistics = GetNodeServiceStatistics();
        TaskLogStatistics = GetTaskLogStatistics();
        KafkaLogConsumeStatistics = GetKafkaLogConsumeStatistics();
        KafkaLogProduceStatistics = GetKafkaLogProduceStatistics();
        KafkaDelayMessageStatistics = GetKafkaDelayMessageStatistics();
        TaskExecutionReportConsumePartitionOffsetValues = WebServerCounter.Snapshot.TaskExecutionReportConsumePartitionOffsetDictionary.Values;
        TaskExecutionReportProducePartitionOffsetValues = WebServerCounter.Snapshot.TaskExecutionReportProducePartitionOffsetDictionary.Values;
        KafkaLogConsumePartitionOffsetValues = WebServerCounter.Snapshot.KafkaLogConsumePartitionOffsetDictionary.Values;
        KafkaLogProducePartitionOffsetValues = WebServerCounter.Snapshot.KafkaLogProducePartitionOffsetDictionary.Values;
        KafkaDelayMessageConsumePartitionOffsetValues = WebServerCounter.Snapshot.KafkaDelayMessageConsumePartitionOffsetDictionary.Values;
        KafkaDelayMessageProducePartitionOffsetValues = WebServerCounter.Snapshot.KafkaDelayMessageConsumePartitionOffsetDictionary.Values;
        TaskObservationEventConsumePartitionOffsetValues = WebServerCounter.Snapshot.KafkaTaskObservationEventConsumePartitionOffsetDictionary.Values;
        TaskObservationEventProducePartitionOffsetValues = WebServerCounter.Snapshot.KafkaTaskObservationEventProducePartitionOffsetDictionary.Values;
    }

    IEnumerable<(string Desc, string Value)> GetTaskExecutionStatistics()
    {
        yield return (nameof(WebServerCounterSnapshot.TaskExecutionReportQueueCount), WebServerCounter.Snapshot.TaskExecutionReportQueueCount.ToString());
        yield return (nameof(WebServerCounterSnapshot.TaskExecutionReportProcessTimeSpan), WebServerCounter.Snapshot.TaskExecutionReportProcessTimeSpan.ToString());
        yield return (nameof(WebServerCounterSnapshot.TaskExecutionReportQueryTimeSpan), WebServerCounter.Snapshot.TaskExecutionReportQueryTimeSpan.ToString());
        yield return (nameof(WebServerCounterSnapshot.TaskExecutionReportSaveTimeSpan), WebServerCounter.Snapshot.TaskExecutionReportSaveTimeSpan.ToString());
        yield return (nameof(WebServerCounterSnapshot.TaskExecutionReportTotalTimeSpan), WebServerCounter.Snapshot.TaskExecutionReportTotalTimeSpan.ToString());
        yield return (nameof(WebServerCounterSnapshot.TaskExecutionReportSaveChangesCount), WebServerCounter.Snapshot.TaskExecutionReportSaveChangesCount.ToString());
        yield return (nameof(WebServerCounterSnapshot.TaskExecutionReportConsumeCount), WebServerCounter.Snapshot.TaskExecutionReportConsumeCount.ToString());
        yield return (nameof(WebServerCounterSnapshot.TaskExecutionReportProducePersistedCount), WebServerCounter.Snapshot.TaskExecutionReportProducePersistedCount.ToString());
        yield return (nameof(WebServerCounterSnapshot.TaskExecutionReportProduceNotPersistedCount), WebServerCounter.Snapshot.TaskExecutionReportProduceNotPersistedCount.ToString());
        yield break;
    }


    IEnumerable<(string Desc, string Value)> GetKafkaLogConsumeStatistics()
    {
        yield return (nameof(WebServerCounterSnapshot.KafkaTaskLogConsumeCount), WebServerCounter.Snapshot.KafkaTaskLogConsumeCount.ToString());
        yield return (nameof(WebServerCounterSnapshot.KafkaTaskLogConsumeWaitCount), WebServerCounter.Snapshot.KafkaTaskLogConsumeWaitCount.ToString());
        yield return (nameof(WebServerCounterSnapshot.KafkaTaskLogConsumeContextGroupMaxTimeSpan), WebServerCounter.Snapshot.KafkaTaskLogConsumeContextGroupMaxTimeSpan.ToString());
        yield return (nameof(WebServerCounterSnapshot.KafkaTaskLogConsumeContextGroupAvgTimeSpan), WebServerCounter.Snapshot.KafkaTaskLogConsumeContextGroupAvgTimeSpan.ToString());
        yield return (nameof(WebServerCounterSnapshot.KafkaTaskLogConsumeScaleFactor), WebServerCounter.Snapshot.KafkaTaskLogConsumeScaleFactor.ToString());
        yield return (nameof(WebServerCounterSnapshot.KafkaTaskLogConsumeMaxPrefetchCount), WebServerCounter.Snapshot.KafkaTaskLogConsumeMaxPrefetchCount.ToString());
        yield return (nameof(WebServerCounterSnapshot.KafkaTaskLogConsumePrefetchCount), WebServerCounter.Snapshot.KafkaTaskLogConsumePrefetchCount.ToString());
        yield return (nameof(WebServerCounterSnapshot.KafkaTaskLogConsumeTotalTimeSpan), WebServerCounter.Snapshot.KafkaTaskLogConsumeTotalTimeSpan.ToString());
        yield return (nameof(WebServerCounterSnapshot.KafkaTaskLogConsumeMaxTimeSpan), WebServerCounter.Snapshot.KafkaTaskLogConsumeMaxTimeSpan.ToString());
        yield break;
    }


    IEnumerable<(string Desc, string Value)> GetKafkaLogProduceStatistics()
    {

        yield return (nameof(WebServerCounterSnapshot.KafkaTaskLogProduceCount), WebServerCounter.Snapshot.KafkaTaskLogProduceCount.ToString());
        yield return (nameof(WebServerCounterSnapshot.KafkaTaskLogProduceRetryCount), WebServerCounter.Snapshot.KafkaTaskLogProduceRetryCount.ToString());
        yield break;
    }

    IEnumerable<(string Desc, string Value)> GetHeartBeatStatistics()
    {
        yield return (nameof(WebServerCounterSnapshot.HeartBeatRecieveCount), WebServerCounter.Snapshot.HeartBeatRecieveCount.ToString());
        yield return (nameof(WebServerCounterSnapshot.HeartBeatQueueCount), WebServerCounter.Snapshot.HeartBeatQueueCount.ToString());
        yield return (nameof(WebServerCounterSnapshot.HeartBeatMessageConsumeCount), WebServerCounter.Snapshot.HeartBeatMessageConsumeCount.ToString());
        yield return (nameof(WebServerCounterSnapshot.HeartBeatQueryNodeInfoListTimeSpan), WebServerCounter.Snapshot.HeartBeatQueryNodeInfoListTimeSpan.ToString());
        yield return (nameof(WebServerCounterSnapshot.HeartBeatUpdateNodeInfoListTimeSpan), WebServerCounter.Snapshot.HeartBeatUpdateNodeInfoListTimeSpan.ToString());
        yield return (nameof(WebServerCounterSnapshot.HeartBeatQueryNodePropsTimeSpan), WebServerCounter.Snapshot.HeartBeatQueryNodePropsTimeSpan.ToString());
        yield return (nameof(WebServerCounterSnapshot.HeartBeatSaveNodePropsTimeSpan), WebServerCounter.Snapshot.HeartBeatSaveNodePropsTimeSpan.ToString());
        yield return (nameof(WebServerCounterSnapshot.HeartBeatTotalProcessTimeSpan), WebServerCounter.Snapshot.HeartBeatTotalProcessTimeSpan.ToString());
        yield break;
    }

    IEnumerable<(string Desc, string Value)> GetNodeServiceStatistics()
    {
        yield return (nameof(WebServerCounterSnapshot.NodeServiceInputMessagesCount), WebServerCounter.Snapshot.NodeServiceInputMessagesCount.ToString());
        yield return (nameof(WebServerCounterSnapshot.NodeServiceOutputMessagesCount), WebServerCounter.Snapshot.NodeServiceOutputMessagesCount.ToString());
        yield return (nameof(WebServerCounterSnapshot.NodeServiceExpiredMessagesCount), WebServerCounter.Snapshot.NodeServiceExpiredMessagesCount.ToString());
        yield break;
    }

    IEnumerable<(string Desc, string Value)> GetTaskLogStatistics()
    {
        yield return (nameof(WebServerCounterSnapshot.TaskLogUnitEntriesCount), WebServerCounter.Snapshot.TaskLogUnitEntriesCount.ToString());
        yield return (nameof(WebServerCounterSnapshot.TaskLogUnitCollectLogEntriesTimeSpan), WebServerCounter.Snapshot.TaskLogUnitCollectLogEntriesTimeSpan.ToString());
        yield return (nameof(WebServerCounterSnapshot.TaskLogUnitRecieveCount), WebServerCounter.Snapshot.TaskLogUnitRecieveCount.ToString());
        yield return (nameof(WebServerCounterSnapshot.TaskLogUnitSaveTimeSpan), WebServerCounter.Snapshot.TaskLogUnitSaveTimeSpan.ToString());
        yield return (nameof(WebServerCounterSnapshot.TaskLogUnitQueryTimeSpan), WebServerCounter.Snapshot.TaskLogUnitQueryTimeSpan.ToString());
        yield return (nameof(WebServerCounterSnapshot.TaskLogUnitSaveMaxTimeSpan), WebServerCounter.Snapshot.TaskLogUnitSaveMaxTimeSpan.ToString());
        yield return (nameof(WebServerCounterSnapshot.TaskLogUnitQueueCount), WebServerCounter.Snapshot.TaskLogUnitQueueCount.ToString());
        yield return (nameof(WebServerCounterSnapshot.TaskLogUnitConsumeCount), WebServerCounter.Snapshot.TaskLogUnitConsumeCount.ToString());
        yield return (nameof(WebServerCounterSnapshot.TaskLogPageDetachedCount), WebServerCounter.Snapshot.TaskLogPageDetachedCount.ToString());
        yield return (nameof(WebServerCounterSnapshot.TaskLogEntriesSaveCount), WebServerCounter.Snapshot.TaskLogEntriesSaveCount.ToString());
        yield return (nameof(WebServerCounterSnapshot.TaskLogEntriesSaveTimes), WebServerCounter.Snapshot.TaskLogEntriesSaveTimes.ToString());
        yield return (nameof(WebServerCounterSnapshot.TaskLogInfoQueryTimeSpan), WebServerCounter.Snapshot.TaskLogInfoQueryTimeSpan.ToString());
        yield return (nameof(WebServerCounterSnapshot.TaskLogInfoSaveTimeSpan), WebServerCounter.Snapshot.TaskLogInfoSaveTimeSpan.ToString());
        yield return (nameof(WebServerCounterSnapshot.TaskLogPageCount), WebServerCounter.Snapshot.TaskLogPageCount.ToString());
        yield return (nameof(WebServerCounterSnapshot.TaskLogHandlerCount), WebServerCounter.Snapshot.TaskLogHandlerCount.ToString());
        yield break;
    }

    IEnumerable<(string Desc, string Value)> GetKafkaDelayMessageStatistics()
    {
        yield return (nameof(WebServerCounterSnapshot.KafkaDelayMessageTickCount), WebServerCounter.Snapshot.KafkaDelayMessageTickCount.ToString());
        yield return (nameof(WebServerCounterSnapshot.KafkaDelayMessageScheduleCount), WebServerCounter.Snapshot.KafkaDelayMessageScheduleCount.ToString());
        yield return (nameof(WebServerCounterSnapshot.KafkaDelayMessageProduceCount), WebServerCounter.Snapshot.KafkaDelayMessageProduceCount.ToString());
        yield return (nameof(WebServerCounterSnapshot.KafkaDelayMessageConsumeCount), WebServerCounter.Snapshot.KafkaDelayMessageConsumeCount.ToString());
        yield return (nameof(WebServerCounterSnapshot.KafkaDelayMessageHandledCount), WebServerCounter.Snapshot.KafkaDelayMessageHandledCount.ToString());
        yield break;
    }

    IEnumerable<(string Desc, string Value)> GetNodeHealthyCheckNotificationStatistics()
    {
        yield return (nameof(WebServerCounterSnapshot.FireNodeHeathyCheckJobDequeueCount), WebServerCounter.Snapshot.FireNodeHeathyCheckJobDequeueCount.ToString());
        yield return (nameof(WebServerCounterSnapshot.FireNodeHeathyCheckJobEnqueueCount), WebServerCounter.Snapshot.FireNodeHeathyCheckJobEnqueueCount.ToString());
        yield return (nameof(WebServerCounterSnapshot.NodeHeathyCheckSendEmailCount), WebServerCounter.Snapshot.NodeHeathyCheckSendEmailCount.ToString());
        yield return (nameof(WebServerCounterSnapshot.NodeHeathyCheckScheduleCount), WebServerCounter.Snapshot.NodeHeathyCheckScheduleCount.ToString());
        yield break;
    }

    IEnumerable<(string Desc, string Value)> GetTaskObservationEventStatistics()
    {
        yield return (nameof(WebServerCounterSnapshot.TaskObservationEventConsumeCount), WebServerCounter.Snapshot.TaskObservationEventConsumeCount.ToString());
        yield return (nameof(WebServerCounterSnapshot.TaskObservationEventProducePersistedCount), WebServerCounter.Snapshot.TaskObservationEventProducePersistedCount.ToString());   }

    public void Dispose()
    {
        _timer.Stop();
        _timer.Elapsed -= OnTick;
        _timer.Dispose();
    }
}