@inject NotificationService _notice
@inject ApiService ApiService
@implements IAsyncDisposable
<style type="text/css">
    .taskLogViwer { /* for a specific editor instance */
        height:100%;
        width:100%;
    }
</style>

<Flex Vertical Style="height:100%">
    <Flex Vertical >

        <Space>
            @if (_loading)
            {
                <SpaceItem>
                    <Button Shape="@ButtonShape.Circle"
                            Type="@ButtonType.Primary"
                            Icon="@IconType.Outline.CloseCircle"
                            OnClick="StopAsync">
                    </Button>
                </SpaceItem>
            }
            else
            {
                <SpaceItem>
                    <Button Shape="@ButtonShape.Circle"
                            Type="@ButtonType.Primary"
                            Disabled="@_loadMoreButtonDisabled"
                            Icon="@IconType.Outline.Reload"
                            OnClick="LoadTaskLogsAsync">
                    </Button>
                </SpaceItem>
            }

            <SpaceItem>
                <a href="@($"/api/jobs/instances/{TaskExecutionInstanceId}/log")" target="_blank">
                    <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Download">
                    </Button>
                </a>
            </SpaceItem>
        </Space>
        <AntDesign.Progress Percent=@(this._loadedLogEntriesCount / (this._totalLogEntriesCount + 0d)*100) ShowInfo=false />

    </Flex>
    <Flex Vertical Style="flex:auto">
        <StandaloneCodeEditor @ref="@_viewer"
                              CssClass="taskLogViwer"
                              OnDidInit=LoadTaskLogsAsync
                              ConstructionOptions=EditorConstructionOptions />
    </Flex>
</Flex>



@code {
    [Parameter] public string TaskExecutionInstanceId { get; set; }


    StandaloneCodeEditor _viewer = null!;
    CancellationTokenSource _cancellationTokenSource;
    List<string> _logPages = [];
    bool _loading;
    int _logPageIndex = 0;
    int _loadedLogEntriesCount;
    int _totalLogEntriesCount;
    bool _loadMoreButtonDisabled;

    async Task LoadTaskLogsAsync()
    {
        try
        {
            _loadMoreButtonDisabled = true;
            _loading = true;
            InitCancellationTokenSource();
            await _viewer.UpdateOptions(new EditorUpdateOptions
            {
                ReadOnly = true,
                LineNumbersMinChars = 10
            });

            while (!_cancellationTokenSource.IsCancellationRequested)
            {
                if (!await LoadNextLogPageAsync(_cancellationTokenSource.Token))
                {
                    break;
                }
            }
        }
        catch (TaskCanceledException ex)
        {
            if (ex.CancellationToken != _cancellationTokenSource.Token)
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = ex.ToString()
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = ex.ToString()
            });
        }
        finally
        {
            _loadMoreButtonDisabled = false;
            _loading = false;
            StateHasChanged();
        }
    }

    async Task<bool> LoadNextLogPageAsync(CancellationToken cancellationToken = default)
    {
        var pageSize = 512;
        var apiResponse = await ApiService.QueryTaskExecutionInstanceLogAsync(TaskExecutionInstanceId,
            new PaginationQueryParameters
            {
                PageIndex = _logPageIndex,
                PageSize = pageSize
            },
            cancellationToken
        );
        if (apiResponse.ErrorCode == 0)
        {
            var sb = new StringBuilder();

            foreach (var item in apiResponse.Result)
            {
                sb.AppendLine($"{item.DateTimeUtc.ToString(NodePropertyModel.DateTimeFormatString)} {item.Value}");
            }

            var log = sb.ToString();

            IEnumerable<string> logPages = [];
            var lastPageItemsCount = 0;
            var resultCount = apiResponse.Result.Count();
            if (resultCount == apiResponse.PageSize)
            {
                _logPages.Add(log);
                logPages = _logPages;
                _logPageIndex++;
            }
            else
            {
                logPages = _logPages.Union([log]);
                lastPageItemsCount = resultCount;
            }

            var stringBuilder = new StringBuilder();
            stringBuilder.AppendJoin(string.Empty, logPages);
            var logText = stringBuilder.ToString();
            await _viewer.SetValue(logText);
            _loadedLogEntriesCount = pageSize * _logPages.Count + lastPageItemsCount;
            _totalLogEntriesCount = apiResponse.TotalCount;
            await InvokeAsync(StateHasChanged);
            return lastPageItemsCount == 0 && _totalLogEntriesCount > 0;
        }

        await _notice.Open(new NotificationConfig
        {
            Message = "错误提示",
            Description = apiResponse.Message
        });
        return false;
    }

    StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "plaintext",
            Value = string.Empty
        };
    }

    void InitCancellationTokenSource()
    {
        if (_cancellationTokenSource == null)
        {
            _cancellationTokenSource = new CancellationTokenSource();
        }
        else if (_cancellationTokenSource != null && !_cancellationTokenSource.TryReset())
        {
            _cancellationTokenSource.Dispose();
            _cancellationTokenSource = new CancellationTokenSource();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_viewer != null)
        {
            await _viewer.SetValue(string.Empty);
        }
        if (_cancellationTokenSource != null && !_cancellationTokenSource.IsCancellationRequested)
        {
            await _cancellationTokenSource.CancelAsync();
        }
        TaskExecutionInstanceId = null;
        _totalLogEntriesCount = 0;
        _loadedLogEntriesCount = 0;
        _logPageIndex = 0;
        _logPages.Clear();
    }

    public async Task StopAsync()
    {
        if (!_cancellationTokenSource.IsCancellationRequested)
        {
            await _cancellationTokenSource.CancelAsync();
        }

        _loading = false;
        StateHasChanged();
    }

}