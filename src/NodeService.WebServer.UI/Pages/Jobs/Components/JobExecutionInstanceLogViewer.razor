@inject NotificationService _notice
@inject ApiService ApiService
<style type="text/css">
    .jobLogViwer { /* for a specific editor instance */
        height: calc(100% - 60px);
        margin-top: 10px;
    }
</style>
<Modal Width="800"
       Maximizable
       Title="@($"查看日志({_loadedLogEntriesCount}/{_totalLogEntriesCount})")"
       @bind-Visible="@_logModalVisible"
       Closable="true"
       DefaultMaximized
       DestroyOnClose
       AfterClose="CloseAsync">
    <Space>
        @if (_showStopButton)
        {
            <SpaceItem>
                <Button Shape="@ButtonShape.Circle"
                        Type="@ButtonType.Primary"
                        Icon="@IconType.Outline.CloseCircle"
                        OnClick="StopAsync">
                </Button>
            </SpaceItem>
        }
        else
        {
            <SpaceItem>
                <Button Shape="@ButtonShape.Circle"
                        Type="@ButtonType.Primary"
                        Disabled="@_loadMoreButtonDisabled"
                        Icon="@IconType.Outline.Reload"
                        OnClick="StartLoadLogsAsync">
                </Button>
            </SpaceItem>
        }

        <SpaceItem>
            <a href="@($"/api/jobs/instances/{LogQueryId}/log")" target="_blank">
                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Download">
                </Button>
            </a>
        </SpaceItem>

    </Space>
    <StandaloneCodeEditor @ref="@_viewer" CssClass="jobLogViwer" OnDidInit="StartLoadLogsAsync" ConstructionOptions="EditorConstructionOptions"/>


</Modal>


@code {
    [Parameter] public string? LogQueryId { get; set; }


    StandaloneCodeEditor _viewer = null!;
    CancellationTokenSource _cancellationTokenSource;
    bool _showStopButton;
    int _logPageIndex = 0;
    List<string> _logPages = [];
    int _loadedLogEntriesCount;
    int _totalLogEntriesCount;
    bool _loadMoreButtonDisabled;
    bool _logModalVisible;

    async Task StartLoadLogsAsync()
    {
        try
        {
            _loadMoreButtonDisabled = true;
            _showStopButton = true;
            InitCancellationTokenSource();
            await _viewer.UpdateOptions(new EditorUpdateOptions
            {
                ReadOnly = true,
                LineNumbersMinChars = 10
            });

            while (!_cancellationTokenSource.IsCancellationRequested)
            {
                if (!await LoadNextLogPageAsync(_cancellationTokenSource.Token))
                {
                    break;
                }
            }
        }
        catch (TaskCanceledException ex)
        {
            if (ex.CancellationToken != _cancellationTokenSource.Token)
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = ex.ToString()
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = ex.ToString()
            });
        }
        finally
        {
            _loadMoreButtonDisabled = false;
            _showStopButton = false;
            StateHasChanged();
        }
    }

    async Task<bool> LoadNextLogPageAsync(CancellationToken cancellationToken = default)
    {
        var pageSize = 512;
        var apiResponse = await ApiService.QueryTaskExecutionInstanceLogAsync(LogQueryId,
            new PaginationQueryParameters
            {
                PageIndex = _logPageIndex,
                PageSize = pageSize
            },
            cancellationToken
        );
        if (apiResponse.ErrorCode == 0)
        {
            var sb = new StringBuilder();

            foreach (var item in apiResponse.Result)
            {
                sb.AppendLine($"{item.Index} {item.DateTimeUtc.ToString(NodePropertyModel.DateTimeFormatString)} {item.Value}");
            }

            var log = sb.ToString();

            IEnumerable<string> allLogPages = [];
            var lastPageItemsCount = 0;
            var resultCount = apiResponse.Result.Count();
            if (resultCount == apiResponse.PageSize)
            {
                _logPages.Add(log);
                allLogPages = _logPages;
                _logPageIndex++;
            }
            else
            {
                allLogPages = _logPages.Union([log]);
                lastPageItemsCount = resultCount;
            }

            var stringBuilder = new StringBuilder();
            stringBuilder.AppendJoin(string.Empty, allLogPages);
            var allLogText = stringBuilder.ToString();
            await _viewer.SetValue(allLogText);
            _loadedLogEntriesCount = pageSize * _logPages.Count + lastPageItemsCount;
            _totalLogEntriesCount = apiResponse.TotalCount;
            await InvokeAsync(StateHasChanged);
            return lastPageItemsCount == 0 && _totalLogEntriesCount > 0;
        }

        await _notice.Open(new NotificationConfig
        {
            Message = "错误提示",
            Description = apiResponse.Message
        });
        return false;
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "plaintext",
            Value = string.Empty
        };
    }

    private void OnModalVisibleChanged(bool visible)
    {
    }

    private void InitCancellationTokenSource()
    {
        if (_cancellationTokenSource == null)
        {
            _cancellationTokenSource = new CancellationTokenSource();
        }
        else if (_cancellationTokenSource != null && !_cancellationTokenSource.TryReset())
        {
            _cancellationTokenSource.Dispose();
            _cancellationTokenSource = new CancellationTokenSource();
        }
    }

    public Task ShowAsync()
    {
        _logModalVisible = true;
        InitCancellationTokenSource();
        StateHasChanged();
        return Task.CompletedTask;
    }

    public async Task CloseAsync()
    {
        if (!_cancellationTokenSource.IsCancellationRequested)
        {
            _cancellationTokenSource.Cancel();
        }

        _logModalVisible = false;
        LogQueryId = null;
        _totalLogEntriesCount = 0;
        _loadedLogEntriesCount = 0;
        _logPageIndex = 0;
        _logPages.Clear();
        if (_viewer != null)
        {
            await _viewer.SetValue(string.Empty);
        }
    }

    public Task StopAsync()
    {
        if (!_cancellationTokenSource.IsCancellationRequested)
        {
            _cancellationTokenSource.Cancel();
        }

        _showStopButton = false;
        StateHasChanged();
        return Task.CompletedTask;
    }

}