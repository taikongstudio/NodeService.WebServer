@namespace NodeService.WebServer.UI.Pages.Jobs.JobInstances
@page "/Jobs/Instances"
@using NodeService.WebServer.UI.Pages.Components
@using NodeService.WebServer.UI.Pages.Jobs.Components
@using static Infrastructure.Models.JobExecutionReport.Types
@inject ApiService ApiService
@inject NotificationService _notice
@inject NavigationManager NavigationManager
@implements IDisposable

<GridContent>
    <JobExecutionInstanceLogViewer @ref="@_logViewer"/>

    <CommonDialog Closed="OnDialogClosed" @ref="_taskDefinitionSelectorDialog">
        <TaskDefinitionSelector @ref="_taskDefinitionSelector" @bind-SelectedItems="_selectedJobSchduleConfigList" Mode="SelectionMode.Multiple"/>
    </CommonDialog>
    <CommonDialog Closed="OnDialogClosed" @ref="_nodeSelectorDialog">
        <NodeSelector @ref="_nodeSelector" @bind-SelectedItems="_selectedNodeList" Mode="SelectionMode.Multiple"/>
    </CommonDialog>

    <Table Size="TableSize.Small"
           @ref="_table"
           Loading="@_dataSource.IsLoading"
           ScrollX="1500px"
           Resizable
           Total="@_dataSource.TotalCount"
           EnableVirtualization="false"
           PageSize="@_dataSource.PageSize"
           PageIndex="@_dataSource.PageIndex"
           OnChange="OnTableChange"
           OnPageSizeChange="@_dataSource.OnPaginationEvent"
           OnPageIndexChange="@_dataSource.OnPaginationEvent"
           TItem="JobExecutionInstanceModel"
           DataSource="@_dataSource.ItemsSource">
        <TitleTemplate>
            <GridRow Style="margin-bottom:16px">
                <GridCol Span="4">
                    <Title Level="3">作业执行实例</Title>
                </GridCol>
                <GridCol Span="6" Offset="18">
                    <Search Placeholder="搜索" @bind-Value="@_dataSource.QueryParameters.Keywords" OnSearch="@_dataSource.RefreshAsync"/>
                </GridCol>
            </GridRow>
            <GridRow Wrap Style="min-height:30px">
                <Text>节点：</Text>

                @if (_selectedNodeList != null)
                {
                    foreach (var item in _selectedNodeList)
                    {
                        <Tag @key="item.Id" Style="height:20px">@item.Name</Tag>
                    }
                }
                else
                {
                    <Text>全部</Text>   
                }

                <Button Shape="@ButtonShape.Circle" Icon="@IconType.Outline.FolderOpen" Type="@ButtonType.Primary" OnClick="ShowNodeSelectorDialogAsync"></Button>
                  
            </GridRow>
            <GridRow Wrap Style="min-height:30px">
                <Text>任务调度配置：</Text>
                @if (_selectedJobSchduleConfigList != null)
                {
                    foreach (var item in _selectedJobSchduleConfigList)
                    {
                        <Tag @key="item.Id" Style="height:20px;">@item.Name</Tag>
                    }
                }
                else
                {
                    <Text>全部</Text>
                }
                        
                <Button Shape="@ButtonShape.Circle" Icon="@IconType.Outline.FolderOpen" Type="@ButtonType.Primary" OnClick="ShowTaskDefinitionSelectorDialogAsync"></Button>
                  
            </GridRow>
            <GridRow>
                <Space Wrap Style="margin-bottom:16px">
                    <SpaceItem>
                        <RangePicker ValueExpression="() => DateTimes" Size="middle" TValue="DateTime?[]" ShowTime="false" OnChange="OnDatePickerChanged"/>
                    </SpaceItem>
                    <SpaceItem>
                        <Select TItem="JobExeuctionStatusModel"
                                TItemValue="JobExecutionStatus"
                                DataSource="@_jobExeuctionStatusList"
                                @bind-Value="@_selectedStatus"
                                LabelName="@nameof(JobExeuctionStatusModel.Name)"
                                ValueName="@nameof(JobExeuctionStatusModel.Value)"
                                Placeholder="选择状态"
                                DefaultActiveFirstOption="true"
                                EnableSearch
                                Style="width:200px"
                                OnSelectedItemChanged="OnSelectedStatusChanged"
                                OnSearch="OnSearchStatus">
                        </Select>
                    </SpaceItem>
                    <SpaceItem>
                        <Button Type="@ButtonType.Primary" OnClick="QueryTaskExecutionInstanceListAsync">查询</Button>
                    </SpaceItem>

                </Space>
            </GridRow>
        </TitleTemplate>
        <ColumnDefinitions>
            <Selection Key="@context.Id" Width="40" Fixed="left" Type="checkbox"/>
            <PropertyColumn Title="标志" Ellipsis Sortable Property="c => c.Id"></PropertyColumn>
            <PropertyColumn Title="名称" Ellipsis Sortable Property="c => c.Name"></PropertyColumn>
            <PropertyColumn Title="触发源头" Sortable="true" Property="c => c.TriggerSource">
                @switch (context.TriggerSource)
                {
                    case TaskTriggerSource.Schedule:
                        <Text>调度触发</Text>
                        break;
                    case TaskTriggerSource.Manual:
                        <Text>手动触发</Text>
                        break;
                }
            </PropertyColumn>
            <PropertyColumn Title="状态" SorterMultiple="3" SorterCompare="(a, b) => a-b" Sortable="true" Property="c => c.Status">
                @switch (context.Status)
                {
                    case JobExecutionStatus.Unknown:
                        <Text>未知</Text>
                        break;
                    case JobExecutionStatus.Triggered:
                        <Text>已触发</Text>
                        break;
                    case JobExecutionStatus.Pendding:
                        <Text>等待</Text>
                        break;
                    case JobExecutionStatus.Started:
                        <Text>已启动</Text>
                        break;
                    case JobExecutionStatus.Running:
                        <Text>运行中</Text>
                        break;
                    case JobExecutionStatus.Finished:
                        <Text>完成</Text>
                        break;
                    case JobExecutionStatus.Cancelled:
                        <Text>已取消</Text>
                        break;
                    case JobExecutionStatus.Failed:
                        <Text>失败</Text>
                        break;
                    case JobExecutionStatus.PenddingTimeout:
                        <Text>等待超时</Text>
                        break;
                }
            </PropertyColumn>
            <PropertyColumn Title="触发时间" SorterMultiple="0" SorterCompare="(a, b) => DateTime.Compare(a,b)" Sortable="true" Format="@NodePropertyModel.DateTimeFormatString" Property="c => c.FireTimeUtc"></PropertyColumn>
            <PropertyColumn Title="开始时间" SorterMultiple="1"  Sortable="true" Format="@NodePropertyModel.DateTimeFormatString" Property="c => c.ExecutionBeginTimeUtc"></PropertyColumn>
            <PropertyColumn Title="结束时间" SorterMultiple="2"  Sortable="true" Format="@NodePropertyModel.DateTimeFormatString" Property="c => c.ExecutionEndTimeUtc"></PropertyColumn>
            <PropertyColumn Title="消息" Sortable="true" Ellipsis Property="c => c.Message"></PropertyColumn>
            <ActionColumn Fixed="right" Width="150" Title="操作">
                <CellRender Context="cellData">
                    <Space>
                        @switch (context.Status)
                        {
                            case JobExecutionStatus.PenddingTimeout:
                                <SpaceItem>
                                    <Button Shape="@ButtonShape.Circle" OnClick="() => RevokeJobAsync(context)" Type="@ButtonType.Primary" Icon="@IconType.Outline.PlayCircle"></Button>
                                </SpaceItem>
                                break;
                            case JobExecutionStatus.Failed:
                                <SpaceItem>
                                    <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.PlayCircle"></Button>
                                </SpaceItem>
                                break;
                            case JobExecutionStatus.Running:
                                <SpaceItem>
                                    <Button Danger Shape="@ButtonShape.Circle" OnClick="() => StopJobAsync(context)" Type="@ButtonType.Primary" Icon="@IconType.Outline.Close"></Button>
                                </SpaceItem>
                                break;
                        }
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Eye" OnClick="() => ShowLogMessageModalAsync(context.Id)">
                            </Button>
                        </SpaceItem>
                        <SpaceItem>
                            <a href="@($"/api/jobs/instances/{context.Id}/log")" target="_blank">
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Download">
                                </Button>
                            </a>
                        </SpaceItem>
                    </Space>
                </CellRender>
            </ActionColumn>
        </ColumnDefinitions>
        <ExpandTemplate>
            <Tabs DefaultActiveKey="1" Animated>
                <TabPane Tab="子作业" Key="1">

                </TabPane>
                <TabPane Tab="作业日志" Key="2">

                </TabPane>


            </Tabs>
        </ExpandTemplate>
    </Table>
</GridContent>

@code {

    class JobExeuctionStatusModel
    {
        public JobExecutionStatus Value { get; set; }

        public string Name { get; set; }
    }

    ITable _table;
    string _searchText;
    CommonDialog _nodeSelectorDialog;
    CommonDialog _taskDefinitionSelectorDialog;
    TaskDefinitionSelector _taskDefinitionSelector;
    NodeSelector _nodeSelector;

    JobExecutionInstanceLogViewer _logViewer;
    bool _nodeModalVisible;

    DateTime BeginDateTime;
    DateTime EndDateTime;

    readonly DateTime?[] DateTimes = [DateTime.UtcNow.Date, DateTime.UtcNow.Date];

    IEnumerable<string> _selectedNodeIdList;
    IEnumerable<string> _selectedTaskScheduleConfigIdList;

    bool _loading;
    RoutedPaginationDataSource<JobExecutionInstanceModel, QueryTaskExecutionInstanceListParameters> _dataSource;


    readonly List<JobExeuctionStatusModel> _jobExeuctionStatusList = [];

    IEnumerable<NodeInfoModel> _selectedNodeList = [];
    IEnumerable<JobScheduleConfigModel> _selectedJobSchduleConfigList = [];

    JobExecutionStatus _selectedStatus;

    protected override void OnInitialized()
    {
        _dataSource = new RoutedPaginationDataSource<JobExecutionInstanceModel, QueryTaskExecutionInstanceListParameters>(NavigationManager, ApiService.QueryTaskExecutionInstancesAsync, StateHasChanged);


        base.OnInitialized();
    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _jobExeuctionStatusList.Add(new JobExeuctionStatusModel { Value = JobExecutionStatus.Unknown, Name = "全部" });
        _jobExeuctionStatusList.Add(new JobExeuctionStatusModel { Value = JobExecutionStatus.Triggered, Name = "已触发" });
        _jobExeuctionStatusList.Add(new JobExeuctionStatusModel { Value = JobExecutionStatus.Pendding, Name = "等待中" });
        _jobExeuctionStatusList.Add(new JobExeuctionStatusModel { Value = JobExecutionStatus.Started, Name = "已启动" });
        _jobExeuctionStatusList.Add(new JobExeuctionStatusModel { Value = JobExecutionStatus.Running, Name = "运行中" });
        _jobExeuctionStatusList.Add(new JobExeuctionStatusModel { Value = JobExecutionStatus.Failed, Name = "失败" });
        _jobExeuctionStatusList.Add(new JobExeuctionStatusModel { Value = JobExecutionStatus.Finished, Name = "完成" });
        _jobExeuctionStatusList.Add(new JobExeuctionStatusModel { Value = JobExecutionStatus.Cancelled, Name = "已取消" });
        _jobExeuctionStatusList.Add(new JobExeuctionStatusModel { Value = JobExecutionStatus.PenddingTimeout, Name = "等待超时" });
        BeginDateTime = DateTime.Today.Date;
        EndDateTime = DateTime.Today.AddDays(1).Date.AddSeconds(-1);
        DateTimes[0] = BeginDateTime;
        DateTimes[1] = EndDateTime;
        await QueryTaskExecutionInstanceListAsync();
    }

    void OnDatePickerChanged(DateRangeChangedEventArgs<DateTime?[]> e)
    {
        BeginDateTime = e.Dates[0] ?? DateTime.Today.Date;
        EndDateTime = e.Dates[1] ?? DateTime.Today.AddDays(1).Date.AddSeconds(-1);
    }

    async Task QueryTaskExecutionInstanceListAsync()
    {
        try
        {
            _loading = true;

            _dataSource.QueryParameters.BeginDateTime = BeginDateTime;
            _dataSource.QueryParameters.EndDateTime = EndDateTime;
            _dataSource.QueryParameters.NodeIdList.Clear();
            if (_selectedNodeList != null)
            {
                _dataSource.QueryParameters.NodeIdList.AddRange(_selectedNodeList.Select(x => x.Id));
            }
            _dataSource.QueryParameters.JobScheduleConfigIdList.Clear();
            if (_selectedJobSchduleConfigList!=null)
            {
                _dataSource.QueryParameters.JobScheduleConfigIdList.AddRange(_selectedJobSchduleConfigList.Select(x => x.Id));
            }
            if (_selectedStatus != JobExecutionStatus.Unknown)
            {
                _dataSource.QueryParameters.Status = _selectedStatus;
            }

            _dataSource.ForceRequest();
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = ex.ToString()
                });
        }
    }

    async Task RevokeJobAsync(JobExecutionInstanceModel instance)
    {
        try
        {
            await ApiService.ReinvokeJobAsync(instance.Id);
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = ex.ToString()
            });
        }
    }

    async Task StopJobAsync(JobExecutionInstanceModel instance)
    {
        try
        {
            await ApiService.CancelJobAsync(instance.Id, new TaskCancellationParameters());
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = ex.ToString()
            });
        }
    }

    async Task OnSelectedStatusChanged(JobExeuctionStatusModel status)
    {
    }

    void OnSearchStatus(string status)
    {
    }

    async Task OnSelectedTaskScheduleConfigChanged(JobScheduleConfigModel jobScheduleConfig)
    {
    }

    void OnSearchJobScheduleConfig(string nodeId)
    {
    }

    async Task OnSelectedNodeChanged(NodeInfoModel node)
    {
    }

    void OnSearchNode(string nodeId)
    {
    }


    void OnTableChange(QueryModel<JobExecutionInstanceModel> query)
    {   
        _dataSource.QueryParameters.SortDescriptions.Clear();
        foreach (var sortModel in query.SortModel)
        {
            if (sortModel.Sort == null)
            {
                continue;
            }

            _dataSource.QueryParameters.SortDescriptions.Add(new SortDescription(sortModel.FieldName, sortModel.Sort));
        }

        _dataSource.Request();
    }

    async Task ShowLogMessageModalAsync(string id)
    {
        _logViewer.LogQueryId = id;
        await _logViewer.ShowAsync();
    }

    async Task ShowNodeSelectorDialogAsync()
    {
        await _nodeSelectorDialog.ShowAsync();
    }

    async Task ShowTaskDefinitionSelectorDialogAsync()
    {
        await _taskDefinitionSelectorDialog.ShowAsync();
    }

    Task OnDialogClosed()
    {
        StateHasChanged();
        return Task.CompletedTask;
    }


    public void Dispose()
    {
    }

}