@namespace NodeService.WebServer.UI.Pages.Nodes.List
@page "/Nodes/List"
@using NodeService.WebServer.UI.Pages.Nodes.Components
@using AntDesign
@inject ApiService ApiService
@inject NotificationService _notice
@inject NavigationManager NavigationManager
@inject IMessageService _message
@inject ConfirmService _confirmService
@implements IDisposable

<GridContent>
<Drawer Closable="true"
        OnClose="_ => CloseModifyNodeInfoDrawer()"
        Title='"修改节点信息"'
        Visible="_nodeInfoDrawerVisible"
        Width="320">
    <Template style="height:90%">
        @if (_editingNodeInfoModel == null)
        {
            <Row>
                <AntDesign.Col Span="24">
                    <Alert>请选择一个节点</Alert>
                </AntDesign.Col>
            </Row>
            <br/>
            <Row>
                <AntDesign.Col Span="6">
                    <Button Type="default">取消</Button>
                </AntDesign.Col>
                <AntDesign.Col Span="6">
                    <Button Type="primary" OnClick="CloseModifyNodeInfoDrawer">提交</Button>
                </AntDesign.Col>
            </Row>
        }
        else
        {
            @if (_modifyErrorMsg != null)
            {
                <Row>
                    <AntDesign.Col Span="24">
                        <Alert Message="@_modifyErrorMsg" Type="@AlertType.Error"/>
                    </AntDesign.Col>
                </Row>
            }

            <Row Gutter="24">
            <AntDesign.Col Span="24">
            <Text>测试分类</Text>
            <Input @bind-Value="@_editingNodeInfoModel.TestInfo" Placeholder="请输入测试分类"
                   TValue="string">
            </Input>
                </AntDesign.Col>
                <AntDesign.Col Span="24">
                    <Text>实验室区域</Text>
                    <AntDesign.Input Disabled @bind-Value="@_editingNodeInfoModel.LabArea" Placeholder="请输入实验室区域" TValue="string"/>
                </AntDesign.Col>
                <AntDesign.Col Span="24">
                    <Text>实验室名称</Text>
                        <AntDesign.Input Disabled @bind-Value="@_editingNodeInfoModel.LabName" Placeholder="请输入实验室名称" TValue="string" />
                </AntDesign.Col>
            </Row>
            <br/>
            <AntDesign.Col Span="24">
                <Text>用途</Text>
                <AntDesign.Input @bind-Value="@_editingNodeInfoModel.Usages" Placeholder="请输入用途" TValue="string"/>
            </AntDesign.Col>
            <Row>
                <AntDesign.Col Span="24">
                    <Text>备注</Text>
                    <TextArea @bind-Value="@_editingNodeInfoModel.Remarks" Placeholder="请输入备注"></TextArea>
                </AntDesign.Col>
            </Row>
            <br/>
            <Row>
                <AntDesign.Col Span="6">
                    <Button Type="default" OnClick="CloseModifyNodeInfoDrawer">取消</Button>
                </AntDesign.Col>
                <AntDesign.Col Span="6">
                    <Button Type="primary" OnClick="SubmitNodeProfileAsync">提交</Button>
                </AntDesign.Col>
            </Row>
        }

    </Template>
</Drawer>
<Modal Width="800"
       Style="top:0"
       Title="@_modalTitle"
       @bind-Visible="@_editFormVisible"
       ConfirmLoading="@_editFormConfirmLoading"
       OnOk="@HandleEditFormOk"
       OnCancel="@HandleEditFormCancel">
    <Form Model="@_editModel" Size="@AntSizeLDSType.Default"
          LabelColSpan="4"
          Layout="@FormLayout.Horizontal"
          WrapperColSpan="20"
          OnFinish="OnEditFormFinish"
          OnFinishFailed="OnEditFormFinishFailed"
          @ref="@_editForm">
        <FormItem Required Label="设备名称">
            <Input @bind-Value="@context.Name"/>
        </FormItem>
        @if (context.Profile != null)
        {
            <FormItem Required Label="制造商名称">
                <Input @bind-Value="@context.Profile.Manufacturer"/>
            </FormItem>
        }
        <FormItem Label="配置类型">
            <Select DataSource="@_nodeDeviceTypes"
                    Value="@context.DeviceType"
                    TItem="EnumModel<NodeDeviceType>"
                    TItemValue="NodeDeviceType"
                    ValueChanged="OnSelectedDeviceTypeChanged"
                    LabelName="@nameof(EnumModel<NodeDeviceType>.Name)"
                    ValueName="@nameof(EnumModel<NodeDeviceType>.Value)">
            </Select>
        </FormItem>
        @switch (context.DeviceType)
        {
            case NodeDeviceType.NetworkDevice:
                <NetworkDeviceConfiguration Settings="@_hostPortSettings"/>
                break;
            case NodeDeviceType.SerialPortDevice:
                <SerialPortConfiguration Settings="@_serialPortSettings"/>
                break;
        }

    </Form>
</Modal>
<GridRow Gutter="(8, 0)">
    <GridCol Span="24">
        <Table Loading="@_dataSource.IsLoading"
               Size="TableSize.Small"
               Resizable
               ScrollX="1500"
               EnableVirtualization="false"
               OnChange="OnNodeTableChanged"
               TItem="NodeInfoModel"
               PageIndex="@_dataSource.PageIndex"
               PageSize="@_dataSource.PageSize"
               Total="@_dataSource.TotalCount"
               OnPageIndexChange="@_dataSource.OnPaginationEvent"
               OnPageSizeChange="@_dataSource.OnPaginationEvent"
               DataSource="@_dataSource.ItemsSource"
               
               OnRowClick="OnRowClick">
            <TitleTemplate>
                <GridRow>
                    <GridCol Span="6">
                        <Title Level="3">节点列表</Title>
                    </GridCol>
                    <GridCol Span="6" Offset="12">
                        <Search Placeholder="搜索节点" @bind-Value="@_dataSource.QueryParameters.Keywords" OnSearch="_dataSource.QueryAsync"/>
                    </GridCol>
                </GridRow>
                <GridRow>
                    <GridCol Span="20" Offset="0">
                        <Space Wrap>
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Plus" OnClick="() => ShowEditNodeDeviceFormAsync()"></Button>
                            </SpaceItem>
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Reload" OnClick="_dataSource.QueryAsync"></Button>
                            </SpaceItem>
                                <SpaceItem>
                                    <DownloadButton Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Export" Url="/api/Nodes/List/Export" FileName="NodeList.xlsx" />
                                </SpaceItem>
                            <SpaceItem>
                                <Select DataSource="@_nodeSettings.IpAddressMappings"
                                        @bind-value="@_selectedAreaTag"
                                        TItem="StringEntry"
                                        Style="width:200px"
                                        TItemValue="string"
                                        OnSelectedItemChanged="OnSelectedAreaTag"
                                        DefaultActiveFirstOption
                                        LabelName="@nameof(StringEntry.Name)"
                                        ValueName="@nameof(StringEntry.Tag)"/>
                            </SpaceItem>
                            <SpaceItem>
                                <RadioGroup Value="_nodeStatus" ValueChanged="(NodeStatus nodeStatus) => OnNodeStatusChanged(nodeStatus)" Size="middle">
                                    <Radio RadioButton Value="@(NodeStatus.All)">全部</Radio>
                                    <Radio RadioButton Value="@(NodeStatus.Online)">
                                        <Badge Status="@(NodeStatus.Online.GetBadgeStatus())" Text="在线"/>
                                    </Radio>
                                    <Radio RadioButton Value="@(NodeStatus.Offline)">
                                        <Badge Status="@(NodeStatus.Offline.GetBadgeStatus())" Text="离线"/>
                                    </Radio>
                                </RadioGroup>
                            </SpaceItem>

                            <SpaceItem>
                                <RadioGroup Value="_nodeDeviceType" ValueChanged="(NodeDeviceType nodeDeviceType) => OnNodeDeviceTypeChanged(nodeDeviceType)" Size="middle">
                                    <Radio RadioButton Value="@(NodeDeviceType.All)">全部</Radio>
                                    <Radio RadioButton Value="@(NodeDeviceType.Computer)">
                                        <Icon Type="desktop" Theme="outline"/><Text>计算机</Text>
                                    </Radio>
                                    <Radio RadioButton Value="@(NodeDeviceType.NetworkDevice)">
                                        <Icon Type="cluster" Theme="outline"/><Text>设备</Text>
                                    </Radio>
                                </RadioGroup>
                            </SpaceItem>

                        </Space>
                    </GridCol>
                </GridRow>
            </TitleTemplate>
            <ColumnDefinitions>
                <PropertyColumn Title="标志" Sortable="true" Fixed="left" Width="100" Property="c => c.Id">
                    <Text Ellipsis Copyable Style="max-height:30px;display:flex;flex-direction:row">
                        <div style="overflow: hidden; white-space: nowrap;text-overflow: ellipsis;" title="@context.Id">@context.Id</div>
                    </Text>
                </PropertyColumn>
                <PropertyColumn Title="节点名称"
                                Fixed="left"
                                Sortable="true"
                                Width="200"
                                Property="c => c.Name">
                        <GridRow Wrap="false">
                            <GridCol Flex="@("12px")"><Badge Status="@(context.Status.GetBadgeStatus())"></Badge></GridCol>
                            <GridCol Flex=@("auto")>
                                @if (context.DeviceType == NodeDeviceType.Computer)
                                {
                                    <div>
                                        <Text Copyable Ellipsis><NavLink href="@("/Nodes/~/" + context.Id)"> @(context.Name ?? "名称加载失败")</NavLink></Text>
                                    </div>
                                }
                                else
                                {
                                    <Button Style="padding-left:0px;padding-right:0px;" Type="@ButtonType.Link" OnClick="() => ShowEditNodeDeviceFormAsync(context)">
                                        @context.Name
                                    </Button>
                                }

                            
                            </GridCol>
                        </GridRow>

                </PropertyColumn>
                <PropertyColumn Title="LIMS关联性" Sortable="true" Width="100" Property="c => c.Profile.FoundInLims">
                    <Switch Disabled Value="@context.Profile.FoundInLims"/>
                </PropertyColumn>
                <PropertyColumn Title="厂区" Sortable="true" Width="100" Property="c => c.Profile.FactoryName">
                    <Text>@_nodeSettings.IpAddressMappings.FirstOrDefault(x => x.Tag == context.Profile.FactoryName)?.Name</Text>
                </PropertyColumn>
                <PropertyColumn Title="状态" Sortable="true" Hidden Property="c => c.Status" DefaultSortOrder="SortDirection.Descending"/>
  
                <PropertyColumn
                    Title="更新时间"
                    Sortable="true"
                    Width="100"
                    DefaultSortOrder="SortDirection.Descending"
                    Property="c => c.Profile.ServerUpdateTimeUtc">
                    <Text>
                        @GetTimeDesc(context.Profile.ServerUpdateTimeUtc)
                    </Text>
                    @if (ShowTimeDiffWarning(context))
                    {
                        <Tooltip Title="@_timeDiffWarningMsg">
                            <Icon Type="warning" Theme="twotone" TwotoneColor="#ff4d4f" Height="1.5em" Width="1.5em"/>
                        </Tooltip>
                    }
                </PropertyColumn>
                <PropertyColumn Title="IP地址" Sortable="true" Ellipsis Width="120" Property="c => c.Profile.IpAddress">
                    <AntDesign.Tooltip Placement="@Placement.Left">
                        <TitleTemplate>
                            @if (context.PingReplyInfo != null)
                            {
                                <Text>延迟:@context.PingReplyInfo.RoundtripTime</Text>
                                <br/>
                                <Text>状态:@context.PingReplyInfo.Status</Text>
                                <br/>
                                <Text>时间:@context.PingReplyInfo.DateTime</Text>
                            }
                        </TitleTemplate>
                        <ChildContent>
                            @if (context.PingReplyInfo == null)
                            {
                                <Tag Icon="warning">
                                    <Text Copyable>@context.Profile.IpAddress</Text>
                                </Tag>
                            }
                            else if (context.PingReplyInfo.Status == System.Net.NetworkInformation.IPStatus.Success)
                            {
                                <Tag Icon="wifi">
                                    <Text Copyable>@context.Profile.IpAddress</Text>
                                </Tag>
                            }
                            else
                            {
                                <Tag Icon="disconnect">
                                    <Text Copyable>@context.Profile.IpAddress</Text>
                                </Tag>
                            }
                        </ChildContent>

                    </AntDesign.Tooltip>

                </PropertyColumn>
                <PropertyColumn Title="用途" Sortable="true" Property="c => c.Profile.Usages">
                    @(string.IsNullOrEmpty(context.Profile.Usages) ? "（空）" : context.Profile.Usages)
                </PropertyColumn>
                <PropertyColumn Title="备注" Sortable="true" Ellipsis Width="100" Property="c => c.Profile.Remarks">
                    @(string.IsNullOrEmpty(context.Profile.Remarks) ? "（空）" : context.Profile.Remarks)
                </PropertyColumn>

                <PropertyColumn Title="测试分类" Sortable="true" Ellipsis Width="100" Property="c => c.Profile.TestInfo"></PropertyColumn>
                <PropertyColumn Title="实验室区域" Sortable="true" Ellipsis Width="120" Property="c => c.Profile.LabArea"></PropertyColumn>
                <PropertyColumn Title="实验室名称" Sortable="true" Ellipsis Width="120" Property="c => c.Profile.LabName"></PropertyColumn>


                <ActionColumn Width="120" Fixed="right" Title="操作">
                    <Space Size=@("middle")>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Size="default" Type="@ButtonType.Primary" Icon="@IconType.Outline.Edit" OnClick="() => OpenModifyNodeInfoDrawer(context)"></Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Size="default" Type="@ButtonType.Primary" Danger Icon="@IconType.Outline.Delete" OnClick="() => DeleteNodeAsync(context)"></Button>
                        </SpaceItem>
                    </Space>
                </ActionColumn>
            </ColumnDefinitions>

        </Table>
    </GridCol>
</GridRow>
</GridContent>


@code{

    string _modalTitle;
    bool _editFormVisible;
    bool _editFormSubmitting;
    bool _editFormConfirmLoading;
    NodeInfoModel _editModel;
    TypographyEllipsisConfig _typographyEllipsisConfig;

    NodeStatus _nodeStatus = NodeStatus.All;
    NodeDeviceType _nodeDeviceType = NodeDeviceType.All;
    string _selectedAreaTag = "*";
    string _timeDiffWarningMsg;
    NodeSettings _nodeSettings = new();

    RoutedPaginationDataSource<NodeInfoModel, QueryNodeListParameters> _dataSource;

    IEnumerable<EnumModel<NodeDeviceType>> _nodeDeviceTypes;

    Form<NodeInfoModel> _editForm;

    bool _nodeInfoDrawerVisible;

    string? _modifyErrorMsg;

    UpdateNodeProfileModel? _editingNodeInfoModel;

    HostPortSettings _hostPortSettings = new();
    SerialPortSettings _serialPortSettings = new();

    string GetTimeDesc(DateTime dateTime)
    {
        if (dateTime == DateTime.MinValue)
        {
            return "未知";
        }

        var timeDiff = DateTime.UtcNow - dateTime;
        if (timeDiff.TotalDays >= 1)
        {
            return $"{(int)timeDiff.TotalDays}天前";
        }
        else if (timeDiff.TotalSeconds < 60)
        {
            return $"{(int)timeDiff.TotalSeconds}秒前";
        }
        else if (timeDiff.TotalMinutes < 60)
        {
            return $"{(int)timeDiff.TotalMinutes}分钟前";
        }
        else if (timeDiff.TotalHours < 24)
        {
            return $"{(int)timeDiff.TotalHours}小时前";
        }

        return dateTime.ToString();
    }

    string GetStatusIcon(NodeStatus nodeStatus)
    {
        switch (nodeStatus)
        {
            case NodeStatus.Offline:
                return BadgeStatus.Warning;
            case NodeStatus.Online:
                return BadgeStatus.Success;
            default:
                return BadgeStatus.Processing;
        }
    }

    bool ShowTimeDiffWarning(NodeInfoModel nodeInfo)
    {
        if (nodeInfo.Status != NodeStatus.Online)
        {
            return false;
        }

        var timeDiff = nodeInfo.Profile.ServerUpdateTimeUtc - nodeInfo.Profile.UpdateTime.ToUniversalTime();
        return Math.Abs(timeDiff.TotalSeconds) > _nodeSettings.TimeDiffWarningSeconds;
    }


    void OpenModifyNodeInfoDrawer(NodeInfoModel nodeInfo)
    {
        _modifyErrorMsg = null;
        _editingNodeInfoModel = new UpdateNodeProfileModel
        {
            NodeId = nodeInfo.Id,
            LabArea = nodeInfo.Profile.LabArea,
            LabName = nodeInfo.Profile.LabName,
            Remarks = nodeInfo.Profile.Remarks,
            TestInfo = nodeInfo.Profile.TestInfo,
            Usages = nodeInfo.Profile.Usages
        };
        _nodeInfoDrawerVisible = true;
    }

    void CloseModifyNodeInfoDrawer()
    {
        _modifyErrorMsg = null;
        _editingNodeInfoModel = null;
        _nodeInfoDrawerVisible = false;
    }

    async Task SubmitNodeProfileAsync()
    {
        try
        {
            var apiResponse = await ApiService.UpdateNodeProfileAsync(_editingNodeInfoModel);
            if (apiResponse.ErrorCode == 0)
            {
                _editingNodeInfoModel = null;
                _nodeInfoDrawerVisible = false;
                await _dataSource.QueryAsync();
            }
            else
            {
                _modifyErrorMsg = apiResponse.Message;
            }
        }
        catch (Exception ex)
        {
            _modifyErrorMsg = ex.Message;
        }
    }

    void OnRowClick(RowData<NodeInfoModel> row)
    {
    }

    async Task QueryNodeSettingsAsync()
    {
        try
        {
            var apiResponse = await ApiService.QueryNodeSettingsAsync();
            if (apiResponse.ErrorCode == 0)
            {
                _nodeSettings = apiResponse.Result;
                _timeDiffWarningMsg = $"服务器时间与节点时间差距大于{_nodeSettings.TimeDiffWarningSeconds}秒";
                if (_nodeSettings.IpAddressMappings != null)
                {
                    _selectedAreaTag = _nodeSettings.IpAddressMappings.FirstOrDefault()?.Tag ?? "*";
                }
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = apiResponse.Message
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = ex.ToString()
            });
        }
    }

    async Task OnNodeTableChanged(QueryModel<NodeInfoModel> query)
    {
        _dataSource.QueryParameters.SortDescriptions.Clear();
        foreach (var sortModel in query.SortModel)
        {
            if (sortModel.Sort == null)
            {
                continue;
            }

            _dataSource.QueryParameters.SortDescriptions.Add(new SortDescription(sortModel.FieldName, sortModel.Sort));
        }

        await _dataSource.RequestAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        _typographyEllipsisConfig = new TypographyEllipsisConfig()
            {
                Rows = 1,
            };
        _nodeDeviceTypes =
        [
            new EnumModel<NodeDeviceType>("网络设备", NodeDeviceType.NetworkDevice),
            new EnumModel<NodeDeviceType>("串口设备", NodeDeviceType.SerialPortDevice)
        ];
        _dataSource = new RoutedPaginationDataSource<NodeInfoModel, QueryNodeListParameters>(NavigationManager.BaseUri, ApiService.QueryNodeListAsync, StateHasChanged);
        _dataSource.QueryParameters.Status = NodeStatus.All;
        _dataSource.QueryParameters.AreaTag = "*";
        _dataSource.QueryParameters.PageIndex = 1;
        _dataSource.QueryParameters.PageSize = 10;
        _dataSource.ExceptionHandler = OnExepction;
        await QueryNodeSettingsAsync();
        await _dataSource.RequestAsync();
        await base.OnInitializedAsync();
    }

    async Task OnExepction(Exception ex)
    {
        await _notice.Open(new NotificationConfig
        {
            Message = "加载失败",
            Description = ex.ToString()
        });
    }


    public void Dispose()
    {
        _dataSource.Dispose();
    }

    async Task OnSelectedAreaTag(StringEntry entry)
    {
        _dataSource.PageIndex = 1;
        _dataSource.QueryParameters.AreaTag = entry.Tag;
        await _dataSource.RequestAsync();
    }

    async Task OnNodeStatusChanged(NodeStatus nodeStatus)
    {
        _nodeStatus = nodeStatus;
        _dataSource.PageIndex = 1;
        _dataSource.QueryParameters.Status = nodeStatus;
        await _dataSource.RequestAsync();
    }

    async Task OnNodeDeviceTypeChanged(NodeDeviceType nodeDeviceType)
    {
        _nodeDeviceType = nodeDeviceType;
        _dataSource.PageIndex = 1;
        _dataSource.QueryParameters.DeviceType = nodeDeviceType;
        await _dataSource.RequestAsync();
    }

    async Task DeleteNodeAsync(NodeInfoModel nodeInfo)
    {
        try
        {
            if (await ShowConfirmDialogAsync("删除确认", "确定要删除吗？") != ConfirmResult.OK)
            {
                return;
            }

            var rsp = await ApiService.RemoveAsync(nodeInfo);
            if (rsp.ErrorCode == 0)
            {
                await _message.Info("删除节点成功");
                await _dataSource.QueryAsync();
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "删除失败",
                    Description = rsp.Message
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "删除失败",
                Description = ex.ToString()
            });
        }
    }

    Task<ConfirmResult> ShowConfirmDialogAsync(string title, string content)
    {
        var options = new ConfirmButtonOptions
        {
            Button1Props = new ButtonProps
            {
                ChildContent = "确定",
                Type = ButtonType.Primary
            },
            Button2Props = new ButtonProps
            {
                ChildContent = "取消"
            }
        };
        return _confirmService.Show(
            content,
            title,
            ConfirmButtons.OKCancel,
            ConfirmIcon.Info,
            options);
    }

    async Task OnEditFormFinish(EditContext editContext)
    {
        try
        {
            _editModel.Properties.Remove("Settings", out _);
            switch (_editModel.DeviceType)
            {
                case NodeDeviceType.NetworkDevice:
                    _editModel.Properties.TryAdd("Settings", _hostPortSettings);
                    _hostPortSettings = new HostPortSettings();
                    break;
                case NodeDeviceType.SerialPortDevice:
                    _editModel.Properties.TryAdd("Settings", _serialPortSettings);

                    _serialPortSettings = new SerialPortSettings();
                    break;
            }

            var apiResponse = await ApiService.AddOrUpdateAsync(_editModel);
            if (apiResponse.ErrorCode == 0)
            {
                _editModel = null;
                _editFormVisible = false;
                await _dataSource.QueryAsync();
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = apiResponse.Message
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = ex.Message
            });
        }
        finally
        {
            _editFormSubmitting = false;
            _editFormConfirmLoading = false;
        }
    }

    void OnEditFormFinishFailed(EditContext editContext)
    {
        _editFormSubmitting = false;
        _editFormConfirmLoading = false;
    }

    void HandleEditFormCancel(MouseEventArgs e)
    {
        _editFormSubmitting = false;
        _editFormVisible = false;
    }


    void HandleEditFormOk(MouseEventArgs e)
    {
        _editFormSubmitting = true;
        _editForm.Submit();
    }

    Task ShowEditNodeDeviceFormAsync(NodeInfoModel nodeInfo = null)
    {
        _editFormVisible = true;
        if (nodeInfo == null)
        {
            _editModel = NodeInfoModel.Create(Guid.NewGuid().ToString(), "新建节点设备", NodeDeviceType.NetworkDevice);
            _modalTitle = "新建节点设备";
        }
        else
        {
            _editModel = nodeInfo;
            _modalTitle = "编辑节点设备";
            if (_editModel.Properties != null && _editModel.Properties.TryGetValue("Settings", out var value) && value is JsonElement jsonElement)
            {
                switch (_editModel.DeviceType)
                {
                    case NodeDeviceType.NetworkDevice:

                        _hostPortSettings = jsonElement.Deserialize<HostPortSettings>(new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });

                        break;
                    case NodeDeviceType.SerialPortDevice:
                        _serialPortSettings = jsonElement.Deserialize<SerialPortSettings>(new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
                        break;
                    default:
                        break;
                }
            }
        }

        return Task.CompletedTask;
    }

    void OnSelectedDeviceTypeChanged(NodeDeviceType nodeDeviceType)
    {
        _editModel.DeviceType = nodeDeviceType;
    }

}