@namespace NodeService.WebServer.UI.Pages.Nodes.List
@page "/nodes"

@inject ApiService ApiService;
@inject NotificationService _notice
@inject NavigationManager NavigationManager
@inject IMessageService _message
@inject NavigationManager NavigationManager
@implements IDisposable

<GridContent>
    <Drawer Closable="true" Width="320" Visible="nodeInfoDrawerVisible" Title='"修改节点信息"' OnClose="_ => CloseModifyNodeInfoDrawer()">
        <Template style="height:90%">
            @if (_editingNodeInfoModel == null)
            {
                <Row>
                    <AntDesign.Col Span="24">
                        <Alert>请选择一个节点</Alert>
                    </AntDesign.Col>
                </Row>
                <br/>
                <Row>
                    <AntDesign.Col Span="6">
                        <Button Type="default">取消</Button>
                    </AntDesign.Col>
                    <AntDesign.Col Span="6">
                        <Button Type="primary" OnClick="CloseModifyNodeInfoDrawer">提交</Button>
                    </AntDesign.Col>
                </Row>
            }
            else
            {
                @if (_modifyErrorMsg != null)
                {
                    <Row>
                        <AntDesign.Col Span="24">
                            <Alert Message="@_modifyErrorMsg" Type="@AlertType.Error"/>
                        </AntDesign.Col>
                    </Row>
                }

                <Row Gutter="24">
                    <AntDesign.Col Span="24">
                        <Text>测试分类</Text>
                        <Input @bind-Value="@_editingNodeInfoModel.TestInfo" Placeholder="请输入测试分类" TValue="string"></Input>
                    </AntDesign.Col>
                    <AntDesign.Col Span="24">
                        <Text>实验室区域</Text>
                        <Input @bind-Value="@_editingNodeInfoModel.LabArea" Placeholder="请输入实验室区域" TValue="string"/>
                    </AntDesign.Col>
                    <AntDesign.Col Span="24">
                        <Text>实验室名称</Text>
                        <Input @bind-Value="@_editingNodeInfoModel.LabName" Placeholder="请输入实验室名称" TValue="string"/>
                    </AntDesign.Col>
                </Row>
                <br/>
                <AntDesign.Col Span="24">
                    <Text>用途</Text>
                    <Input @bind-Value="@_editingNodeInfoModel.Usages" Placeholder="请输入用途" TValue="string"/>
                </AntDesign.Col>
                <Row>
                    <AntDesign.Col Span="24">
                        <Text>备注</Text>
                        <TextArea @bind-Value="@_editingNodeInfoModel.Remarks" Placeholder="请输入备注"></TextArea>
                    </AntDesign.Col>
                </Row>
                <br/>
                <Row>
                    <AntDesign.Col Span="6">
                        <Button Type="default" OnClick="CloseModifyNodeInfoDrawer">取消</Button>
                    </AntDesign.Col>
                    <AntDesign.Col Span="6">
                        <Button Type="primary" OnClick="SubmitNodeInfoAsync">提交</Button>
                    </AntDesign.Col>
                </Row>
            }

        </Template>
    </Drawer>
    <Modal Width="800"
           Title="节点配置"
           @bind-Visible="@_editFormVisible"
           ConfirmLoading="@_editFormConfirmLoading"
           OnOk="@HandleEditFormOk"
           OnCancel="@HandleEditFormCancel">
        <Form Model="@_nodeSettings" Size="@AntSizeLDSType.Default"
              LabelColSpan="4"
              Layout="@FormLayout.Horizontal"
              WrapperColSpan="20"
              OnFinish="OnEditFormFinish"
              OnFinishFailed="OnEditFormFinishFailed"
              @ref="@_editForm">
            <FormItem Label="IP地址区域映射">
                <StringEntryTable
                    ValueTitle="Ip范围"
                    NameTitle="区域名称"
                    IsTagHidden="false"
                    IsTagEditable="true"
                    TagTitle="代码"
                    ItemsSource="@context.IpAddressMappings"/>
            </FormItem>
            <FormItem Label="进程用途映射">
                <StringEntryTable
                    ValueTitle="用途"
                    NameTitle="进程名称"
                    ItemsSource="@context.ProcessUsagesMapping"/>
            </FormItem>

        </Form>
    </Modal>
    <GridRow Gutter="(8, 0)">
        <GridCol Span="24">
            <Table Loading="@_dataSource.IsLoading"
                   @ref="_table"
                   Size="TableSize.Small"
                   EnableVirtualization="false"
                   OnChange="OnNodeTableChanged"
                   TItem="NodeInfoModel"
                   PageIndex="@_dataSource.PageIndex"
                   PageSize="@_dataSource.PageSize"
                   Total="@_dataSource.TotalCount"
                   OnPageIndexChange="@_dataSource.OnPaginationEvent"
                   OnPageSizeChange="@_dataSource.OnPaginationEvent"
                   DataSource="@_dataSource.ItemsSource"

                   OnRowClick="OnRowClick">
                <TitleTemplate>
                    <GridRow>
                        <GridCol Span="4">
                            <Title Level="3">节点列表</Title>
                        </GridCol>
                        <GridCol Span="20" Offset="0">
                            <Space>
                                <SpaceItem>
                                    <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Reload" OnClick="QueryNodeListAsync"></Button>
                                </SpaceItem>
                                <SpaceItem>
                                    <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Setting" OnClick="ShowNodeSettingsModalAsync"></Button>

                                </SpaceItem>
                                <SpaceItem>
                                    <Select DataSource="@_nodeSettings.IpAddressMappings"
                                            @bind-value="@_selectedAreaTag"
                                            TItem="StringEntry"
                                            Style="width:200px"
                                            TItemValue="string"
                                            OnSelectedItemChanged="OnSelectedAreaTag"
                                            DefaultActiveFirstOption
                                            LabelName="@nameof(StringEntry.Name)"
                                            ValueName="@nameof(StringEntry.Tag)"/>
                                </SpaceItem>
                                <SpaceItem>
                                    <RadioGroup Value="_nodeStatus" ValueChanged="(NodeStatus nodeStatus) => OnNodeStatusChanged(nodeStatus)" Size="middle">
                                        <Radio RadioButton Value="@(NodeStatus.All)">全部</Radio>
                                        <Radio RadioButton Value="@(NodeStatus.Online)">在线</Radio>
                                        <Radio RadioButton Value="@(NodeStatus.Offline)">离线</Radio>
                                    </RadioGroup>
                                </SpaceItem>
                                <SpaceItem>
                                    <Search Style="width:200px" Placeholder="搜索节点" @bind-Value="@_keywords" OnSearch="OnKeywordsChanged"/>
                                </SpaceItem>
                            </Space>
                        </GridCol>
                    </GridRow>
                </TitleTemplate>
                <ColumnDefinitions>
                    <PropertyColumn Title="厂区" Filters="areaNameFilters" OnFilter="(name, value) => OnFilterAreaTag(value, name)" Sortable="true" Filterable="true" Property="c => c.Profile.FactoryName">
                        <Text>@_nodeSettings.IpAddressMappings.FirstOrDefault(x => x.Tag == context.Profile.FactoryName)?.Name</Text>
                    </PropertyColumn>
                    <PropertyColumn Title="状态" Sortable="true" Hidden SorterMultiple="0" SorterCompare="(a, b) => a - b" Property="c => c.Status" DefaultSortOrder="SortDirection.Descending"/>
                    <PropertyColumn Title="节点名称" Sortable="true" SorterMultiple="2" SorterCompare="(a, b) => StringComparer.Ordinal.Compare(a, b)" Property="c => c.Name" DefaultSortOrder="SortDirection.Descending">
                        @switch (context.Status)
                        {
                            case NodeStatus.Online:
                                <Badge Style="margin-right:10px" Status="@BadgeStatus.Success"></Badge>
                                break;
                            case NodeStatus.Offline:
                                <Badge Style="margin-right:10px" Status="@BadgeStatus.Warning"></Badge>
                                break;
                            case NodeStatus.NotConfigured:
                                <Badge Style="margin-right:10px" Status="@BadgeStatus.Error"></Badge>
                                break;
                        }
                        <NavLink href="@("/nodes/" + context.Id)">@context.Name</NavLink>
                    </PropertyColumn>
                    <PropertyColumn Title="最后在线时间" Sortable="true" SorterMultiple="1" SorterCompare="(a, b) => a.CompareTo(b)" Format="@NodePropertyModel.DateTimeFormatString" Property="c => c.Profile.ServerUpdateTimeUtc"></PropertyColumn><PropertyColumn Title="测试分类" Sortable="true" Property="c => c.Profile.TestInfo"></PropertyColumn>
                    <PropertyColumn Title="实验室区域" Sortable="true" Property="c => c.Profile.LabArea"></PropertyColumn>
                    <PropertyColumn Title="实验室名称" Sortable="true" Property="c => c.Profile.LabName"></PropertyColumn>

                    <PropertyColumn Title="用途" Sortable="true" Property="c => c.Profile.Usages">
                        <Tag>@(string.IsNullOrEmpty(context.Profile.Usages) ? "（空）" : context.Profile.Usages)</Tag>
                    </PropertyColumn>
                    <PropertyColumn Title="备注" Sortable="true" Property="c => c.Profile.Remarks">
                        <Tag>@(string.IsNullOrEmpty(context.Profile.Remarks) ? "（空）" : context.Profile.Remarks)</Tag>
                    </PropertyColumn>
                    <PropertyColumn Title="IP地址" Sortable="true" Property="c => c.Profile.IpAddress">
                        <Tag>@context.Profile.IpAddress</Tag>
                    </PropertyColumn>
                    <ActionColumn Fixed="right" Title="操作">
                        <Space Size=@("middle")>
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Edit" OnClick="() => OpenModifyNodeInfoDrawer(context)"></Button>
                            </SpaceItem>
                        </Space>
                    </ActionColumn>
                </ColumnDefinitions>

            </Table>
        </GridCol>
    </GridRow>
</GridContent>


@code{
    ITable _table;
    string? _keywords;

    bool _editFormVisible;
    bool _editFormSubmitting;
    bool _editFormConfirmLoading;

    NodeStatus _nodeStatus = NodeStatus.All;
    string _selectedAreaTag = "*";


    public List<TableFilter<string?>> areaNameFilters = [];


    RoutedPaginationDataSource<NodeInfoModel, QueryNodeListParameters> _dataSource;


    NodeSettings _nodeSettings = new();

    Form<NodeSettings> _editForm;

    bool nodeInfoDrawerVisible;

    string? _modifyErrorMsg;

    UpdateNodeProfileModel? _editingNodeInfoModel;


    void OpenModifyNodeInfoDrawer(NodeInfoModel nodeInfo)
    {
        _editingNodeInfoModel = new UpdateNodeProfileModel
        {
            NodeId = nodeInfo.Id,
            LabArea = nodeInfo.Profile.LabArea,
            LabName = nodeInfo.Profile.LabName,
            Remarks = nodeInfo.Profile.Remarks,
            TestInfo = nodeInfo.Profile.TestInfo,
            Usages = nodeInfo.Profile.Usages
        };
        nodeInfoDrawerVisible = true;
    }

    void CloseModifyNodeInfoDrawer()
    {
        _modifyErrorMsg = null;
        _editingNodeInfoModel = null;
        nodeInfoDrawerVisible = false;
    }

    async Task ShowNodeSettingsModalAsync()
    {
        _editFormVisible = true;
        await QueryNodeSettingsAsync();
    }


    async Task SubmitNodeInfoAsync()
    {
        try
        {
            var apiResponse = await ApiService.UpdateNodeProfileAsync(_editingNodeInfoModel);
            if (apiResponse.ErrorCode == 0)
            {
                _editingNodeInfoModel = null;
                nodeInfoDrawerVisible = false;
                await QueryNodeListAsync();
            }
            else
            {
                _modifyErrorMsg = apiResponse.Message;
            }
        }
        catch (Exception ex)
        {
            _modifyErrorMsg = ex.Message;
        }
    }

    void HandleEditFormCancel(MouseEventArgs e)
    {
        _editFormSubmitting = false;
        _editFormVisible = false;
    }


    void HandleEditFormOk(MouseEventArgs e)
    {
        _editFormSubmitting = true;
        _editForm.Submit();
    }

    async Task QueryNodeSettingsAsync()
    {
        try
        {
            var apiResponse = await ApiService.QueryNodeSettingsAsync();
            if (apiResponse.ErrorCode == 0)
            {
                _nodeSettings = apiResponse.Result;
                if (_nodeSettings.IpAddressMappings != null)
                {
                    areaNameFilters.Clear();
                    foreach (var item in _nodeSettings.IpAddressMappings)
                    {
                        areaNameFilters.Add(new TableFilter<string?>
                        {
                            Selected = item.Tag == "*",
                            Text = item.Name,
                            Value = item.Tag
                        });
                    }

                    _selectedAreaTag = _nodeSettings.IpAddressMappings.FirstOrDefault().Tag;
                    if (_table != null)
                    {
                        await InvokeAsync(_table.ReloadData);
                    }
                }
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = apiResponse.Message
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = ex.ToString()
            });
        }
    }


    async Task OnEditFormFinish(EditContext editContext)
    {
        try
        {
            var apiResponse = await ApiService.UpdateNodeSettingsAsync(_nodeSettings);
            if (apiResponse.ErrorCode == 0)
            {
                await QueryNodeSettingsAsync();
                _editFormVisible = false;
                await _message.Info("更新节点设置成功");
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = apiResponse.Message
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = ex.Message
            });
        }
        finally
        {
            _editFormSubmitting = false;
            _editFormConfirmLoading = false;
        }
    }

    void OnEditFormFinishFailed(EditContext editContext)
    {
        _editFormSubmitting = false;
        _editFormConfirmLoading = false;
    }

    void OnNodeNameChanged(MouseEventArgs e)
    {
    }

    void OnSelectedFactoryNameChanged(string value)
    {
    }

    bool OnFilterAreaTag(string value, string name)
    {
        if (name == "*")
        {
            return true;
        }

        return name == value;
    }

    void OnRowClick(RowData<NodeInfoModel> row)
    {
    }

    async Task RefreshAsync()
    {
        await QueryNodeSettingsAsync();
        await QueryNodeListAsync();
    }

    async Task QueryNodeListAsync()
    {
        try
        {
            await _dataSource.RefreshAsync();
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "加载失败",
                Description = ex.Message
            });
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await RefreshAsync();
    }

    void OnNodeTableChanged(QueryModel<NodeInfoModel> query)
    {
        _dataSource.QueryParameters.SortDescriptions.Clear();
        foreach (var sortModel in query.SortModel)
        {
            if (sortModel.Sort == null)
            {
                continue;
            }

            _dataSource.QueryParameters.SortDescriptions.Add(new SortDescription(sortModel.FieldName, sortModel.Sort));
        }

        _dataSource.Request();
    }

    void OnKeywordsChanged(string keywords)
    {
        _dataSource.PageIndex = 1;
        _dataSource.QueryParameters.Keywords = _keywords;
        _dataSource.Request();
    }

    protected override void OnInitialized()
    {
        _dataSource = new RoutedPaginationDataSource<NodeInfoModel, QueryNodeListParameters>(NavigationManager, ApiService.QueryNodeListAsync, StateHasChanged);
        _dataSource.QueryParameters.Status = NodeStatus.All;
        _dataSource.QueryParameters.AreaTag = "*";
        base.OnInitialized();
    }

    public void Dispose()
    {
        _dataSource.Dispose();
    }

    void OnSelectedAreaTag(StringEntry entry)
    {
        _dataSource.PageIndex = 1;
        _dataSource.QueryParameters.AreaTag = entry.Tag;
        _dataSource.Request();
    }

    void OnNodeStatusChanged(NodeStatus nodeStatus)
    {
        _nodeStatus = nodeStatus;
        _dataSource.PageIndex = 1;
        _dataSource.QueryParameters.Status = nodeStatus;
        _dataSource.Request();
    }

}