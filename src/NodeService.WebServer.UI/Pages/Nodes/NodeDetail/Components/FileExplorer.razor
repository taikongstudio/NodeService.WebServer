@inject NotificationService _notice
@inject FileSystem.FileSystemClient FileSystemClient
@using NodeService.Infrastructure.Services
@using Environment = Environment
@implements IDisposable

@inject NavigationManager NavigationManager

<GridContent>
    <GridRow Gutter="(8, 0)">
        <GridCol Flex=@("100px")>
            <Space>
                <SpaceItem>
                    <Button OnClick="GoHome">
                        <Icon Type="home" Theme="outline"/>
                    </Button>
                </SpaceItem>
            </Space>
        </GridCol>
    </GridRow>
    <GridRow>
        <GridCol Span="24">
            <Table Title="驱动器" DataSource="@_fileSystemDrives"
                   Size="TableSize.Small"
                   EnableVirtualization="true"
                   Loading="_driveLoading">
                <PropertyColumn Title="卷" Property="c => c.VolumeLabel"/>
                <PropertyColumn Title="名称" Property="c => c.Name">
                    <Button OnClick="() => NavigateAsync(context.RootDirectory)" Type="@ButtonType.Link">@context.Name</Button>
                </PropertyColumn>
                <PropertyColumn Title="容量" Property="c => c.TotalSize"/>
                <PropertyColumn Title="全部可用" Property="c => c.TotalFreeSpace"/>
                <PropertyColumn Title="剩余可用" Property="c => c.AvailableFreeSpace"/>
                <PropertyColumn Title="类型" Property="c => c.DriveType"/>
                <PropertyColumn Title="格式" Property="c => c.DriveFormat"/>
                <PropertyColumn Title="联机" Property="c => c.IsReady"/>
                <ActionColumn Fixed="right" Title="操作">
                    <Space Size=@("middle")>
                        <SpaceItem>
                            @*        <Button OnClick="()=>DeleteFileAsync(context.FullName)" Type="@ButtonType.Link">删除</Button>
                            *@
                        </SpaceItem>
                        <SpaceItem>
                            @*         <Button OnClick="()=>MoveFileAsync(context.FullName)" Type="@ButtonType.Link">移动</Button>
                            *@
                        </SpaceItem>
                    </Space>
                </ActionColumn>
            </Table>
        </GridCol>
    </GridRow>
    <GridRow Gutter="(8, 0)">
        <GridContent>
            <GridRow>
                <GridCol>

                </GridCol>
            </GridRow>
            <GridRow>
                <GridCol Span="24">
                    <Table Size="TableSize.Small" Title="操作队列" TItem="FileSystemOperationProgress" DataSource="@_progressList">
                        <PropertyColumn Title="文件名称" Property="c => c.FullName"></PropertyColumn>
                        <PropertyColumn Title="状态" Property="c => c.State"></PropertyColumn>
                        <PropertyColumn Title="进度" Property="c => c.Progress" Format="P2"></PropertyColumn>
                        <PropertyColumn Title="消息" Property="c => c.Message"></PropertyColumn>
                        <ActionColumn Fixed="right" Title="操作">
                            <Space Size=@("middle")>
                                <SpaceItem>
                                    @if (context.Properties.TryGetValue("DownloadUrl", out var downloaUrl))
                                    {
                                        <a target="_blank" href="@downloaUrl">下载</a>
                                    }
                                </SpaceItem>
                            </Space>
                        </ActionColumn>
                    </Table>
                </GridCol>
            </GridRow>
        </GridContent>
    </GridRow>
    <GridRow Gutter="(8, 0)">
        <GridCol Flex=@("100px")>
            <Space>
                <SpaceItem>
                    <Button OnClick="GoHome">
                        <Icon Type="home" Theme="outline"/>
                    </Button>
                </SpaceItem>
                <SpaceItem>
                    <Button OnClick="GoBack">
                        <Icon Type="arrow-left" Theme="outline"/>
                    </Button>
                </SpaceItem>
                <SpaceItem>
                    <Button OnClick="GoForward">
                        <Icon Type="arrow-right" Theme="outline"/>
                    </Button>
                </SpaceItem>
            </Space>
        </GridCol>
        <GridCol Flex=@("auto")>
            <Input @bind-Value="_currentDirectory" OnPressEnter="() => NavigateAsync(_currentDirectory)"/>
        </GridCol>
        <GridCol Flex=@("35px")>
            <Space>
                <SpaceItem>
                    <Button OnClick="() => NavigateAsync(_currentDirectory)">前往</Button>
                </SpaceItem>
            </Space>
        </GridCol>
    </GridRow>
    <GridRow>
        <GridCol Span="24">
            <Table Title="文件浏览器" DataSource="@_fileSystemObjects"
                   Size="TableSize.Small"
                   PageSize="20"
                   EnableVirtualization="true"
                   Loading="_directoryLoading">
                <PropertyColumn Title="名称" Property="c => c.Name">
                    <Button OnClick="() => NavigateAsync(context.FullName)" Type="@ButtonType.Link">@context.Name</Button>
                </PropertyColumn>
                <PropertyColumn Title="修改时间" Property="c => c.LastWriteTime">
                    @context.LastWriteTime.ToDateTime().ToString("yyyy/MM/dd HH:mm:ss")
                </PropertyColumn>
                <PropertyColumn Title="创建时间" Property="c => c.CreationTime" Format="YYYY/MM/dd hh:mm:ss">
                    @context.CreationTime.ToDateTime().ToString("yyyy/MM/dd HH:mm:ss")
                </PropertyColumn>
                <PropertyColumn Title="类型" Property="c => c.Type"/>
                <PropertyColumn Title="大小" Property="c => c.Length"/>
                <ActionColumn Fixed="right" Title="操作">
                    <Space Size=@("middle")>
                        @*                             @if (!context.Type.Contains("Directory"))
                                {
                                    <SpaceItem>
                                        <Button OnClick="()=>DownloadAsync(context.FullName)" Type="@ButtonType.Link">下载</Button>
                                    </SpaceItem>
                                } *@
                        @*            <SpaceItem>
                                    <Button OnClick="()=>DeleteAsync(context.FullName)" Type="@ButtonType.Link">删除</Button>
                                </SpaceItem>
                                <SpaceItem>
                                    <Button OnClick="()=>MoveAsync(context.FullName)" Type="@ButtonType.Link">移动</Button>
                                </SpaceItem> *@
                    </Space>
                </ActionColumn>
            </Table>
        </GridCol>
    </GridRow>
</GridContent>

@code {

    Timer _refreshReportsTimer = new(TimeSpan.FromSeconds(1));

    List<string> bulkOperationRequestIdList = new();

    List<FileSystemOperationProgress> _progressList = new();

    IEnumerable<FileSystemObject> _fileSystemObjects;
    IEnumerable<FileSystemDriveInfo> _fileSystemDrives;

    string _currentDirectory = null;

    bool _driveLoading;

    bool _directoryLoading;

    Stack<string> _backStack = new();
    Stack<string> _forwardStack = new();

    [Parameter] public string? NodeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _refreshReportsTimer.Elapsed += TimerCallback;
        _refreshReportsTimer.Start();
        await ListDriveAsync();
        var firstDrive = _fileSystemDrives.FirstOrDefault();
        if (firstDrive != null)
        {
            _currentDirectory = firstDrive.RootDirectory;
            await NavigateAsync(_currentDirectory);
        }
    }

    void TimerCallback(object? sender, EventArgs e)
    {
        _ = InvokeAsync(QueryBulkOperationReportAsync);
    }


    async void GoHome()
    {
        _currentDirectory = "/";
        await ListDirectoryAsync(_currentDirectory);
    }

    async void GoBack()
    {
        if (_backStack.Count > 0)
        {
            _forwardStack.Push(_currentDirectory);
            _currentDirectory = _backStack.Pop();
            await ListDirectoryAsync(_currentDirectory);
        }
    }

    async void GoForward()
    {
        if (_forwardStack.Count > 0)
        {
            _backStack.Push(_currentDirectory);
            _currentDirectory = _forwardStack.Pop();
            await ListDirectoryAsync(_currentDirectory);
        }

        await ListDirectoryAsync(_currentDirectory);
    }


    async Task QueryBulkOperationReportAsync()
    {
        if (bulkOperationRequestIdList.Count == 0)
        {
            _refreshReportsTimer.Stop();
        }
        else
        {
            _refreshReportsTimer.Start();
        }

        foreach (var requestId in bulkOperationRequestIdList.ToArray())
        {
            try
            {
                var rsp = await FileSystemClient.QueryBulkOperationReportAsync(new FileSystemQueryBulkOperationReportRequest
                {
                    RequestId = Guid.NewGuid().ToString(),
                    OriginalRequestId = requestId,
                    Timeout = TimeSpan.FromSeconds(60)
                });
                if (rsp.ErrorCode == 0)
                {
                    if (rsp.Reports.Count == 0)
                    {
                        continue;
                    }

                    var lastReport = rsp.Reports.LastOrDefault();
                    foreach (var item in lastReport.Progresses)
                    {
                        item.Properties.TryAdd("OriginalRequestId", rsp.OriginalRequestId);
                        var progress = _progressList.FirstOrDefault(x =>
                            x.Properties.TryGetValue("OriginalRequestId", out var originalRequestId) && originalRequestId == requestId);
                        if (progress == null)
                        {
                            _progressList.Add(item);
                        }
                        else
                        {
                            var index = _progressList.IndexOf(progress);
                            _progressList[index] = item;
                        }
                    }

                    if (lastReport.State == FileSystemOperationState.Finished || lastReport.State == FileSystemOperationState.Failed)
                    {
                        bulkOperationRequestIdList.Remove(requestId);
                    }
                }
            }
            catch (Exception ex)
            {
            }
        }

        StateHasChanged();
    }

    async Task NavigateAsync(string url)
    {
        if (_currentDirectory != null)
        {
            _backStack.Push(_currentDirectory);
            _forwardStack.Clear();
        }

        _currentDirectory = url;
        await ListDirectoryAsync(_currentDirectory);
    }

    async void DeleteAsync(string fileName)
    {
    }

    async void DownloadAsync(string fileName)
    {
        try
        {
            var requestId = Guid.NewGuid().ToString();
            var req = new FileSystemBulkOperationRequest
            {
                Operation = FileSystemOperation.Open,
                RequestId = requestId
            };
            req.PathList.Add(fileName);
            var rsp = await FileSystemClient.BulkOperaionAsync(req);
            if (rsp.ErrorCode == 0)
            {
                bulkOperationRequestIdList.Add(requestId);
                _refreshReportsTimer.Start();
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "加载失败",
                    Description = $"错误代码:{rsp.ErrorCode}{Environment.NewLine}错误消息:{rsp.Message}"
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "加载失败",
                Description = $"错误代码:{ex.HResult}{Environment.NewLine}错误消息:{ex.Message}"
            });
        }
    }

    async void MoveAsync(string fileName)
    {
    }

    async Task ListDirectoryAsync(string directory)
    {
        try
        {
            _directoryLoading = true;
            var rsp = await FileSystemClient.ListDirectoryAsync(new FileSystemListDirectoryRequest
            {
                RequestId = Guid.NewGuid().ToString(),
                IncludeSubDirectories = false,
                Directory = directory,
                Timeout = TimeSpan.FromSeconds(60)
            });
            _directoryLoading = false;
            if (rsp.ErrorCode == 0)
            {
                _fileSystemObjects = rsp.FileSystemObjects;
                StateHasChanged();
            }
            else
            {
                _fileSystemObjects = Array.Empty<FileSystemObject>();
                await _notice.Open(new NotificationConfig
                {
                    Message = "加载失败",
                    Description = $"错误代码:{rsp.ErrorCode}{Environment.NewLine}错误消息:{rsp.Message}"
                });
            }
        }
        catch (Exception ex)
        {
            _fileSystemObjects = Array.Empty<FileSystemObject>();
            await _notice.Open(new NotificationConfig
            {
                Message = "加载失败",
                Description = $"错误代码:{ex.HResult}{Environment.NewLine}错误消息:{ex.Message}"
            });
        }
    }

    async Task ListDriveAsync()
    {
        try
        {
            _driveLoading = true;
            var rsp = await FileSystemClient.ListDriveAsync(new FileSystemListDriveRequest
            {
                RequestId = Guid.NewGuid().ToString(),
                Timeout = TimeSpan.FromSeconds(60)
            });
            _driveLoading = false;
            if (rsp.ErrorCode == 0)
            {
                _fileSystemDrives = rsp.Drives.ToArray();
                StateHasChanged();
            }
            else
            {
                _fileSystemDrives = Array.Empty<FileSystemDriveInfo>();
                await _notice.Open(new NotificationConfig
                {
                    Message = "加载失败",
                    Description = $"错误代码:{rsp.ErrorCode}{Environment.NewLine}错误消息:{rsp.Message}"
                });
            }
        }
        catch (Exception ex)
        {
            _fileSystemDrives = Array.Empty<FileSystemDriveInfo>();
            await _notice.Open(new NotificationConfig
            {
                Message = "加载失败",
                Description = $"错误代码:{ex.HResult}{Environment.NewLine}错误消息:{ex.Message}"
            });
        }
    }


    public void Dispose()
    {
        _refreshReportsTimer.Dispose();
    }

}