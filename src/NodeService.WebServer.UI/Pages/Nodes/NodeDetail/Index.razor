@namespace NodeService.WebServer.UI.Pages.Nodes.NodeDetail
@page "/Nodes/~/{nodeId}"
@using NodeService.WebServer.UI.Pages.Nodes.NodeDetail.Components
@inject ApiService ApiService
@inject NotificationService _notice
@inject NavigationManager NavigationManager

<PageTitle>@NodeInfo</PageTitle>

<GridContent>
    <GridCol Span="24">
        <PageHeader
            Class="site-page-header"
            Title="@($"{NodeInfo.Name} {_nodePropertySnapshot.CreationDateTime}")"
            OnBack="GoBackNodesHomePage"/>
        <Tabs DefaultActiveKey="1">
            <TabPane Key="1">
                <TabTemplate>
                    <span><Icon Type="file"/>基本信息</span>
                </TabTemplate>
                <ChildContent>
                    <BasicInformation NodeProperties="@_nodeProperties"/>
                </ChildContent>
            </TabPane>
            <TabPane Key="2">
                <TabTemplate>
                    <span><Icon Type="file"/>环境变量</span>
                </TabTemplate>
                <ChildContent>
                    <EnvironmentVariableList EnvironmentVariables="@_nodeProperties.EnvironmentVariables"/>
                </ChildContent>
            </TabPane>
            <TabPane Key="3">
                <TabTemplate>
                    <span><Icon Type="file"/>网络接口</span>
                </TabTemplate>
                <ChildContent>
                    <NetworkInterfaceList NetworkInterfaces="@_nodeProperties.NetworkInterfaces"/>
                </ChildContent>
            </TabPane>
            <TabPane Key="4">
                <TabTemplate>
                    <span><Icon Type="file"/>进程列表</span>
                </TabTemplate>
                <ChildContent>
                    <ProcessList Processes="@_nodeProperties.Processes"/>
                </ChildContent>

            </TabPane>
            <TabPane Key="5">
                <TabTemplate>
                    <span><Icon Type="file"/>服务</span>
                </TabTemplate>
                <ChildContent>
                    <Win32ServiceProcessList Win32Services="@_nodeProperties.Win32Services"/>
                </ChildContent>

            </TabPane>
            <TabPane Key="6">
                <TabTemplate>
                    <span><Icon Type="file"/>文件浏览器</span>
                </TabTemplate>
                <ChildContent>
                    <FileExplorer NodeId="@NodeId"/>
                </ChildContent>
            </TabPane>
            <TabPane Key="7">
                <TabTemplate>
                    <span><Icon Type="code"/>配置</span>
                </TabTemplate>
                <ChildContent>Tab 1</ChildContent>
            </TabPane>
            <TabPane Key="8">
                <TabTemplate>
                    <span><Icon Type="code"/>终端</span>
                </TabTemplate>
                <ChildContent>Tab 1</ChildContent>
            </TabPane>
        </Tabs>
    </GridCol>
</GridContent>

@code{
    [Parameter] public string? NodeId { get; set; }

    NodePropertyModel _nodeProperties;
    NodePropertySnapshotModel _nodePropertySnapshot = new();
    NodeInfoModel NodeInfo = new();

    protected override async Task OnInitializedAsync()
    {
        _nodeProperties = NodePropertyModel.FromNodePropertyItems(null);
        await QueryNodeInfoAsync();
        await QueryNodePropsAsync();
        await base.OnInitializedAsync();
    }

    protected async Task QueryNodeInfoAsync()
    {
        try
        {
            var apiResponse = await ApiService.QueryNodeInfoAsync(NodeId);
            if (apiResponse.ErrorCode == 0)
            {
                NodeInfo = apiResponse.Result;
            }
            else
            {
                
                _nodePropertySnapshot = new NodePropertySnapshotModel();
                _nodeProperties = NodePropertyModel.FromNodePropertyItems(null);
                await _notice.Open(new NotificationConfig
                {
                    Message = "加载失败",
                    Description = apiResponse.Message
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "加载失败",
                Description = $"{ex}"
            });
        }
    }

    void GoBackNodesHomePage()
    {
        NavigationManager.NavigateTo("/Nodes");
    }

    async Task QueryNodePropsAsync()
    {
        try
        {
            var apiResponse = await ApiService.QueryNodePropsAsync(NodeId);
            if (apiResponse.ErrorCode == 0)
            {
                _nodePropertySnapshot = apiResponse.Result;
                if (_nodePropertySnapshot == null)
                {
                    _nodePropertySnapshot = new NodePropertySnapshotModel();
                }

                _nodeProperties = NodePropertyModel.FromNodePropertyItems(_nodePropertySnapshot.NodeProperties);
            }
            else
            {
                _nodePropertySnapshot = new NodePropertySnapshotModel();
                _nodeProperties = NodePropertyModel.FromNodePropertyItems(null);
                await _notice.Open(new NotificationConfig
                {
                    Message = "加载失败",
                    Description = $"错误代码:{apiResponse.ErrorCode},消息:{apiResponse.Message}"
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "加载失败",
                Description = $"{ex}"
            });
        }
    }

    void OnProcessClick(string icon)
    {
    }


}