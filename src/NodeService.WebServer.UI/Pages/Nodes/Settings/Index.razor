@namespace NodeService.WebServer.UI.Pages.Nodes.Settings
@page "/Nodes/Settings"
@inject ApiService ApiService;
@inject IMessageService _message
@inject NotificationService _notice
<GridContent>
    <Space>
        <SpaceItem>
            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Reload" OnClick="QueryNodeSettingsAsync"></Button>
        </SpaceItem>
        <SpaceItem>
            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Save" OnClick="SaveAsync"></Button>

        </SpaceItem>
    </Space>
    <Tabs>
        <TabPane Tab="基础设置" Key="1">
            <Form Model="@_nodeSettings" Size="@AntSizeLDSType.Default"
                  LabelColSpan="4"
                  Layout="@FormLayout.Horizontal"
                  WrapperColSpan="20">
                <FormItem Label="时间差异警告阈值（秒）">
                    <AntDesign.InputNumber Style="width:200px" Min="0" @bind-Value="@context.TimeDiffWarningSeconds"/>
                </FormItem>
            </Form>
        </TabPane>
        <TabPane Tab="区域设置" Key="2">
            <StringEntryTable ValueTitle="Ip范围"
                              NameTitle="区域名称"
                              IsTagHidden="false"
                              IsTagEditable="true"
                              TagTitle="代码"
                              ItemsSource="@_nodeSettings.IpAddressMappings"/>
       <StringEntryTable ValueTitle="用途"
                            NameTitle="进程名称"
                            ItemsSource="@_nodeSettings.ProcessUsagesMapping"/>
        </TabPane>
        <TabPane Tab="进程用途映射" Key="3">
            <StringEntryTable ValueTitle="用途"
                              NameTitle="进程名称"
                              ItemsSource="@_nodeSettings.ProcessUsagesMapping"/>
        </TabPane>
                <TabPane Tab="区域站点映射" Key="4">
       <StringEntryTable ValueTitle="站点"
                            NameTitle="区域"
                            ItemsSource="@_nodeSettings.NodeSiteMapping"/>
        </TabPane>
    </Tabs>

</GridContent>

@code {
    NodeSettings _nodeSettings = new();

    protected override async Task OnInitializedAsync()
    {
        await QueryNodeSettingsAsync();
        await base.OnInitializedAsync();
    }

    async Task QueryNodeSettingsAsync()
    {
        try
        {
            var apiResponse = await ApiService.QueryNodeSettingsAsync();
            if (apiResponse.ErrorCode == 0)
            {
                _nodeSettings = apiResponse.Result;
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = apiResponse.Message
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = ex.ToString()
            });
        }
    }


    async Task SaveAsync()
    {
        try
        {
            var apiResponse = await ApiService.UpdateNodeSettingsAsync(_nodeSettings);
            if (apiResponse.ErrorCode == 0)
            {
                await QueryNodeSettingsAsync();
                await _message.Info("更新节点设置成功");
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = apiResponse.Message
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = ex.Message
            });
        }
    }

}