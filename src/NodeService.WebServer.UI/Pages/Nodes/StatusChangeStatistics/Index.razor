@namespace NodeService.WebServer.UI.Pages.Nodes.StatusChangeStatistics
@page "/Nodes/StatusChange/Statistics"
@inject ApiService ApiService;
@inject IMessageService _message
@inject NotificationService _notice
@inject NavigationManager NavigationManager
@implements IDisposable
<GridContent>
    <CommonDialog Closed="OnDialogClosed" @ref="_nodeSelectorDialog">
        <NodeSelector @bind-SelectedItems="_selectedNodeList" Mode="SelectionMode.Multiple"/>
    </CommonDialog>
    <Table
        Size="TableSize.Small"
        Loading="@_dataSource.IsLoading"
        EnableVirtualization="false"
        TItem="NodeStatusChangeStatisticItem"
        Resizable
        OnChange="OnTableChange"
        PageIndex="@_dataSource.PageIndex"
        PageSize="@_dataSource.PageSize"
        Total="@_dataSource.TotalCount"
        OnPageIndexChange="@_dataSource.OnPaginationEvent"
        OnPageSizeChange="@_dataSource.OnPaginationEvent"
        DataSource="@_dataSource.ItemsSource">
        <TitleTemplate>
            <GridRow Style="margin-bottom:16px">
                <GridCol Span="6">
                    <Title Level="3">节点状态变更分析</Title>
                </GridCol>
                <GridCol Span="6" Offset="12">
                    <Search Placeholder="搜索" @bind-Value="@_dataSource.QueryParameters.Keywords"
                            OnSearch="@QueryAsync"/>
                </GridCol>
            </GridRow>
            <GridRow Wrap Style="min-height:30px">
                <Text>节点：</Text>
                <Button Shape="@ButtonShape.Circle" Icon="@IconType.Outline.Edit" Type="@ButtonType.Primary" OnClick="ShowNodeSelectorDialogAsync"></Button>

                @if (_selectedNodeList != null)
                {
                    foreach (var item in _selectedNodeList)
                    {
                        <Tag @key="item.Id" Style="height:20px">@item.Name</Tag>
                    }
                }
                else
                {
                    <Text>全部</Text>
                }

            </GridRow>
            <GridRow>
                <Space Wrap Style="margin-bottom:16px">
                    <SpaceItem>
                        <RangePicker ValueExpression="() => DateTimes" Size="middle" TValue="DateTime?[]" ShowTime="false" OnChange="OnDatePickerChanged"/>
                    </SpaceItem>
                    <SpaceItem>
                        <RadioGroup @bind-Value="@_selectedNodeStatus">
                            @foreach (var item in _nodeStatusList)
                            {
                                <Radio RadioButton Value="@(item.Value)">@item.Name</Radio>
                            }
                        </RadioGroup>
                    </SpaceItem>
                    <SpaceItem>
                        <Button Type="@ButtonType.Primary" OnClick="@QueryAsync">查询</Button>
                    </SpaceItem>
                </Space>
            </GridRow>
        </TitleTemplate>
        <ColumnDefinitions>
            <PropertyColumn Title="日期" Ellipsis  Property="c => c.DateTime"></PropertyColumn>
            <PropertyColumn Title="节点标志" Sortable="true" Width="100" Property="c => c.NodeInfoId">
                <Text Ellipsis Copyable Style="max-height:30px;display:flex;flex-direction:row">
                    <div style="overflow: hidden; white-space: nowrap;text-overflow: ellipsis;" title="@context.NodeInfoId">@context.NodeInfoId</div>
                </Text>
            </PropertyColumn>
            <PropertyColumn Title="节点名称" Ellipsis  Property="c => c.Name"></PropertyColumn>
            <PropertyColumn Title="状态" Property="c=>c.Status"  ></PropertyColumn>
            <PropertyColumn Title="次数"  Property="c => c.Count"></PropertyColumn>
            <PropertyColumn Title="客户端版本" Ellipsis  Property="c => c.ClientVersion"></PropertyColumn>
        </ColumnDefinitions>
    </Table>
</GridContent>

@code {

    bool _loading;
    RoutedPaginationDataSource<NodeStatusChangeStatisticItem, QueryNodeStatusChangeStatisticsParameters> _dataSource;

    DateTime BeginDateTime;
    DateTime EndDateTime;
    IEnumerable<NodeInfoModel> _selectedNodeList = [];
    IEnumerable<EnumModel<NodeStatus>> _nodeStatusList;
    NodeStatus _selectedNodeStatus;

    CommonDialog _nodeSelectorDialog;

    readonly DateTime?[] DateTimes = [DateTime.UtcNow.Date, DateTime.UtcNow.Date];

    protected override void OnInitialized()
    {
        _selectedNodeStatus = NodeStatus.All;
        _nodeStatusList =
        [
            new EnumModel<NodeStatus>("全部状态", NodeStatus.All),
    new EnumModel<NodeStatus>("在线", NodeStatus.Online),
    new EnumModel<NodeStatus>("离线", NodeStatus.Offline)
        ];
        BeginDateTime = DateTime.Today.Date.AddDays(-7);
        EndDateTime = DateTime.Today.Date.AddDays(1).AddSeconds(-1);
        DateTimes[0] = BeginDateTime;
        DateTimes[1] = EndDateTime;

        _dataSource = new RoutedPaginationDataSource<NodeStatusChangeStatisticItem, QueryNodeStatusChangeStatisticsParameters>(NavigationManager.BaseUri, ApiService.QueryNodeStatusChangeStatisticsListAsync, StateHasChanged);
        _dataSource.PageIndex = 1;
        _dataSource.PageSize = 10;
        _dataSource.QueryParameters.NodeStatus = NodeStatus.All;
        _dataSource.QueryParameters.BeginDateTime = BeginDateTime;
        _dataSource.QueryParameters.EndDateTime = EndDateTime;
        _dataSource.ExceptionHandler = OnExepction;
        _dataSource.QueryParameters.SortDescriptions.Add(new SortDescription(nameof(NodeStatusChangeRecordModel.CreationDateTime), "desc"));
        base.OnInitialized();
    }

    async Task OnExepction(Exception ex)
    {
        await _notice.Open(new NotificationConfig
        {
            Message = "加载失败",
            Description = ex.ToString()
        });
    }

    protected override async Task OnInitializedAsync()
    {
        await _dataSource.RequestAsync();
        await base.OnInitializedAsync();
    }

    async Task OnTableChange(QueryModel<NodeStatusChangeStatisticItem> query)
    {
        _dataSource.QueryParameters.SortDescriptions.Clear();
        foreach (var sortModel in query.SortModel)
        {
            if (sortModel.Sort == null)
            {
                continue;
            }

            _dataSource.QueryParameters.SortDescriptions.Add(new SortDescription(sortModel.FieldName, sortModel.Sort));
        }

        await _dataSource.RequestAsync();
    }

    void OnDatePickerChanged(DateRangeChangedEventArgs<DateTime?[]> e)
    {
        BeginDateTime = e.Dates[0] ?? DateTime.Today.Date;
        EndDateTime = e.Dates[1] ?? DateTime.Today.AddDays(1).Date.AddSeconds(-1);
        _dataSource.QueryParameters.BeginDateTime = BeginDateTime;
        _dataSource.QueryParameters.EndDateTime = EndDateTime;
    }

    Task OnDialogClosed()
    {
        StateHasChanged();
        return Task.CompletedTask;
    }

    async Task ShowNodeSelectorDialogAsync()
    {
        await _nodeSelectorDialog.ShowAsync();
    }

    async Task QueryAsync()
    {
        _dataSource.QueryParameters.NodeIdList.Clear();
        if (_selectedNodeList != null)
        {
            _dataSource.QueryParameters.NodeIdList.AddRange(_selectedNodeList.Select(x => x.Id));
        }
        _dataSource.QueryParameters.NodeStatus = _selectedNodeStatus;
        await _dataSource.QueryAsync();
    }

    public void Dispose()
    {
        _dataSource.Dispose();
    }

}