@using NodeService.Infrastructure.DataModels;
@implements IDisposable
@inject IMessageService _message

<CommonDialog @bind-Visible="@_taskLogExecutionLogViewerVisible">
    @if (_taskLogExecutionLogViewerVisible)
    {
        <TaskExecutionInstanceLogViewer TaskExecutionInstanceId="@_taskExecutionInstanceId" />
    }
</CommonDialog>

<Drawer Visible="@Visible" VisibleChanged="@VisibleChanged" OnClose="@OnDrawerClosed" Title="@("查看节点运行状态")" Width="700">
    <Space Style="margin-bottom:16px" >
        <SpaceItem>
            <Button Shape="@ButtonShape.Circle" OnClick="() => RetryTaskAsync()" Type="@ButtonType.Primary" Icon="@IconType.Outline.Redo"></Button>
        </SpaceItem>
        <SpaceItem>
            <Button Shape="@ButtonShape.Circle" OnClick="() => CancelTaskAsync()" Type="@ButtonType.Primary" Danger Icon="@IconType.Outline.Close"></Button>
        </SpaceItem>
    </Space>
    <Table Size="TableSize.Small"
           Loading="@_isLoading"
           EnableVirtualization="false"
           TItem="TaskExecutionNodeInfo"
           DataSource="@_dataSourceList"
           Resizable
           Total="@_dataSourceList.Count"
           @bind-SelectedRows="@_selectedTaskExecutionNodeInfos"
           RowKey="x => x.NodeInfoId"
           PageSize="10">
        <ColumnDefinitions>
            <Selection Key="@context.NodeInfoId" Type="checkbox" />
            <PropertyColumn Title="标志" Sortable="true" Width="100" Property="c => c.NodeInfoId">
                <Text Ellipsis Copyable Style="max-height:30px;display:flex;flex-direction:row">
                    <div style="overflow: hidden; white-space: nowrap;text-overflow: ellipsis;" title="@context.NodeInfoId">@context.NodeInfoId</div>
                </Text>
            </PropertyColumn>

            <PropertyColumn Title="节点名称" Sortable="true" Width="150" Property="c => c.NodeInfoId">
                @if (_nodeInfoList==null)
                {
                    <Icon Type="loading" Spin/>
                }
                else
                {
                    @(_nodeInfoList?.FirstOrDefault(x => x.Id == context.NodeInfoId)?.Name)
                }

            </PropertyColumn>

            <PropertyColumn Title="状态" Ellipsis Sortable Width="100" Property="c => c.Status">
                @switch (context.Status)
                {
                    case TaskExecutionStatus.Unknown:
                        <Text>未知</Text>
                        break;
                    case TaskExecutionStatus.Triggered:
                        <Text>已触发</Text>
                        break;
                    case TaskExecutionStatus.Pendding:
                        <Text>等待节点响应</Text>
                        break;
                    case TaskExecutionStatus.Started:
                        <Text>已启动</Text>
                        break;
                    case TaskExecutionStatus.Running:
                        <Text>运行中</Text>
                        break;
                    case TaskExecutionStatus.Finished:
                        <Text>完成</Text>
                        break;
                    case TaskExecutionStatus.Cancelled:
                        <Text>已取消</Text>
                        break;
                    case TaskExecutionStatus.Failed:
                        <Text>失败</Text>
                        break;
                    case TaskExecutionStatus.PenddingTimeout:
                        <Text>等待超时</Text>
                        break;
                }
            </PropertyColumn>
            <PropertyColumn Title="消息" Ellipsis Sortable Property="c => c.Instances">
                <Text>@context.Instances.LastOrDefault()?.Message</Text>
            </PropertyColumn>
            <ActionColumn Fixed="right"  Title="操作">
                <CellRender Context="cellData">
                    <Space>
                        <SpaceItem>
                            <Button Disabled="@(CanRetry(context.Status)==false)" Shape="@ButtonShape.Circle" OnClick="() => RetryTaskAsync(context.Instances.LastOrDefault()?.TaskExecutionInstanceId)" Type="@ButtonType.Primary" Icon="@IconType.Outline.Redo"></Button>
                            <Button Disabled="@(IsRunning(context.Status)==false)" Shape="@ButtonShape.Circle" OnClick="() => CancelTaskAsync(context.Instances.LastOrDefault()?.TaskExecutionInstanceId)" Type="@ButtonType.Primary" Icon="@IconType.Outline.Close"></Button>
                            <Button Shape="@ButtonShape.Circle" OnClick="() => ShowLogAsync(context.Instances.LastOrDefault()?.TaskExecutionInstanceId)" Type="@ButtonType.Primary" Icon="@IconType.Outline.File"></Button>
                        </SpaceItem>
                    </Space>
                </CellRender>
            </ActionColumn>
        </ColumnDefinitions>
    </Table>
</Drawer>
@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }
    [Parameter] public ApiService ApiService { get; set; }
    [Parameter] public TaskFlowTaskExecutionInstance ExecutionInstance { get; set; }

    PeriodicTimer _timer;
    bool _isLoading;
    IEnumerable<TaskExecutionNodeInfo> _selectedTaskExecutionNodeInfos = [];
    List<TaskExecutionNodeInfo> _dataSourceList = [];
    TaskActivationRecordModel _taskActivationRecord = new TaskActivationRecordModel();
    List<NodeInfoModel> _nodeInfoList;
    string _taskExecutionInstanceId;
    bool _taskLogExecutionLogViewerVisible;

    bool IsRunning(TaskExecutionStatus taskExecutionStatus)
    {
        return taskExecutionStatus == TaskExecutionStatus.Running;
    }

    bool CanRetry(TaskExecutionStatus taskExecutionStatus)
    {
        return  taskExecutionStatus == TaskExecutionStatus.Failed
          ||
          taskExecutionStatus == TaskExecutionStatus.PenddingTimeout;
    }


    async Task OnDrawerClosed()
    {
        if (_timer != null)
        {
            _timer.Dispose();
        }
        await Task.CompletedTask;
    }

    async Task RetryTaskAsync()
    {
        if (_selectedTaskExecutionNodeInfos == null)
        {
            return;
        }
        foreach (var item in _selectedTaskExecutionNodeInfos)
        {
            var currentTask = item.Instances.LastOrDefault();
            if (currentTask == default)
            {
                continue;
            }
            switch (currentTask.Status)
            {
                case TaskExecutionStatus.Unknown:
                case TaskExecutionStatus.Failed:
                case TaskExecutionStatus.PenddingTimeout:
                    await RetryTaskAsync(currentTask.TaskExecutionInstanceId);
                    break;
            }
        }
    }

    async Task CancelTaskAsync()
    {
        if (_selectedTaskExecutionNodeInfos == null)
        {
            return;
        }
        foreach (var item in _selectedTaskExecutionNodeInfos)
        {
            var currentTask = item.Instances.LastOrDefault();
            if (currentTask == default)
            {
                continue;
            }
            switch (currentTask.Status)
            {
                case TaskExecutionStatus.Running:
                    await CancelTaskAsync(currentTask.TaskExecutionInstanceId);
                    break;
            }
        }
    }

    async Task RetryTaskAsync(string? taskExecutionInstanceId)
    {
        try
        {
            if (taskExecutionInstanceId == null)
            {
                return;
            }
            var rsp = await this.ApiService.RetryTaskAsync(taskExecutionInstanceId);
        }
        catch (Exception ex)
        {
            await _message.Error("查看节点状态失败");
        }

    }

    async Task CancelTaskAsync(string? taskExecutionInstanceId)
    {
        try
        {
            if (taskExecutionInstanceId == null)
            {
                return;
            }
            var rsp = await this.ApiService.CancelTaskAsync(taskExecutionInstanceId, new TaskCancellationParameters()
                {
                    TaskExeuctionInstanceId = taskExecutionInstanceId,
                    Source = "web",
                    Context = "web"
                });
            await _message.Info("取消任务成功");
        }
        catch (Exception ex)
        {
            await _message.Error($"取掉任务失败:{ex.ToString()}");
        }

    }


    async Task RefreshAsync(TaskFlowTaskExecutionInstance taskFlowTask)
    {
        try
        {
            if (taskFlowTask == null)
            {
                return;
            }
            _isLoading = true;
            if (_taskActivationRecord == null || _taskActivationRecord.Id != _taskActivationRecord.Id)
            {
                _taskActivationRecord = await taskFlowTask.QueryTaskFlowTaskDetailsAsync(ApiService);
            }
            else
            {
                var taskActivationRecord = await taskFlowTask.QueryTaskFlowTaskDetailsAsync(ApiService);
                _taskActivationRecord.Value.TaskExecutionNodeList = taskActivationRecord.Value.TaskExecutionNodeList;
            }
            _dataSourceList = _taskActivationRecord.Value.TaskExecutionNodeList;
            if (_nodeInfoList == null)
            {
                _nodeInfoList = await _taskActivationRecord.Value.TaskExecutionNodeList.Select(x => x.NodeInfoId).QueryNodeListAsync(ApiService);
            }
            _isLoading = false;
        }
        catch (Exception ex)
        {

        }

    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (ExecutionInstance==null)
            {
                return;
            }
            _isLoading = true;
            _timer = new PeriodicTimer(TimeSpan.FromSeconds(3));
            _ = Task.Run(async () =>
            {
                do
                {
                    await RefreshAsync(ExecutionInstance);
                } while (await _timer.WaitForNextTickAsync());
            });

        }
        catch (Exception ex)
        {
            await _message.Error("查看节点状态失败");
        }
        finally
        {
            _isLoading = false;
        }
        await base.OnInitializedAsync();
    }

    async Task ShowLogAsync(string? taskExecutionInstanceId)
    {
        if (string.IsNullOrEmpty(taskExecutionInstanceId))
        {
            return;
        }
        _taskExecutionInstanceId = taskExecutionInstanceId;
        _taskLogExecutionLogViewerVisible = true;
        await Task.CompletedTask;
    }

    public void Dispose()
    {
        if (_timer != null)
        {
            _timer.Dispose();
        }
    }
}
