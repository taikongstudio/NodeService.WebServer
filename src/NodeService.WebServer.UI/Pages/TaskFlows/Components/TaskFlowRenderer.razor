@using NodeService.WebServer.UI.Pages.TaskFlows.Designer.ViewModels
@using System.Threading
@inject ApiService ApiService
@implements IDisposable

<Card Bordered="false" Size="small" Title="@Template.Name">
    <Extra>
        @if (Template.IsEditable)
        {
            <Button Size="@ButtonSize.Small" Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.PlusCircle" OnClick="@Template.AddTaskStageAsync"></Button>
            <Button Size="@ButtonSize.Small" Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Edit" />
        }
    </Extra>
    <Body>
        <Flex Gap="small" Vertical>
            @if (!Template.IsDesignMode)
            {
                <TaskFlowStepsRenderer TaskStages="@Template.TaskStages" />
            }
            <TaskFlowStageRenderer TaskStages="@Template.TaskStages" OnTaskStageRemoved="@Template.RemoveTaskStageAsync" />
        </Flex>
    </Body>

</Card>

@code {
    [Parameter]
    public TaskFlowTemplate Template { get; set; }

    [Parameter]
    public TaskFlowExecutionInstanceModel? Instance { get; set; }

    System.Threading.Timer _timer;

    protected override void OnParametersSet()
    {
        if (this.Template == null)
        {
            return;
        }

        if (!this.Template.IsDesignMode)
        {
            _timer = new System.Threading.Timer(OnUpdate, null, TimeSpan.FromSeconds(3), TimeSpan.FromSeconds(20));
        }
        base.OnParametersSet();
    }

    async void OnUpdate(object? state)
    {
        if (this.Template.IsDesignMode)
        {
            return;
        }
        await this.Template.RefreshAync(ApiService);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

}
