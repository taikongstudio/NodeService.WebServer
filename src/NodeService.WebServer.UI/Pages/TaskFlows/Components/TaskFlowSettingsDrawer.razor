@using NodeService.WebServer.UI.Pages.TaskFlows.Designer.Models
<Drawer Title="@("任务流程设置")" OnClose="@OnClose" Visible="@Visible" VisibleChanged="@VisibleChanged" Width="500">
    <Form Model="@TaskFlow" Size="@AntSizeLDSType.Default"
          LabelColSpan="8"
          Layout="@FormLayout.Vertical"
          WrapperColSpan="24">
        <FormItem Label="执行时长限制" Help="控制任务流最长执行时间，超过此时间任务将强制失败，0表示不限制">
            <AntDesign.InputNumber Width="300" DefaultValue="1000" @bind-Value="@TaskFlow.ExecutionTimeLimitMinutes" /><Text>分钟</Text>
        </FormItem>
        <Divider/>
        <FormItem Label="触发类型">
            <RadioGroup Disabled="@Disabled" @bind-Value="@TaskFlow.TriggerType">
                <Radio RadioButton Value="@TaskTriggerType.Manual">手动启动</Radio>
                <Radio RadioButton Value="@TaskTriggerType.Schedule">定时启动</Radio>
            </RadioGroup>
        </FormItem>
        @if (TaskFlow.TriggerType == TaskTriggerType.Schedule)
        {
            <FormItem Label="Cron表达式">
                <StringEntryTable IsEditable="@(Disabled==false)" ItemsSource="@TaskFlow.CronExpressions"
                                  NameTitle="备注"
                                  ValueTitle="Cron表达式"
                                  IsTagHidden="false"
                                  AddingNewItem="AddCronExpression"
                                  ValueChanged="OnCronExpressionValueChanged" />
            </FormItem>
        }
        <FormItem Label="环境变量">
            <StringEntryTable IsEditable="@(Disabled==false)" ItemsSource="@TaskFlow.EnvironmentVariables"
                              NameTitle="名称"
                              ValueTitle="值"
                              AddingNewItem="NewEnvVarAdding" />
        </FormItem>

    </Form>

</Drawer>

@code {
    [Parameter] public TaskFlowDesignModel TaskFlow { get; set; }
    [Parameter] public bool Visible{ get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }
    [Parameter] public bool Disabled { get; set; }

    void AddCronExpression(AddingNewItemEventArgs<StringEntry> e)
    {
        e.DataItem.BeginEdit();
    }

    void OnCronExpressionValueChanged(ValueChangedEventArgs<StringEntry, string> e)
    {
        try
        {
            e.DataItem.Value = e.Value;
            if (CronExpression.IsValidExpression(e.DataItem.Value))
            {
                var desc = ExpressionDescriptor.GetDescription(e.DataItem.Value, new Options
                    {
                        DayOfWeekStartIndexZero = false,
                        Use24HourTimeFormat = true,
                        Locale = "zh-cn"
                    });
                e.DataItem.Tag = desc;
            }
            else
            {
                CronExpression.ValidateExpression(e.DataItem.Value);
            }
        }
        catch (Exception ex)
        {
            e.DataItem.Tag = $"解析失败:{ex.Message}";
        }
    }

    void NewEnvVarAdding(AddingNewItemEventArgs<StringEntry> e)
    {
        e.DataItem.Name = string.Empty;
        e.DataItem.Value = string.Empty;
        e.DataItem.BeginEdit();
    }

    void OnClose()
    {
        this.Visible = false;
    }
}
