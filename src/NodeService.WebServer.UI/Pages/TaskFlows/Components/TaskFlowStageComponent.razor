@* @using NodeService.WebServer.UI.Pages.TaskFlows.Designer.Models



    <Card Bordered="false"   Style="width:300px;">
        <TitleTemplate>
            <Text>@TaskStage.Name</Text>
        </TitleTemplate>
            <Extra>
                @if(TaskStage.IsEditable)
                {
                    <Button Size="@ButtonSize.Small" Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.PlusCircle" OnClick="@TaskStage.AddTaskGroupAsync"></Button>
                    <Button Size="@ButtonSize.Small" Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Edit" />
                }
                @if (TaskStage.IsRemoveable)
                {
                    <Button Size="@ButtonSize.Small" Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Danger Icon="@IconType.Outline.Delete" OnClick="()=>OnRemoved.InvokeAsync(TaskStage)" />
                }
            </Extra>
            <Body>
        <TaskFlowGroupRenderer TaskStage="@TaskStage" TaskStageExecutionInstance="@TaskStageExecutionInstance" OnGroupRemoved="@TaskStage.RemoveTaskGroupAsync" />
        </Body>
    </Card>
@code {
    [Parameter]
    public TaskFlowStageTemplate TaskStage { get; set; }

    [Parameter]
    public TaskFlowStageExecutionInstance? TaskStageExecutionInstance { get; set; }

    [Parameter]

    public EventCallback<TaskFlowStageTemplate> OnRemoved { get; set; }

    TaskFlowGroupTemplate? _dragging;
    void OnDrop(DragEventArgs e, TaskFlowGroupTemplate item)
    {
        if (item != null && _dragging != null)
        {
            int index = TaskStage.TaskGroups.IndexOf(item);
            TaskStage.TaskGroups.Remove(_dragging);
            TaskStage.TaskGroups.Insert(index, _dragging);
            _dragging = null;
            StateHasChanged();
        }
    }

    void OnDragStart(DragEventArgs e, TaskFlowGroupTemplate item)
    {
        e.DataTransfer.DropEffect = "copyMove";
        e.DataTransfer.EffectAllowed = "copyMove";
        _dragging = item;
    }


}
 *@