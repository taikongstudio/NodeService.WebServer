@* @using NodeService.WebServer.UI.Pages.TaskFlows.Designer.Models

<div>

    <Steps>
        @foreach (var taskStage in TaskStages)
        {
            <Step Status="@GetTaskStageExecutionStatus(taskStage)" Title="@taskStage.Name" Icon="@GetTaskStageExecutionIcon(taskStage)" />
        }
    </Steps>
</div>

@code {
    RenderFragment processDot =@<Template>
        <Icon Type="loading" Theme="outline" Style="font-size: 16px" Spin />;
    </Template>
    ;

    [Parameter]
    public List<TaskFlowStageTemplate> TaskStages { get; set; }

    [Parameter]
    public List<TaskFlowStageExecutionInstance> TaskStageExecutionInstances { get; set; }

    public string GetTaskStageExecutionIcon(TaskFlowStageTemplate taskFlowStageTemplate)
    {
        var taskFlowStageExecutionInstance = FindTaskFlowStageExecutionInstance(taskFlowStageTemplate);
        if (taskFlowStageExecutionInstance == null)
        {
            return "wait";
        }
        switch (taskFlowStageExecutionInstance.Status)
        {
            case TaskExecutionStatus.Unknown:
                return "thunderbolt";
            case TaskExecutionStatus.Triggered:
                return "clock-circle";
            case TaskExecutionStatus.Started:
            case TaskExecutionStatus.Running:
                return "loading";
            case TaskExecutionStatus.Finished:
                return "check";
            case TaskExecutionStatus.Cancelled:
                return "close";
            case TaskExecutionStatus.Failed:
                return "issues-close";
            case TaskExecutionStatus.PenddingTimeout:
                return "clock-circle";
            default:
                break;
        }
        return "wait";
    }

    string _status;

    public string GetTaskStageExecutionStatus(TaskFlowStageTemplate taskFlowStageTemplate)
    {
        var taskFlowStageExecutionInstance = FindTaskFlowStageExecutionInstance(taskFlowStageTemplate);
        if (taskFlowStageExecutionInstance == null)
        {
            return "wait";
        }
        switch (taskFlowStageExecutionInstance.Status)
        {
            case TaskExecutionStatus.Unknown:
            case TaskExecutionStatus.Triggered:
                return "wait";
            case TaskExecutionStatus.Started:
            case TaskExecutionStatus.Running:
                return "process";
            case TaskExecutionStatus.Finished:
                return "finish";
            case TaskExecutionStatus.Cancelled:
            case TaskExecutionStatus.Failed:
            case TaskExecutionStatus.PenddingTimeout:
                return "error";
            default:
                break;
        }
        return "wait";
    }


    private TaskFlowStageExecutionInstance? FindTaskFlowStageExecutionInstance(TaskFlowStageTemplate taskFlowStageTemplate)
    {
        return TaskStageExecutionInstances?.FirstOrDefault(x => x.TaskFlowStageTemplateId == taskFlowStageTemplate.Id);
    }
}
 *@