@using Blazor.Diagrams
@using NodeService.WebServer.UI.Pages.TaskFlows.Designer.ViewModels
@using NodeService.WebServer.Extensions
@inject ApiService ApiService

<style>
    .ant-popover{
        width:600px;
    }
</style>

@if (TaskTemplate.IsEditable)
{
    <TaskDefinitionEditor IsChildTaskSelectorVisible="false" Closed="@OnTaskDefinitionEditorDialogClosed" @bind-TaskDefinition="@TaskTemplate.TaskDefinition" @ref="_taskDefinitionEditor" />
    <CommonDialog Title="选择任务定义" @ref="_taskDefinitionDialog" Closed="OnTaskDefinitionSelectorDialogClosed">
        <TaskDefinitionSelector @ref="_taskDefinitionSelector" @bind-SelectedItems="@_selectedTaskDefinitions" Mode="SelectionMode.Single" />
    </CommonDialog>
    <CommonDialog Title="选择触发方式" Maximizable="false" DefaultMaximized="false" @ref="_triggerTaskSettingDialog" Closed="OnTriggerTaskSettingsDialogClosed">
        <Form Model="@TaskTemplate"
              LabelColSpan="4"
              Layout="@FormLayout.Horizontal"
              WrapperColSpan="20">
            <FormItem Label="触发方式">
                <RadioGroup @bind-Value="@TaskTemplate.TriggerType">
                    <Radio RadioButton Value="@TaskTriggerType.Schedule">定时触发</Radio>
                    <Radio RadioButton Value="@TaskTriggerType.Manual">手动执行</Radio>
                </RadioGroup>
            </FormItem>
            @if (TaskTemplate.TriggerType == TaskTriggerType.Schedule)
            {
                <FormItem Label="Cron表达式">
                    <StringEntryTable ItemsSource="@TaskTemplate.TriggerSources"
                                      NameTitle="备注"
                                      ValueTitle="Cron表达式"
                                      IsTagHidden="false"
                                      AddingNewItem="AddCronExpression"
                                      ValueChanged="OnCronExpressionValueChanged" />
                </FormItem>
            }
        </Form>
    </CommonDialog>
}

@if (TaskTemplate.TemplateType == TaskFlowTaskTemplateType.TriggerTask)
{
    @if (TaskTemplate.IsEditable)
    {
        <Button Block Icon="@_icon" OnClick="@OnTriggerButtonEditStateClicked">@TaskTemplate.Name</Button>
    }else
    {
        <Button Block Icon="@_icon" >@TaskTemplate.Name</Button>
    }
}
else
{
    @if (_buttonRef != null)
    {
        <Popover 
            ComplexAutoCloseAndVisible="false"
            TriggerReference="@_buttonRef.Ref"
            Placement="Placement.Top"
            OnClick="@CloseTaskActivationRecordPopover"
            OnVisibleChange="@OnTaskActivationRecordDrawerClosed" 
            Visible="@_isTaskActivationRecordPopoverVisible" 
            Trigger="@(new AntDesign.Trigger[] { AntDesign.Trigger.Click})">
            <TitleTemplate>
                <GridRow>
                    <GridCol Flex=@("auto")>@ExecutionInstance.Name</GridCol>
                    <GridCol Flex=@("30px")><Button Shape="@ButtonShape.Circle" Icon="close" OnClick="@CloseTaskActivationRecordPopover"></Button></GridCol>
                </GridRow>
            </TitleTemplate>
            <ContentTemplate >
                @if (_taskActivationRecord == null)
                {

                }
                else
                {
                    <Table Size="TableSize.Small"
                           Loading="false"
                           EnableVirtualization="false"
                           TItem="TaskExecutionNodeInfo"
                           DataSource="@_taskActivationRecord.Value.TaskExecutionNodeList"
                           Resizable
                           Total="@_taskActivationRecord.Value.TaskExecutionNodeList.Count"
                           PageIndex="1"
                           PageSize="10">
                        <ColumnDefinitions>
                            <PropertyColumn Title="标志" Ellipsis Sortable Width="50" Property="c => c.NodeInfoId"></PropertyColumn>
                            <PropertyColumn Title="名称" Ellipsis Sortable Width="50" Property="c => c.Status"></PropertyColumn>

                            <ActionColumn Fixed="right" Width="100" Title="操作">
                                <CellRender Context="cellData">
                                    <Space>
                                        @if (context.Status == TaskExecutionStatus.Failed || context.Status == TaskExecutionStatus.PenddingTimeout)
                                        {
                                            <Button Shape="@ButtonShape.Circle" OnClick="() => RetryTask(context.Instances.LastOrDefault().TaskExecutionInstanceId)" Type="@ButtonType.Primary" Icon="@IconType.Outline.Redo"></Button>
                                        }
                                    </Space>
                                </CellRender>
                            </ActionColumn>
                        </ColumnDefinitions>
                    </Table>
                }

            </ContentTemplate>
        </Popover>
    }
    <DropdownButton @ref="@_buttonRef" Icon="@_icon" Block OnClick="@OnTaskClicked">
        <Overlay>
            <Menu Mode="MenuMode.Horizontal"
                  Selectable="false"
                  Accordion
                  Style="width:256px ;">
                @if (TaskTemplate.IsEditable)
                {
                    if (TaskTemplate.TemplateType == TaskFlowTaskTemplateType.TriggerTask)
                    {

                    }
                    else
                    {
                        <MenuItem Icon="@IconType.Outline.Delete" OnClick="()=>OnRemoved.InvokeAsync(TaskTemplate)">删除任务</MenuItem>
                        if (TaskTemplate.TaskDefinitionId == null)
                        {
                            <MenuItem Icon="@IconType.Outline.Edit" OnClick="@ShowTaskDefinitionEditor">创建任务</MenuItem>
                        }
                        else
                        {
                            <MenuItem Icon="@IconType.Outline.Edit" OnClick="@ShowTaskDefinitionEditor">编辑任务</MenuItem>
                        }
                        <MenuItem Icon="@IconType.Outline.Select" OnClick="@ShowTaskDefinitionSelector">选择其他任务</MenuItem>
                    }

                }
                else if (ExecutionInstance != null)
                {

                    <MenuItem Icon="@IconType.Outline.CloudServer" OnClick="@ShowTaskActivationRecordDrawerAsync">查看运行状态</MenuItem>


                    if (ExecutionInstance.Status == TaskExecutionStatus.Running)
                    {
                        <MenuItem Icon="@IconType.Outline.Close" OnClick="()=>ExecutionInstance.CancelTaskAsync(ApiService)">停止任务</MenuItem>
                    }
                    else if (ExecutionInstance.Status == TaskExecutionStatus.Failed || ExecutionInstance.Status == TaskExecutionStatus.PenddingTimeout)
                    {
                        <MenuItem Icon="@IconType.Outline.Close" OnClick="()=>ExecutionInstance.RetryTaskAsync(ApiService)">重试运行</MenuItem>
                        <MenuItem Icon="@IconType.Outline.Redo" OnClick="()=>ExecutionInstance.RerunTaskAsync(ApiService)">重新运行</MenuItem>
                    }
                }
            </Menu>
        </Overlay>
        <ChildContent>
            <div style="display: flex;align-items:center;height:100%;padding-left:25px;">
                <Text Style="">@TaskTemplate.Name</Text>
            </div>
        </ChildContent>
    </DropdownButton>

}

@code {
    DropdownButton _buttonRef;
    bool _isTaskActivationRecordPopoverVisible;
    bool _isTaskActivationRecordPopoverMouseEnter;
    TaskDefinitionEditor _taskDefinitionEditor;
    CommonDialog _taskDefinitionDialog;
    CommonDialog _triggerTaskSettingDialog;
    TaskDefinitionSelector _taskDefinitionSelector;
    IEnumerable<TaskDefinitionModel> _selectedTaskDefinitions;
    TaskActivationRecordModel? _taskActivationRecord;

    [Parameter]
    public TaskFlowTaskTemplate TaskTemplate{ get; set; }

    [Parameter]
    public TaskFlowTaskExecutionInstance? ExecutionInstance { get; set; }

    [Parameter]
    public EventCallback<TaskFlowTaskTemplate> OnRemoved { get; set; }

    [CascadingParameter]
    public BlazorDiagram BlazorDiagram { get; set; }


    void AddCronExpression(AddingNewItemEventArgs<StringEntry> e)
    {
        e.DataItem.Tag = "CronExpression";
        e.DataItem.BeginEdit();
    }

    void OnTaskActivationRecordDrawerClosed(bool value)
    {
        this._isTaskActivationRecordPopoverVisible = value;
        if (!value)
        {
            _isTaskActivationRecordPopoverMouseEnter = false;
        }
    }

    void CloseTaskActivationRecordPopover() {
        _isTaskActivationRecordPopoverVisible = false;
    }

    async Task ShowTaskActivationRecordDrawerAsync()
    {
        try
        {
            _taskActivationRecord = await ExecutionInstance.QueryTaskFlowTaskDetailsAsync(ApiService);
            if (_taskActivationRecord == null)
            {

            }
            else
            {
                _isTaskActivationRecordPopoverVisible = true;
            }
            this.StateHasChanged();
        }
        catch (Exception ex)
        {

        }

    }

    void OnCronExpressionValueChanged(ValueChangedEventArgs<StringEntry, string> e)
    {
        try
        {
            e.DataItem.Value = e.Value;
            if (CronExpression.IsValidExpression(e.DataItem.Value))
            {
                var desc = ExpressionDescriptor.GetDescription(e.DataItem.Value, new Options
                    {
                        DayOfWeekStartIndexZero = false,
                        Use24HourTimeFormat = true,
                        Locale = "zh-cn"
                    });
                e.DataItem.Tag = desc;
            }
            else
            {
                CronExpression.ValidateExpression(e.DataItem.Value);
            }
        }
        catch (Exception ex)
        {
            e.DataItem.Tag = $"解析失败:{ex.Message}";
        }
    }

    private async Task OnTriggerButtonEditStateClicked()
    {
        await _triggerTaskSettingDialog.ShowAsync();
    }

    private async Task OnTriggerButtonInstanceStateClicked()
    {

    }

    private async Task OnTaskClicked()
    {
        if (ExecutionInstance != null)
        {
            await ShowTaskActivationRecordDrawerAsync();
        }

    }

    async Task RetryTask(string taskExecutionInstanceId)
    {
        try
        {
            var rsp = await this.ApiService.RetryTaskAsync(taskExecutionInstanceId);
        }
        catch (Exception ex)
        {

        }

    }

    private async Task ShowTaskDefinitionEditor()
    {
        if (this.TaskTemplate.TaskDefinitionId != null)
        {
            this.TaskTemplate.TaskDefinition = await ApiService.GetTaskDefinitionAsync(this.TaskTemplate.TaskDefinitionId);
        }
        await _taskDefinitionEditor.ShowAsync(TaskTemplate.TaskDefinition);
    }

    private async Task ShowTaskDefinitionSelector()
    {
        await _taskDefinitionDialog.ShowAsync();
    }

    private async Task OnTaskDefinitionSelectorDialogClosed()
    {
        if (this._selectedTaskDefinitions == null)
        {
            return;
        }
        var taskDefinitionModel = this._selectedTaskDefinitions.FirstOrDefault();
        if (taskDefinitionModel == null)
        {
            return;
        }
        await TaskTemplate.SetTaskDefinitionAsync(taskDefinitionModel);
    }

    private async Task OnTaskDefinitionEditorDialogClosed()
    {
        if (TaskTemplate.TaskDefinition == null)
        {
            return;
        }

        await TaskTemplate.SetTaskDefinitionAsync(TaskTemplate.TaskDefinition);
    }

    private async Task OnTriggerTaskSettingsDialogClosed()
    {
        switch (TaskTemplate.TriggerType)
        {
            case TaskTriggerType.Manual:
                TaskTemplate.Name = "手动执行";
                break;
            case TaskTriggerType.Schedule:
                TaskTemplate.Name = "定时触发";
                break;
            default:
                break;
        }
        await Task.CompletedTask;
    }

    bool _loading;

    bool GetLoadingState()
    {
        if (ExecutionInstance == null)
        {
            return false;
        }
        switch (this.ExecutionInstance.Status)
        {
            case TaskExecutionStatus.Triggered:
            case TaskExecutionStatus.Started:
            case TaskExecutionStatus.Running:
                return true;
            default:
                break;
        }
        return false;
    }

    string _icon;

    string? GetTaskIcon()
    {
        if (TaskTemplate.IsEditable)
        {
            return "edit";
        }
        else if (ExecutionInstance != null)
        {
            switch (ExecutionInstance.Status)
            {
                case TaskExecutionStatus.Unknown:
                    return "thunderbolt";
                case TaskExecutionStatus.Triggered:
                    return "clock-circle";
                case TaskExecutionStatus.Started:
                case TaskExecutionStatus.Running:
                    return "loading";
                case TaskExecutionStatus.Finished:
                    return "check";
                case TaskExecutionStatus.Cancelled:
                    return "close";
                case TaskExecutionStatus.Failed:
                case TaskExecutionStatus.PenddingTimeout:
                    return "warning";
                default:
                    break;
            }
        }

        return null;
    }

    protected override void OnParametersSet()
    {
        _icon = GetTaskIcon();
        _loading = GetLoadingState();
        base.OnParametersSet();
    }
}
