@using NodeService.WebServer.UI.Pages.TaskFlows.Designer.Models
<style type="text/css">
    .ant-card{
        border-radius:2px;
    }
    .ant-card-head{
        padding:0 10px;
    }

    .ant-timeline {
        padding-top: 10px;
    }

        .ant-timeline .ant-timeline-item {
            margin-left:10px;
            padding-bottom: 0px;
            padding-top: 0px;
        }
</style>

                <Card Size="small" Bordered Style="width:300px;">
                    <TitleTemplate>
                        <Paragraph EditConfig="editableStr" Editable="@TaskStage.IsDesignMode" Style="max-width:240px;overflow:hidden;display:flex;flex-direction:row">
                                <div style="width:auto;max-width:220px; overflow: hidden; white-space: nowrap;text-overflow: ellipsis;">@editableStr.Text</div>
                        </Paragraph>
                    </TitleTemplate>
                    <Extra>
        <Button Size="@ButtonSize.Small" Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Plus" OnClick="@AddTaskStageAsync"></Button>
                    </Extra>
                    <Body>
                     <Timeline>
                        @foreach (var taskGroup in TaskStage.Groups)
                        {
                            <TimelineItem>
                                    <TaskFlowDesignerGroupComponent TaskGroup="@taskGroup" OnRemoved="RemoveTaskGroupAsync" />
                            </TimelineItem>
                        }
                    </Timeline>
                    </Body>
                </Card>
@code {
    [Parameter]
    public TaskFlowStageDesignModel TaskStage{ get; set; }
    [Parameter]
    public EventCallback<TaskFlowStageDesignModel> Changed { get; set; }

    TypographyEditableConfig editableStr = new();

    protected override void OnInitialized()
    {
        this.editableStr.OnChange = OnNameChanged;
        base.OnInitialized();
    }

    async void OnNameChanged(string name)
    {
        this.TaskStage.Name = name;
        if (Changed.HasDelegate)
        {
            await Changed.InvokeAsync(TaskStage);
        }
    }

    protected override void OnParametersSet()
    {
        this.editableStr.Text = this.TaskStage.Name;
        base.OnParametersSet();
    }

    async Task AddTaskStageAsync()
    {
        this.TaskStage.Groups.Add(new TaskFlowGroupDesignModel()
            {
                Name = "未命名阶段",
                IsDesignMode = true,
            });
        await Task.CompletedTask;
    }

    async Task RemoveTaskGroupAsync(TaskFlowGroupDesignModel taskFlowGroup)
    {
        this.TaskStage.Groups.Remove(taskFlowGroup);
        await Task.CompletedTask;
    }
}
