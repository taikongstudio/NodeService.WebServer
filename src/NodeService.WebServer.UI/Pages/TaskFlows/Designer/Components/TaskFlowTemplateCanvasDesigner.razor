@* 

@using Blazor.Diagrams
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Components.Widgets
@using Blazor.Diagrams.Core.Models
@using Blazor.Diagrams.Core.Geometry;
@using Blazor.Diagrams.Core.Models.Base
@using NodeService.WebServer.UI.Diagrams.Components
@using NodeService.WebServer.UI.Diagrams
@using NodeService.WebServer.UI.Pages.TaskFlows.Designer.Models
@using Point = Blazor.Diagrams.Core.Geometry.Point;
@using PointerEventArgs = Blazor.Diagrams.Core.Events.PointerEventArgs;
@layout NodeService.WebServer.UI.Layouts.TaskFlowTemplateLayout
@inject ApiService ApiService
@inject NavigationManager NavigationManager

<PageTitle>任务流程图</PageTitle>

<style>
    .site-layout .site-layout-background {
        background: #fff;
    }
</style>

<Layout>
    <Header Style="background:#fff;position: fixed; z-index: 1; width: 100%;">
        <Space>
            <ChildContent>
                <SpaceItem>
                    <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Home" OnClick="OnGoHomeAsync"></Button>
                </SpaceItem>
                <SpaceItem>
                    <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Save" OnClick="OnSaveAsync"></Button>
                </SpaceItem>
                <SpaceItem>
                    @if (collapseNavMenu)
                    {
                        <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.ArrowRight" OnClick="ToggleNavMenu"></Button>
                    }
                    else
                    {
                        <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.ArrowLeft" OnClick="ToggleNavMenu"></Button>
                    }
                </SpaceItem>
                <SpaceItem>
                    <Checkbox @bind-Checked="@_blazorDiagram.Options.Zoom.Enabled">Toggle Zoom</Checkbox>
                </SpaceItem>
                <SpaceItem>
                    <Checkbox @bind-Checked="@_blazorDiagram.Options.AllowPanning">Toggle Panning</Checkbox>
                </SpaceItem>
                <SpaceItem>
                    <Checkbox @bind-Checked="@_blazorDiagram.Options.Virtualization.Enabled">Toggle Virtualization</Checkbox>
                </SpaceItem>
            </ChildContent>

        </Space>
    </Header>
    <Layout Style="flex:1;display:flex;padding-top:64px;">
        <Content Style="flex:1;display:flex;">
            <div style="width:100%;display:block;" @ondragstart:preventDefault @ondragover:preventDefault @ondrop="OnDropAsync">
                <CascadingValue Value="_blazorDiagram">
                    <DiagramCanvas>
                        <Widgets>
                            <SelectionBoxWidget />
                            <NavigatorWidget Width="200"
                                             Height="150"
                                             Style="position: absolute; bottom: 15px; right: 15px; border: 1px solid black;">
                            </NavigatorWidget>

                            <GridWidget Size="75" Mode="GridMode.Line" ZoomThreshold="0.5"></GridWidget>
                        </Widgets>
                    </DiagramCanvas>
                </CascadingValue>
            </div>
        </Content>
        @if (_isSiderCollasped)
        {
            <Button OnClick="()=>OnSiderCollaspedAsync(false)" Style="position:absolute;right:0px;margin:0px auto;align-self:center;" Icon="@IconType.Outline.ArrowLeft"></Button>
        }
        <Sider Collapsible CollapsedWidth="0" Collapsed="@_isSiderCollasped" CollapsedChanged="OnSiderCollaspedAsync">

        </Sider>
    </Layout>

</Layout>


@code {
    bool _isSiderCollasped;
    readonly BlazorDiagram _blazorDiagram = new BlazorDiagram();
    int _draggedType;
    bool collapseNavMenu = false;

    string? contextMenuLocation;
    string NavMenuCssClass => collapseNavMenu ? "toggled" : null;

    public IEnumerable<SelectableModel> SelectedObjects => _blazorDiagram.GetSelectedModels();

    [Parameter]
    public string? TemplateId{ get; set; }

    [Parameter]
    public string? TaskFlowInstanceId { get; set; }

    void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }


    async Task OnDeleteSelectedObjectsAsync()
    {

    }

    async Task OnCopySelectedObjectsAsync()
    {

    }

    async Task OnSiderCollaspedAsync(bool value)
    {
        if (value)
        {
            _isSiderCollasped = true;
        }
        else
        {
            _isSiderCollasped = false;
        }
        await Task.CompletedTask;
    }

    async Task OnGoHomeAsync()
    {
        NavigationManager.NavigateTo("/TaskFlows/Instances");
        await Task.CompletedTask;
    }

    async Task OnSaveAsync()
    {
        if (_taskFlowTemplateNode.Template != null)
        {
            await _taskFlowTemplateNode.Template.SaveAsync(ApiService);
        }
        await Task.CompletedTask;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _blazorDiagram.Options.LinksLayerOrder = 2;
        _blazorDiagram.Options.NodesLayerOrder = 1;
        _blazorDiagram.Options.GridSize = 75;
        //_blazorDiagram.Options.Links.EnableSnapping = true;
        _blazorDiagram.Options.AllowMultiSelection = true;

        _blazorDiagram.Changed += StateHasChanged;

        _blazorDiagram.Nodes.Added += OnNodeAdded;
        _blazorDiagram.Nodes.Removed += OnNodeRemoved;
        _blazorDiagram.SelectionChanged += OnSelectionChanged;
        _blazorDiagram.Links.Added += OnLinkAdded;
        _blazorDiagram.Links.Removed += OnLinkRemoved;
        _blazorDiagram.PointerDown += OnPointerDown;
        _blazorDiagram.PointerUp += OnPointerUp;
        _blazorDiagram.PointerClick += OnPointerClick;
        _blazorDiagram.PointerDoubleClick += OnPointerDoubleClick;
        _blazorDiagram.RegisterComponent<TaskFlowTemplateNode, TaskFlowTemplateWidget>();
    }

    TaskFlowTemplateNode _taskFlowTemplateNode;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _taskFlowTemplateNode = new TaskFlowTemplateNode();
            _taskFlowTemplateNode.Position = new Point(100, 100);
            TaskFlowTemplate? taskFlowTemplate = null;
            if (!string.IsNullOrEmpty(TemplateId))
            {
                var rsp = await ApiService.QueryTaskFlowTemplateAsync(TemplateId);
                if (rsp.ErrorCode == 0)
                {
                    taskFlowTemplate = rsp.Result.Value;
                }
                else
                {

                }
            }
            else if (!string.IsNullOrEmpty(TaskFlowInstanceId))
            {
                var rsp = await ApiService.QueryTaskFlowExecutionInstanceAsync(TaskFlowInstanceId);
                if (rsp.ErrorCode == 0)
                {
                    var taskFlowExecutionInstance = rsp.Result;
                    if (taskFlowExecutionInstance==null)
                    {
                        return;
                    }
                    _taskFlowTemplateNode.TaskFlowExecutionInstance = taskFlowExecutionInstance;
                    taskFlowTemplate = (await ApiService.GetTaskFlowTemplateAsync(taskFlowExecutionInstance.Value.TaskFlowTemplateId))?.Value;
                    taskFlowTemplate.Freeze();
                }
            }
            else
            {
                taskFlowTemplate = new TaskFlowTemplate();
                await taskFlowTemplate.InitDesignerDefaultsAsync();
            }
            if (taskFlowTemplate != null)
            {
                _taskFlowTemplateNode.Template = taskFlowTemplate;
                _blazorDiagram.Nodes.Add(_taskFlowTemplateNode);
            }
        }
        catch (Exception ex)
        {

        }

        await base.OnInitializedAsync();
    }

    void OnNodeAdded(NodeModel nodeModel)
    {

    }

    void OnNodeRemoved(NodeModel nodeModel)
    {

    }

    void OnSelectionChanged(SelectableModel selectableModel)
    {
        StateHasChanged();
    }

    void OnLinkAdded(BaseLinkModel baseLinkModel)
    {

    }

    void OnLinkRemoved(BaseLinkModel baseLinkModel)
    {

    }

    void OnPointerDown(Model? model, PointerEventArgs e)
    {
        StateHasChanged();
    }

    void OnPointerUp(Model? model, PointerEventArgs e)
    {
        StateHasChanged();
    }

    void OnPointerClick(Model? model, PointerEventArgs e)
    {
        StateHasChanged();
    }

    void OnPointerDoubleClick(Model? model, PointerEventArgs e)
    {
        StateHasChanged();
    }

    private void OnDragComponentStart(int key)
    {
        // Can also use transferData, but this is probably "faster"
        _draggedType = key;
    }

    async Task OnDropAsync(DragEventArgs e)
    {
        if (_draggedType == -1) // Unkown item
            return;
        try
        {
            var position = _blazorDiagram.GetRelativeMousePoint(e.ClientX, e.ClientY);
            if (position == null)
            {
                return;
            }

        }
        catch (Exception ex)
        {

        }

        _draggedType = -1;
    }

}
 *@

      @code{

      }