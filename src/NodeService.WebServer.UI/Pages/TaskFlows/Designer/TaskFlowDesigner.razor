@page "/TaskFlows/Templates/Designer"
@page "/TaskFlows/Templates/Designer/{TaskFlowTemplateId}"

@layout NodeService.WebServer.UI.Layouts.TaskFlowTemplateLayout
@using NodeService.WebServer.UI.Pages.TaskFlows.Designer.Components
@using NodeService.WebServer.UI.Pages.TaskFlows.Designer.Models
@inject ApiService ApiService
@inject IMessageService _message
<style>
    .site-layout .site-layout-background {
        background: #fff;
    }

    body { /* ADDED */
        margin: 0;
        background-color:#fff
    }

    #TaskFlowDesigner {
        display: grid;
        grid-template-columns: 1fr;
        grid-template-rows: min-content min-content auto min-content;
        grid-gap: 6px;
        grid-template-areas: "header header" "nav nav" "main sidebar " "footer footer";
        height: 100vh; /* ADDED */
    }

    #TaskFlowDesigner .taskflow-header {
        grid-area: header;
        background-color: #fff;
        height:50px;
        padding: 0 10px;
    }

    #TaskFlowDesigner .taskflow-navigation {
        grid-area: nav;
        height:40px;
        line-height:40px;
        background-color: #fff;
        padding: 0px 20px;
    }

    #TaskFlowDesigner .taskflow-sidebar {
        grid-area: sidebar;
        background-color: #fff;
        overflow: auto;
    }

    #TaskFlowDesigner .taskflow-main {
        grid-area: main;
        background-color: #fff;
        overflow: auto;
        margin:0px;
        padding:10px;
        height:100%;
        width:100%;
        display: flex;
        flex-direction: column;
    }

    #TaskFlowDesigner .taskflow-footer {
        grid-area: footer;
        background-color: #fff;
    }

    #TaskFlowDesigner .ant-steps{
        width:auto;
        display:inline-flex;
    }
    #TaskFlowDesigner .ant-steps .ant-steps-item{
            width: 308px;
            padding:4px;
    }

</style>


<Drawer Title="@("任务流程设置")" @bind-Visible="@_isSettingsDrawVisible" Width="500">
            <Form Model="@_taskFlow" Size="@AntSizeLDSType.Default"
              LabelColSpan="4"
              Layout="@FormLayout.Vertical"
              WrapperColSpan="20">

            <FormItem Label="触发类型">
                <RadioGroup @bind-Value="@_taskFlow.TriggerType">
            <Radio RadioButton Value="@TaskTriggerType.Schedule">定时启动</Radio>
            <Radio RadioButton Value="@TaskTriggerType.Manual">手动启动</Radio>
                </RadioGroup>
            </FormItem>
        @if(_taskFlow.TriggerType== TaskTriggerType.Schedule)
        {
            <FormItem Label="Cron表达式">
                <StringEntryTable ItemsSource="@_taskFlow.CronExpressions" />
            </FormItem>
        }
    </Form>

</Drawer>

<div class="taskflow-grid" id="TaskFlowDesigner">
    <Space Class="taskflow-header">
        <SpaceItem>
            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Home"></Button>
        </SpaceItem>
        <SpaceItem>
            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Save" OnClick="@OnSaveAsync"></Button>
        </SpaceItem>
        <SpaceItem>
            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Save" OnClick="@OnSaveAsync"></Button>
        </SpaceItem>
        <SpaceItem>
            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Plus" OnClick="@AddStageAsync"></Button>
        </SpaceItem>
    </Space>
    <div class="taskflow-navigation">
        <Paragraph EditConfig="editableStr" Editable="@_taskFlow.IsDesignMode" Style="max-width:300px;overflow:hidden;display:flex;flex-direction:row">
            <div style="width:280px; overflow: hidden; white-space: nowrap;text-overflow: ellipsis;">@editableStr.Text</div>
        </Paragraph>
    </div>
    <div class="taskflow-main">
@*         <Steps Percent="60"  Current="0" ProgressDot=@customDot>
            @foreach (var taskStage in _taskFlow.Stages)
            {
                <Step  Description="This is a description.">
                    <TitleTemplate>
                        <Paragraph EditConfig="editableStr" Editable="@false" Style="max-width:200px;overflow:hidden;display:flex;flex-direction:row">
                            <div style="width:180px; overflow: hidden; white-space: nowrap;text-overflow: ellipsis;">@editableStr.Text</div>
                        </Paragraph>
                    </TitleTemplate>
                </Step>
            }
        </Steps> *@
        <Space Align="start" >

            @foreach (var taskStage in _taskFlow.Stages)
            {
                <SpaceItem>
                    <StageComponent TaskStage="@taskStage" Changed="@OnTaskStageChanged" Removed="@OnTaskStageRemoved" />
                </SpaceItem>
            }
        </Space>
    </div>
    <div class="taskflow-footer">

    </div>

</div>

@code {
    TaskFlowDesignModel _taskFlow = new TaskFlowDesignModel();
    bool _isSettingsDrawVisible;
    TypographyEditableConfig editableStr = new();
    RenderFragment customDot = @<Icon Type="loading" Theme="outline" />;
    
    [Parameter] public string TaskFlowTemplateId { get; set; }

    protected override async void OnInitialized()
    {
        if (!string.IsNullOrEmpty(TaskFlowTemplateId))
        {
            await QueryTaskFlowTemplateAsync();
        }
        else
        {
            _taskFlow = new TaskFlowDesignModel()
                {
                    IsDesignMode = true,
                    Name = "任务流程"
                };
            _taskFlow.Stages.Add(new TaskFlowStageDesignModel()
                {
                    IsDesignMode = true,
                    Name = "未命名任务阶段_" + DateTime.UtcNow,

                });
        }

        this.editableStr.OnChange = OnNameChanged;
        base.OnInitialized();
    }

    async Task QueryTaskFlowTemplateAsync()
    {
        try
        {
            var rsp = await ApiService.QueryTaskFlowTemplateAsync(TaskFlowTemplateId);
            if (rsp.ErrorCode == 0)
            {
                var taskFlowTemplate = rsp.Result;
                if (taskFlowTemplate != null)
                {
                    var taskFlowDesignModel = new TaskFlowDesignModel()
                        {
                            Name = taskFlowTemplate.Name,
                            TriggerType = taskFlowTemplate.GetTriggerTask().TriggerType,
                            CronExpressions = taskFlowTemplate.GetTriggerTask().TriggerSources,
                            IsDesignMode = true,
                        };
                    foreach (var taskFlowStage in taskFlowTemplate.Value.TaskStages.Where(x => x.Attributes != TaskFlowStateAttributes.Hidden))
                    {
                        var taskFlowStageDesignModel = new TaskFlowStageDesignModel()
                            {
                                Name = taskFlowStage.Name,
                                IsDesignMode = true,
                                ExecutionTimeLimitSeconds = taskFlowStage.ExecutionTimeLimitSeconds
                            };
                        taskFlowDesignModel.Stages.Add(taskFlowStageDesignModel);
                        foreach (var taskFlowGroup in taskFlowStage.TaskGroups)
                        {
                            var taskFlowGroupDesignModel = new TaskFlowGroupDesignModel()
                                {
                                    Name = taskFlowGroup.Name,
                                    IsDesignMode = true,
                                };
                            taskFlowStageDesignModel.Groups.Add(taskFlowGroupDesignModel);
                            foreach (var taskFlowTask in taskFlowGroup.Tasks)
                            {
                                var taskFlowTaskDesignModel = new TaskFlowTaskDesignModel()
                                    {
                                        Name = taskFlowTask.Name,
                                        IsDesignMode = true,
                                    };
                                taskFlowGroupDesignModel.Tasks.Add(taskFlowTaskDesignModel);
                                var queryTaskDefinitionRsp = await ApiService.QueryTaskDefinitionAsync(taskFlowTask.TaskDefinitionId);
                                if (queryTaskDefinitionRsp.ErrorCode == 0)
                                {
                                    taskFlowTaskDesignModel.SetTaskDefinition(queryTaskDefinitionRsp.Result);
                                }
                            }
                        }
                    }

                    _taskFlow = taskFlowDesignModel;
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {

        }

    }

    void OnNameChanged(string name)
    {
        this._taskFlow.Name = name;
        this.StateHasChanged();
    }

    void OnTaskStageChanged(TaskFlowStageDesignModel taskFlowStage)
    {
        this.StateHasChanged();
    }

    async Task OnTaskStageRemoved(TaskFlowStageDesignModel taskFlowStage)
    {
        this._taskFlow.Stages.Remove(taskFlowStage);
        await Task.CompletedTask;
    }

    protected override void OnParametersSet()
    {
        this.editableStr.Text = this._taskFlow.Name;
        base.OnParametersSet();
    }

    async Task OnSettingsButtonClickedAsync()
    {
        _isSettingsDrawVisible = true;
        await Task.CompletedTask;
    }

    async Task OnSaveAsync()
    {
        try
        {
            var taskFlowTemplate = new TaskFlowTemplateModel()
                {
                    Id = TaskFlowTemplateId ?? Guid.NewGuid().ToString(),
                    Name = _taskFlow.Name,
                    CreationDateTime = DateTime.UtcNow,
                    ModifiedDateTime = DateTime.UtcNow,
                };
            taskFlowTemplate.Value.Id = taskFlowTemplate.Id;
            taskFlowTemplate.Value.Name = taskFlowTemplate.Name;
            var triggerStage = new TaskFlowStageTemplate()
                {
                    CreationDateTime = DateTime.UtcNow,
                    IsDesignMode = true,
                    Id = Guid.NewGuid().ToString(),
                    ModifiedDateTime = DateTime.UtcNow,
                    Name = "触发阶段",
                    Attributes = TaskFlowStateAttributes.Hidden
                };
            var triggerGroup = new TaskFlowGroupTemplate()
                {
                    CreationDateTime = DateTime.UtcNow,
                    IsDesignMode = true,
                    Id = Guid.NewGuid().ToString(),
                    ModifiedDateTime = DateTime.UtcNow,
                    Name = "触发任务组",
                };
            var triggerTask = new TaskFlowTaskTemplate()
                {
                    CreationDateTime = DateTime.UtcNow,
                    IsDesignMode = true,
                    Id = Guid.NewGuid().ToString(),
                    ModifiedDateTime = DateTime.UtcNow,
                    Name = "触发任务",
                    TriggerType = _taskFlow.TriggerType,
                    TriggerSources = _taskFlow.CronExpressions,
                    TemplateType = TaskFlowTaskTemplateType.TriggerTask
                };
            triggerStage.TaskGroups.Add(triggerGroup);
            triggerGroup.Tasks.Add(triggerTask);
            taskFlowTemplate.Value.TaskStages.Add(triggerStage);
            foreach (var stage in _taskFlow.Stages)
            {
                var stageTemplate = new TaskFlowStageTemplate()
                    {
                        Id = Guid.NewGuid().ToString(),
                        Name = stage.Name,
                        CreationDateTime = DateTime.UtcNow,
                        ModifiedDateTime = DateTime.UtcNow,
                        ExecutionTimeLimitSeconds = stage.ExecutionTimeLimitSeconds
                    };
                taskFlowTemplate.Value.TaskStages.Add(stageTemplate);
                foreach (var group in stage.Groups)
                {
                    var groupTemplate = new TaskFlowGroupTemplate()
                        {
                            Id = Guid.NewGuid().ToString(),
                            Name = group.Name,
                            CreationDateTime = DateTime.UtcNow,
                            ModifiedDateTime = DateTime.UtcNow,
                        };
                    stageTemplate.TaskGroups.Add(groupTemplate);
                    foreach (var task in group.Tasks)
                    {
                        var taskTemplate = new TaskFlowTaskTemplate()
                            {
                                Id = Guid.NewGuid().ToString(),
                                Name = task.Name,
                                CreationDateTime = DateTime.UtcNow,
                                ModifiedDateTime = DateTime.UtcNow,
                                TaskDefinitionId = task.TaskDefinition?.Id,
                                TemplateType = TaskFlowTaskTemplateType.RemoteNodeTask,
                            };
                        groupTemplate.Tasks.Add(taskTemplate);
                    }
                }
            }
            await ApiService.AddOrUpdateAsync(taskFlowTemplate);
            await _message.Info("保存成功:");
        }
        catch (Exception ex)
        {
            await _message.Error("保存失败:" + ex.ToString());
        }

    }

    async Task AddStageAsync()
    {
        _taskFlow.Stages.Add(new TaskFlowStageDesignModel()
            {
                Name = "新建任务阶段"
            });
        await Task.CompletedTask;
    }

}
