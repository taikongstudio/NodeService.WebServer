@page "/TaskFlows/Templates/Designer"

@layout NodeService.WebServer.UI.Layouts.TaskFlowTemplateLayout
@using NodeService.WebServer.UI.Pages.TaskFlows.Designer.Components
@using NodeService.WebServer.UI.Pages.TaskFlows.Designer.Models
<style>
    .site-layout .site-layout-background {
        background: #fff;
    }

    body { /* ADDED */
        margin: 0;
        background-color:#fff
    }

    #TaskFlowDesigner {
        display: grid;
        grid-template-columns: 1fr;
        grid-template-rows: min-content min-content auto min-content;
        grid-gap: 6px;
        grid-template-areas: "header header" "nav nav" "main sidebar " "footer footer";
        height: 100vh; /* ADDED */
    }

    #TaskFlowDesigner .taskflow-header {
        grid-area: header;
        background-color: #fff;
        height:50px;
        padding: 0 10px;
    }

    #TaskFlowDesigner .taskflow-navigation {
        grid-area: nav;
        height:40px;
        line-height:40px;
        background-color: #fff;
        padding: 0px 20px;
    }

    #TaskFlowDesigner .taskflow-sidebar {
        grid-area: sidebar;
        background-color: #fff;
        overflow: auto;
    }

    #TaskFlowDesigner .taskflow-main {
        grid-area: main;
        background-color: #fff;
        overflow: auto;
        margin:0px;
        padding:10px;
        height:100%;
        width:100%
    }

    #TaskFlowDesigner .taskflow-footer {
        grid-area: footer;
        background-color: #fff;
    }

    #TaskFlowDesigner .ant-steps{
        width:auto;
        display:inline-flex;
    }
    #TaskFlowDesigner .ant-steps .ant-steps-item{
            width: 308px;
            padding:4px;
    }

</style>


<div class="taskflow-grid" id="TaskFlowDesigner">
    <Space Class="taskflow-header">
        <SpaceItem>
            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Home"></Button>
        </SpaceItem>
        <SpaceItem>
            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Save"></Button>
        </SpaceItem>
    </Space>
    <div class="taskflow-navigation">
        <Paragraph EditConfig="editableStr" Editable="@_taskFlow.IsDesignMode" Style="max-width:300px;overflow:hidden;display:flex;flex-direction:row">
            <div style="width:280px; overflow: hidden; white-space: nowrap;text-overflow: ellipsis;">@editableStr.Text</div>
        </Paragraph>
    </div>
    <div class="taskflow-main">
        <Steps Percent="60"  Current="0" ProgressDot=@customDot>
            @foreach (var taskStage in _taskFlow.Stages)
            {
                <Step  Description="This is a description.">
                    <TitleTemplate>
                        <Paragraph EditConfig="editableStr" Editable="@false" Style="max-width:200px;overflow:hidden;display:flex;flex-direction:row">
                            <div style="width:180px; overflow: hidden; white-space: nowrap;text-overflow: ellipsis;">@editableStr.Text</div>
                        </Paragraph>
                    </TitleTemplate>
                </Step>
            }
        </Steps>
        <Space Align="start" >

            @foreach (var taskStage in _taskFlow.Stages)
            {
                <SpaceItem>
                    <TaskFlowDesignerStageComponent TaskStage="@taskStage" Changed="@OnTaskStageChanged" />
                </SpaceItem>
            }
        </Space>
    </div>
    <div class="taskflow-footer">

    </div>

</div>

@code {
    TaskFlowDesignModel _taskFlow = new TaskFlowDesignModel();
    bool _isSiderCollasped;
    TypographyEditableConfig editableStr = new();
    RenderFragment customDot = @<Icon Type="loading" Theme="outline" />;

    protected override void OnInitialized()
    {
        _taskFlow = new TaskFlowDesignModel()
            {
                IsDesignMode = true,
                Name = "任务流程",
                Stages = Enumerable.Range(0, 100).Select(x=> new TaskFlowStageDesignModel()
                {
                    IsDesignMode = true,
                    Name = "未命名任务阶段"+x,

                }).ToList()
            };
        this.editableStr.OnChange = OnNameChanged;
        base.OnInitialized();
    }

    void OnNameChanged(string name)
    {
        this._taskFlow.Name = name;
        this.StateHasChanged();
    }

    void OnTaskStageChanged(TaskFlowStageDesignModel taskFlowStage)
    {
        this.StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        this.editableStr.Text = this._taskFlow.Name;
        base.OnParametersSet();
    }

    async Task OnSiderCollaspedAsync(bool value)
    {
        if (value)
        {
            _isSiderCollasped = true;
        }
        else
        {
            _isSiderCollasped = false;
        }
        await Task.CompletedTask;
    }

}
