@using NodeService.WebServer.UI.Pages.TaskFlows.Designer.Models
@using NodeService.WebServer.UI.Pages.TaskFlows.Instances.Models
<style type="text/css">
    .ant-card{
        border-radius:2px;
    }
    .ant-card-head{
        padding:0 10px;
    }

    .ant-timeline {
        padding-top: 10px;
    }

        .ant-timeline .ant-timeline-item {
            margin-left:10px;
            padding-bottom: 0px;
            padding-top: 0px;
        }
</style>

<Card Size="small" Bordered Style="width:300px;">
    <TitleTemplate>
            <Icon Type="@GetIcon()" Fill="dodgerblue" Theme="outline" Style="margin-right:8px" Height="16" Width="16" />@TaskStage.Name
    </TitleTemplate>
    <Extra>
        <Button Icon="swap" Type="@ButtonType.Default" Shape="@ButtonShape.Circle" OnClick="()=>SwitchStage.InvokeAsync(TaskStage)" />
    </Extra>
    <Body>
                @foreach (var taskGroup in TaskStage.TaskGroups)
                {
                    <GroupComponent TaskGroup="@taskGroup" />
                }
    </Body>
</Card>
@code {
    [Parameter]
    public TaskFlowStageExecutionInstance TaskStage{ get; set; }

    [Parameter]
    public EventCallback<TaskFlowStageExecutionInstance> SwitchStage { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    string GetIcon()
    {
        switch (TaskStage.Status)
        {
            case TaskFlowExecutionStatus.Unknown:
                return "clock-circle";
            case TaskFlowExecutionStatus.Running:
                return "loading";
            case TaskFlowExecutionStatus.Finished:
                return "check";
            default:
                break;
        }
        return "";
    }

}
