@inject ApiService ApiService
@inject NotificationService _notice
@inject ILogger<Index> _logger;

<CommonDialog
    Title="@($"调用任务:{TaskDefinition?.Name}")"
    Visible="@Visible"
    VisibleChanged="@VisibleChanged"
    OnOk="OnOkAsync" 
    OnCancel="OnCancelAsync">
    <Form Model="@TaskDefinition"
          LabelColSpan="4"
          Layout="@FormLayout.Horizontal"
          Loading="@_loading"
          WrapperColSpan="18"
          OnFinish="OnFinish"
          OnFinishFailed="OnFinishFailed">
        @if (context != null)
        {
            <FormItem Label="环境变量">
                <StringEntryTable ItemsSource="@context.EnvironmentVariables"
                                  NameTitle="变量"
                                  ValueTitle="值"
                                  AddingNewItem="NewEnvVarAdding"/>
            </FormItem>
            <FormItem Label="节点">
                <NodeSelector Mode="SelectionMode.Multiple"
                              SelectedItems="@_selectedNodes"
                              LoadingSelectedItems="@_loading"
                              SelectedItemsChanged="OnSelectedNodesChanged"/>
            </FormItem>
        }
    </Form>
</CommonDialog>


@code {
    bool _submitting;
    bool _confirmLoading;
    bool _visible;
    bool _loading;

    Form<TaskDefinitionModel> _fireTaskForm;

    IEnumerable<NodeInfoModel> _selectedNodes = [];

    [Parameter] public TaskDefinitionModel TaskDefinition { get; set; }

    [Parameter] public bool Visible { get; set; }

    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (Visible)
            {
                _loading = true;
                _selectedNodes = await TaskDefinition.Value.NodeList.QueryNodeListAsync(ApiService);
                _loading = false;
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = ex.ToString()
            });
        }

        await base.OnParametersSetAsync();
    }

    void HandleFireTaskFormCancel(MouseEventArgs e)
    {
        _visible = false;
    }


    void OnSelectedNodesChanged(IEnumerable<NodeInfoModel> nodes)
    {
        _selectedNodes = nodes;
    }


    void HandleInvokeTaskFormOk(MouseEventArgs e)
    {
        _submitting = true;
        _fireTaskForm.Submit();
    }

    void OnInvokeTaskFormFinish()
    {
    }


    private async Task OnOkAsync()
    {
        await InvokeTaskAsync();
    }

    private void OnCancelAsync()
    {
        _selectedNodes = [];
    }

    async Task InvokeTaskAsync()
    {
        try
        {
            var invokeTaskParameters = new InvokeTaskParameters
                {
                    UserName = "WebUser",
                    EnvironmentVariables = TaskDefinition.Value.EnvironmentVariables
                };
            invokeTaskParameters.NodeList.Clear();
            if (_selectedNodes != null)
            {
                invokeTaskParameters.NodeList.AddRange(_selectedNodes.Select(x => new StringEntry
                    {
                        Name = x.Name,
                        Value = x.Id
                    }));
            }

            var apiResponse = await ApiService.InvokeTaskAsync(TaskDefinition.Id, invokeTaskParameters);
            if (apiResponse.ErrorCode == 0)
            {
                _visible = false;
            }
            else
            {
                await _notice.Open(new NotificationConfig
                    {
                        Message = "错误提示",
                        Description = apiResponse.Message
                    });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = ex.ToString()
                });
        }
    }

    void OnTriggerJobFormFinishFailed(EditContext editContext)
    {
        _confirmLoading = false;
        _submitting = false;
    }

    Task OnFinish(EditContext editContext)
    {
        return Task.CompletedTask;
    }

    Task OnFinishFailed(EditContext editContext)
    {
        _visible = true;
        return Task.CompletedTask;
    }

    void NewEnvVarAdding(AddingNewItemEventArgs<StringEntry> e)
    {
        e.DataItem.Name = string.Empty;
        e.DataItem.Value = string.Empty;
        e.DataItem.BeginEdit();
    }

}