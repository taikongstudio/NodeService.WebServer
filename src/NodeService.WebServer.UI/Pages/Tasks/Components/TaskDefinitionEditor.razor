@inject ApiService ApiService
@inject NotificationService _notice
@inject ILogger<Index> _logger;
<Modal Width="800"
       Title="@_modalTitle"
       Style="top:0"
       @bind-Visible="@_editFormVisible"
       Maximizable="true"
       DefaultMaximized="true"
       ConfirmLoading="@_editFormConfirmLoading"
       OnOk="@HandleEditFormOk"
       OnCancel="@HandleEditFormCancel"
       AfterClose="CloseImpl">
    @if (TaskDefinition == null)
    {
        <Empty />
    }
    else
    {
        <CommonDialog @ref="_taskTypeDescSelectorDialog" Closed="OnTaskTypeDescSelectorDialogClosed">
            <TaskTypeDescSelector @ref="_taskTypeDescSelector"
                                  @bind-SelectedItems="@_selectedTaskTypeDescConfigList"
                                  Mode="SelectionMode.Single" />
        </CommonDialog>
        <Form Model="@TaskDefinition"
              LabelColSpan="6"
              Layout="@FormLayout.Horizontal"
              Loading="@_loading"
              WrapperColSpan="18"
              OnFinish="OnEditFormFinish"
              OnFinishFailed="OnEditFormFinishFailed"
              @ref="@_editForm">
            <FormItem Label="名称">
                <Input @bind-Value="@context.Name" />
            </FormItem>
            <FormItem Label="描述">
                <Input @bind-Value="@context.Description" />
            </FormItem>
            <FormItem Label="启用">
                <Switch @bind-Checked="@context.IsEnabled" />
            </FormItem>
            <FormItem Label="环境变量">
                <StringEntryTable ItemsSource="@context.EnvironmentVariables"
                                  NameTitle="变量"
                                  ValueTitle="值"
                                  AddingNewItem="NewEnvVarAdding" />
            </FormItem>

            <FormItem Label="任务类型">
                @if (TaskDefinition != null && TaskDefinition.Value.TaskTypeDesc != null)
                {
                    <Tag @key="TaskDefinition.Value.TaskTypeDesc.Id">@TaskDefinition.Value.TaskTypeDesc.Name</Tag>
                }
                <Tag Class="site-tag-plus" OnClick="() => _taskTypeDescSelectorDialog.ShowAsync()">
                    <Icon Type="@IconType.Outline.Edit" />
                </Tag>
            </FormItem>
            <OptionValueEditor @ref="@_optionValueEditor" OptionValueEditors="@TaskDefinition.OptionValueEditors" />


            <FormItem Label="执行时长" Help="设置任务的执行时长，单位为秒，默认值0表示不限制执行时长。">
                <AntDesign.InputNumber TValue="int" Min="1" @bind-Value="@context.ExecutionLimitTimeSeconds" /><Text> 秒</Text>
            </FormItem>
            <FormItem Label="等待时长" Help="设置等待节点就绪的等待时长。">
                <AntDesign.InputNumber Min="0" @bind-Value="@context.PenddingLimitTimeSeconds" /><Text> 秒</Text>
            </FormItem>
            <FormItem  Label="最大自动重试次数" Help="任务等待超时和失败后的最大重试次数，0次表示不重试。">
                <AntDesign.InputNumber TValue="int" Min="0" @bind-Value="@context.MaxRetryCount" /><Text> 次</Text>
            </FormItem>
            <FormItem Label="自动重试间隔" Help="任务等待超时和失败后的重试间隔，以秒为单位，0秒表示立即重试。">
                <AntDesign.InputNumber Disabled="@(context.MaxRetryCount==0)" Min="0" @bind-Value="@context.Value.RetryDuration" /><Text> 秒</Text>
            </FormItem>
            <FormItem Label="触发方式">
                <RadioGroup @bind-Value="@context.TriggerType">
                    <Radio RadioButton Value="@TaskTriggerType.Schedule">定时触发</Radio>
                    <Radio RadioButton Value="@TaskTriggerType.Manual">手动执行</Radio>
                </RadioGroup>
            </FormItem>
            @if (context.TriggerType == TaskTriggerType.Schedule)
            {
                <FormItem Label="Cron表达式">
                    <StringEntryTable ItemsSource="@context.CronExpressions"
                                      NameTitle="备注"
                                      ValueTitle="Cron表达式"
                                      IsTagHidden="false"
                                      AddingNewItem="AddCronExpression"
                                      ValueChanged="OnCronExpressionValueChanged" />
                </FormItem>
            }
            <FormItem Label="优先级">
                <RadioGroup @bind-Value="context.Value.Priority" Size="middle">
                    <Radio RadioButton Value="@(TaskExecutionPriority.Lowest)">最低</Radio>
                    <Radio RadioButton Value="@(TaskExecutionPriority.Low)">低</Radio>
                    <Radio RadioButton Value="@(TaskExecutionPriority.Normal)">正常</Radio>
                    <Radio RadioButton Value="@(TaskExecutionPriority.High)">高</Radio>
                    <Radio RadioButton Value="@(TaskExecutionPriority.Highest)">最高</Radio>
                </RadioGroup>
            </FormItem>
            <FormItem Label="并发执行策略">
                <RadioGroup @bind-Value="@context.ExecutionStrategy">
                    <Radio RadioButton Value="@TaskExecutionStrategy.Skip">请勿启动新实例</Radio>
                    <Radio RadioButton Value="@TaskExecutionStrategy.Concurrent">并行运行新实例</Radio>
                    <Radio RadioButton Value="@TaskExecutionStrategy.Queue">对新实例等待节点响应</Radio>
                    <Radio RadioButton Value="@TaskExecutionStrategy.Stop">停止现有实例</Radio>
                </RadioGroup>
            </FormItem>

            <FormItem Label="指定节点">

                <NodeSelector Mode="SelectionMode.Multiple"
                              SelectedItems="@_selectedNodes"
                              SelectedItemsChanged="OnSelectedNodesChanged" />

            </FormItem>
            @if (IsChildTaskSelectorVisible)
            {
                <FormItem Label="后续任务">
                    <TaskDefinitionSelector Mode="SelectionMode.Multiple"
                                            @bind-SelectedItems="@_selectedTaskDefinitionList" />
                </FormItem>
            }

        </Form>
    }

</Modal>

@code {
    bool _loading;
    IEnumerable<NodeInfoModel> _selectedNodes = [];
    IEnumerable<TaskTypeDescConfigModel> _selectedTaskTypeDescConfigList = [];
    IEnumerable<TaskDefinitionModel> _selectedTaskDefinitionList = [];
    OptionValueEditor _optionValueEditor;
    string _modalTitle;
    bool _editFormVisible;
    bool _editFormSubmitting;
    bool _editFormConfirmLoading;
    string? _selectedNodeInfoId;
    string _selectedTaskDefinitionId;
    Form<TaskDefinitionModel> _editForm;
    TaskTypeDescSelector _taskTypeDescSelector;
    CommonDialog _taskTypeDescSelectorDialog;

    [Parameter] public EventCallback Closed { get; set; }
    [Parameter] public bool IsChildTaskSelectorVisible { get; set; } = true;
    [Parameter] public TaskDefinitionModel TaskDefinition { get; set; }
    [Parameter] public EventCallback<TaskDefinitionModel> TaskDefinitionChanged { get; set; }

    async Task HandleEditFormOk(MouseEventArgs e)
    {
        try
        {
            _editFormVisible = true;
            if (TaskDefinition == null)
            {
                return;
            }
            if (TaskDefinition.TriggerType == TaskTriggerType.Schedule
                &&
                TaskDefinition.CronExpressions.Count == 0)
            {
                await _notice.Open(new NotificationConfig
                    {
                        Message = "错误提示",
                        Description = "调度触发模式需要设置至少一个Cron表达式"
                    });
                return;
            }

            TaskDefinition.Options.Clear();
            await _optionValueEditor.CommitAsync();
            foreach (var kv in TaskDefinition.OptionValueEditors)
            {
                var key = kv.Key;
                var editorBase = kv.Value;
                switch (editorBase.EditorType)
                {
                    case OptionValueType.TextValue:
                        var textValueEditor = editorBase as TextValueEditor;
                        TaskDefinition.Options.TryAdd(key, textValueEditor.Value);
                        break;
                    case OptionValueType.NumberValue:
                        var numberValueEditor = editorBase as NumberValueEditor;
                        TaskDefinition.Options.TryAdd(key, numberValueEditor.Value);
                        break;
                    case OptionValueType.BooleanValue:
                        var booleanValueEditor = editorBase as BooleanValueEditor;
                        TaskDefinition.Options.TryAdd(key, booleanValueEditor.Value);
                        break;
                    case OptionValueType.TextArrayValue:
                        var textArrayValueEditor = editorBase as TextArrayValueEditor;
                        TaskDefinition.Options.TryAdd(key, textArrayValueEditor.DataSource.Select(x => x.Value).ToArray());
                        break;
                    case OptionValueType.PythonCodeValue:
                        var scriptCodeEditor = editorBase as PythonCodeEditor;
                        TaskDefinition.Options.TryAdd(key, scriptCodeEditor.Value);
                        break;
                    case OptionValueType.BatchScriptValue:
                        var batchScriptCodeEditor = editorBase as BatchScriptCodeEditor;
                        TaskDefinition.Options.TryAdd(key, batchScriptCodeEditor.Value);
                        break;
                    case OptionValueType.FtpConfigurationListValue:
                        var ftpConfigurationListEditor = editorBase as FtpConfigurationListEditor;
                        TaskDefinition.Options.TryAdd(key, ftpConfigurationListEditor.SelectedItems.Select(x => x.Id).ToArray());
                        break;
                    case OptionValueType.MysqlConfigurationListValue:
                        var mysqlConfigurationListEditor = editorBase as MysqlConfigurationListEditor;
                        TaskDefinition.Options.TryAdd(key, mysqlConfigurationListEditor.SelectedItems.Select(x => x.Id).ToArray());
                        break;
                    case OptionValueType.KafkaConfigurationListValue:
                        var kafkaConfigurationListEditor = editorBase as KafkaConfigurationListEditor;
                        TaskDefinition.Options.TryAdd(key, kafkaConfigurationListEditor.SelectedItems.Select(x => x.Id).ToArray());
                        break;
                    case OptionValueType.FtpConfigurationValue:
                        var ftpConfigurationEditor = editorBase as FtpConfigurationEditor;
                        TaskDefinition.Options.TryAdd(key, ftpConfigurationEditor.SelectedItems.FirstOrDefault()?.Id);
                        break;
                    case OptionValueType.MysqlConfigurationValue:
                        var mysqlEditor = editorBase as MysqlConfigurationEditor;
                        TaskDefinition.Options.TryAdd(key, mysqlEditor.SelectedItems.FirstOrDefault()?.Id);
                        break;
                    case OptionValueType.KafkaConfigurationValue:
                        var kafkaEditor = editorBase as KafkaConfigurationEditor;
                        TaskDefinition.Options.TryAdd(key, kafkaEditor.SelectedItems.FirstOrDefault()?.Id);
                        break;
                    case OptionValueType.PackageConfigurationValue:
                        var packageConfigurationEditor = editorBase as PackageConfigurationEditor;
                        TaskDefinition.Options.TryAdd(key, packageConfigurationEditor.SelectedItems.FirstOrDefault()?.Id);
                        break;
                    case OptionValueType.PackageConfigurationListValue:
                        var packageConfigurationListEditor = editorBase as PackageConfigurationListEditor;
                        TaskDefinition.Options.TryAdd(key, packageConfigurationListEditor.SelectedItems.Select(x => x.Id).ToArray());
                        break;
                    case OptionValueType.NodeEnvVarsConfigurationValue:
                        var nodeEnvVarsConfigurationEditor = editorBase as NodeEnvVarsConfigurationEditor;
                        TaskDefinition.Options.TryAdd(key, nodeEnvVarsConfigurationEditor.SelectedItems.FirstOrDefault()?.Id);
                        break;
                    case OptionValueType.NodeEnvVarsConfigurationListValue:
                        var nodeEnvVarsConfigurationListEditor = editorBase as NodeEnvVarsConfigurationListEditor;
                        TaskDefinition.Options.TryAdd(key, nodeEnvVarsConfigurationListEditor.SelectedItems.Select(x => x.Id).ToArray());
                        break;
                    case OptionValueType.LogUploadConfigurationValue:

                        break;
                    case OptionValueType.LogUploadConfigurationListValue:

                        break;
                    case OptionValueType.FtpUploadConfigurationValue:
                        var ftpUploadConfigurationEditor = editorBase as FtpUploadConfigurationEditor;
                        TaskDefinition.Options.TryAdd(key, ftpUploadConfigurationEditor.SelectedItems.FirstOrDefault()?.Id);
                        break;
                    case OptionValueType.FtpUploadConfigurationListValue:
                        var ftpUploadConfigurationListEditor = editorBase as FtpUploadConfigurationListEditor;
                        TaskDefinition.Options.TryAdd(key, ftpUploadConfigurationListEditor.SelectedItems.Select(x => x.Id).ToArray());
                        break;
                    case OptionValueType.RestApiConfigurationValue:
                        var restApiConfigurationEditor = editorBase as RestApiConfigurationEditor;
                        TaskDefinition.Options.TryAdd(key, restApiConfigurationEditor.SelectedItems.FirstOrDefault()?.Id);
                        break;
                    case OptionValueType.RestApiConfigurationListValue:
                        var restApiConfigurationListEditor = editorBase as RestApiConfigurationListEditor;
                        TaskDefinition.Options.TryAdd(key, restApiConfigurationListEditor.SelectedItems.Select(x => x.Id).ToArray());
                        break;
                    case OptionValueType.FtpDownloadConfigurationValue:
                        var ftpDownloadConfigurationEditor = editorBase as FtpDownloadConfigurationEditor;
                        TaskDefinition.Options.TryAdd(key, ftpDownloadConfigurationEditor.SelectedItems.FirstOrDefault()?.Id);
                        break;
                    case OptionValueType.FtpDownloadConfigurationListValue:
                        var ftpDownloadConfigurationListEditor = editorBase as FtpDownloadConfigurationListEditor;
                        TaskDefinition.Options.TryAdd(key, ftpDownloadConfigurationListEditor.SelectedItems.Select(x => x.Id).ToArray());
                        break;
                }
            }

            _editFormSubmitting = true;
            _editForm.Submit();
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = ex.ToString()
                });
        }

    }

    void AddCronExpression(AddingNewItemEventArgs<StringEntry> e)
    {
        e.DataItem.BeginEdit();
    }


    async Task OnTaskTypeDescSelectorDialogClosed()
    {
        await OnSelectedTaskTypeDescChanged(_selectedTaskTypeDescConfigList);
    }


    async Task OnSelectedTaskTypeDescChanged(IEnumerable<TaskTypeDescConfigModel> items)
    {
        try
        {
            var model = items.FirstOrDefault();
            _loading = true;
            if (model == null)
            {
                TaskDefinition.TaskTypeDescId = null;
                TaskDefinition.TaskTypeDesc = null;
                TaskDefinition.OptionValueEditors.Clear();
                return;
            }

            TaskDefinition.TaskTypeDescId = model.Id;
            TaskDefinition.TaskTypeDesc = model;

            var optionValueEditors = new Dictionary<string, EditorBase>();
            await BuildOptionValueEditorsAsync(TaskDefinition, optionValueEditors);
            TaskDefinition.OptionValueEditors = optionValueEditors;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex.ToString());
        }
        finally
        {
            _loading = false;
        }
    }


    void OnSelectedNodesChanged(IEnumerable<NodeInfoModel> nodes)
    {
        _selectedNodes = nodes;
    }


    async Task ShowEditForm()
    {
        _loading = true;
        _editFormVisible = true;
        if (TaskDefinition == null)
        {
            TaskDefinition = new TaskDefinitionModel
                {
                    Id = Guid.NewGuid().ToString(),
                    IsEnabled = true
                };
            if (TaskDefinitionChanged.HasDelegate)
            {
                await TaskDefinitionChanged.InvokeAsync(TaskDefinition);
            }
            _modalTitle = "新建配置";
        }
        else
        {
            _modalTitle = "编辑配置";
            if (TaskDefinition.Value.TaskTypeDesc == null)
            {
                TaskDefinition.Value.TaskTypeDesc = await ApiService.GetTaskTypeDescAsync(TaskDefinition.Value.TaskTypeDescId);
            }
            await OnSelectedTaskTypeDescChanged([TaskDefinition.Value.TaskTypeDesc]);
            _selectedTaskDefinitionList = await TaskDefinition.Value.ChildTaskDefinitions.QueryTaskDefinitionListAsync(ApiService);
            _selectedNodes = await TaskDefinition.Value.NodeList.QueryNodeListAsync(ApiService);
        }

        _loading = false;
    }

    async Task OnEditFormFinish(EditContext editContext)
    {
        try
        {
            TaskDefinition.Value.ChildTaskDefinitions.Clear();
            TaskDefinition.Value.ChildTaskDefinitions.AddRange(_selectedTaskDefinitionList.Select(x => new StringEntry
            {
                Name = x.Name,
                Value = x.Id
            }));
            TaskDefinition.NodeList.Clear();
            TaskDefinition.NodeList.AddRange(
                _selectedNodes
                    .DistinctBy(x => x.Id)
                    .Select(x => new StringEntry
                    {
                        Name = x.Name,
                        Value = x.Id
                    }));
            var apiResponse = await ApiService.AddOrUpdateAsync(TaskDefinition);
            if (apiResponse.ErrorCode == 0)
            {
                _selectedNodes = [];
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = apiResponse.Message
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = ex.ToString()
            });
        }
        finally
        {
            _editFormSubmitting = false;
            _editFormConfirmLoading = false;
            _editFormVisible = false;
        }
    }

    void OnEditFormFinishFailed(EditContext editContext)
    {
        _editFormSubmitting = false;
        _editFormConfirmLoading = false;
    }


    async Task BuildOptionValueEditorsAsync(TaskDefinitionModel model, Dictionary<string, EditorBase> optionEditors)
    {
        if (model.TaskTypeDesc == null)
        {
            return;
        }

        optionEditors.Clear();
        foreach (var optionEditor in model.TaskTypeDesc.OptionValueEditors)
        {
            if (!Enum.TryParse<OptionValueType>(optionEditor.Tag, out var optionEditorType))
            {
                continue;
            }

            try
            {
                switch (optionEditorType)
                {
                    case OptionValueType.TextValue:

                        optionEditors.TryAdd(optionEditor.Name,
                            new TextValueEditor(model.Options.ReadOptionValue<string>(optionEditor.Name)));
                        break;
                    case OptionValueType.NumberValue:
                        optionEditors.TryAdd(optionEditor.Name,
                            new NumberValueEditor(model.Options.ReadOptionValue<double>(optionEditor.Name)));
                        break;
                    case OptionValueType.BooleanValue:
                        optionEditors.TryAdd(optionEditor.Name,
                            new BooleanValueEditor(model.Options.ReadOptionValue<bool>(optionEditor.Name)));
                        break;
                    case OptionValueType.TextArrayValue:
                        optionEditors.TryAdd(optionEditor.Name,
                            new TextArrayValueEditor(model.Options.ReadOptionListValues(optionEditor.Name, static x => x.ToStringEntry())));
                        break;
                    case OptionValueType.PythonCodeValue:
                        optionEditors.TryAdd(optionEditor.Name,
                            new PythonCodeEditor(model.Options.ReadOptionValue<string>(optionEditor.Name)));
                        break;
                    case OptionValueType.BatchScriptValue:
                        optionEditors.TryAdd(optionEditor.Name,
                            new BatchScriptCodeEditor(model.Options.ReadOptionValue<string>(optionEditor.Name)));
                        break;
                    case OptionValueType.FtpConfigurationListValue:
                        var ftpConfigurationListEditor = new FtpConfigurationListEditor(
                            await model.Options.ReadOptionListValuesAsync(optionEditor.Name, ApiService.GetFtpConfigAsync));

                        optionEditors.TryAdd(optionEditor.Name, ftpConfigurationListEditor);
                        break;
                    case OptionValueType.MysqlConfigurationListValue:
                        var mysqlConfigurationListEditor = new MysqlConfigurationListEditor(
                            await model.Options.ReadOptionListValuesAsync(optionEditor.Name, ApiService.GetDatabaseConfigAsync));
                        optionEditors.TryAdd(optionEditor.Name, mysqlConfigurationListEditor);
                        break;
                    case OptionValueType.KafkaConfigurationListValue:
                        var kafkaConfigurationListEditor = new KafkaConfigurationListEditor(
                            await model.Options.ReadOptionListValuesAsync(optionEditor.Name, ApiService.GetKafkaConfigAsync));
                        optionEditors.TryAdd(optionEditor.Name, kafkaConfigurationListEditor);
                        break;
                    case OptionValueType.FtpConfigurationValue:
                        var ftpConfigurationEditor = new FtpConfigurationEditor(await model.Options.ReadOptionValueAsync<FtpConfigModel>(optionEditor.Name, ApiService.GetFtpConfigAsync));
                        optionEditors.TryAdd(optionEditor.Name, ftpConfigurationEditor);
                        break;
                    case OptionValueType.MysqlConfigurationValue:
                        var mysqlConfigurationEditor = new MysqlConfigurationEditor(await model.Options.ReadOptionValueAsync<DatabaseConfigModel>(optionEditor.Name, ApiService.GetDatabaseConfigAsync));
                        optionEditors.TryAdd(optionEditor.Name, mysqlConfigurationEditor);
                        break;
                    case OptionValueType.KafkaConfigurationValue:
                        var kafkaConfigurationEditor = new KafkaConfigurationEditor(await model.Options.ReadOptionValueAsync<KafkaConfigModel>(optionEditor.Name, ApiService.GetKafkaConfigAsync));
                        optionEditors.TryAdd(optionEditor.Name, kafkaConfigurationEditor);
                        break;
                    case OptionValueType.FtpUploadConfigurationValue:
                        var ftpUploadConfigurationEditor = new FtpUploadConfigurationEditor(await model.Options.ReadOptionValueAsync<FtpUploadConfigModel>(optionEditor.Name, ApiService.GetFtpUploadConfigAsync));
                        optionEditors.TryAdd(optionEditor.Name, ftpUploadConfigurationEditor);
                        break;
                    case OptionValueType.FtpUploadConfigurationListValue:
                        var ftpUploadConfigurationListEditor = new FtpUploadConfigurationListEditor(await model.Options.ReadOptionListValuesAsync(optionEditor.Name, ApiService.GetFtpUploadConfigAsync));
                        optionEditors.TryAdd(optionEditor.Name, ftpUploadConfigurationListEditor);
                        break;
                    case OptionValueType.LogUploadConfigurationValue:

                        break;
                    case OptionValueType.LogUploadConfigurationListValue:

                        break;
                    case OptionValueType.NodeEnvVarsConfigurationValue:
                        var localDirectoryMappingConfigurationEditor = new NodeEnvVarsConfigurationEditor(await model.Options.ReadOptionValueAsync<NodeEnvVarsConfigModel>(optionEditor.Name, ApiService.GetNodeEnvVarsConfigAsync));
                        optionEditors.TryAdd(optionEditor.Name, localDirectoryMappingConfigurationEditor);
                        break;
                    case OptionValueType.NodeEnvVarsConfigurationListValue:
                        var localDirectoryMappingConfigurationListEditor = new NodeEnvVarsConfigurationListEditor(await model.Options.ReadOptionListValuesAsync(optionEditor.Name, ApiService.GetNodeEnvVarsConfigAsync));
                        optionEditors.TryAdd(optionEditor.Name, localDirectoryMappingConfigurationListEditor);
                        break;
                    case OptionValueType.PackageConfigurationValue:
                        var packageConfigurationEditor = new PackageConfigurationEditor(await model.Options.ReadOptionValueAsync<PackageConfigModel>(optionEditor.Name, ApiService.GetPackageConfigAsync));
                        optionEditors.TryAdd(optionEditor.Name, packageConfigurationEditor);
                        break;
                    case OptionValueType.PackageConfigurationListValue:
                        var packageConfigurationListEditor = new PackageConfigurationListEditor(await model.Options.ReadOptionListValuesAsync(optionEditor.Name, ApiService.GetPackageConfigAsync));
                        optionEditors.TryAdd(optionEditor.Name, packageConfigurationListEditor);
                        break;
                    case OptionValueType.RestApiConfigurationValue:
                        var restApiConfigurationEditor = new RestApiConfigurationEditor(await model.Options.ReadOptionValueAsync<RestApiConfigModel>(optionEditor.Name, ApiService.GetRestApiConfigAsync));
                        optionEditors.TryAdd(optionEditor.Name, restApiConfigurationEditor);
                        break;
                    case OptionValueType.RestApiConfigurationListValue:
                        var restApiConfigurationListEditor = new RestApiConfigurationListEditor(await model.Options.ReadOptionListValuesAsync(optionEditor.Name, ApiService.GetRestApiConfigAsync));
                        optionEditors.TryAdd(optionEditor.Name, restApiConfigurationListEditor);
                        break;
                    case OptionValueType.FtpDownloadConfigurationValue:
                        var ftpDownloadConfigurationEditor = new FtpDownloadConfigurationEditor(await model.Options.ReadOptionValueAsync<FtpDownloadConfigModel>(optionEditor.Name, ApiService.GetFtpDownloadConfigAsync));
                        optionEditors.TryAdd(optionEditor.Name, ftpDownloadConfigurationEditor);
                        break;
                    case OptionValueType.FtpDownloadConfigurationListValue:
                        var ftpDownloadConfigurationListEditor = new FtpDownloadConfigurationListEditor(await model.Options.ReadOptionListValuesAsync(optionEditor.Name, ApiService.GetFtpDownloadConfigAsync));
                        optionEditors.TryAdd(optionEditor.Name, ftpDownloadConfigurationListEditor);
                        break;
                }
            }
            catch (Exception ex)
            {
            }
        }
    }


    void OnCronExpressionValueChanged(ValueChangedEventArgs<StringEntry, string> e)
    {
        try
        {
            e.DataItem.Value = e.Value;
            if (CronExpression.IsValidExpression(e.DataItem.Value))
            {
                var desc = ExpressionDescriptor.GetDescription(e.DataItem.Value, new Options
                {
                    DayOfWeekStartIndexZero = false,
                    Use24HourTimeFormat = true,
                    Locale = "zh-cn"
                });
                e.DataItem.Tag = desc;
            }
            else
            {
                CronExpression.ValidateExpression(e.DataItem.Value);
            }
        }
        catch (Exception ex)
        {
            e.DataItem.Tag = $"解析失败:{ex.Message}";
        }
    }

    void OnSelectedChildTaskDefinitionChanged(IEnumerable<TaskDefinitionModel> items)
    {
        if (_selectedTaskDefinitionList != items)
        {
            _selectedTaskDefinitionList = items;
        }
    }


    void HandleEditFormCancel(MouseEventArgs e)
    {
        _editFormVisible = false;
        _selectedNodes = [];
    }

    void NewEnvVarAdding(AddingNewItemEventArgs<StringEntry> e)
    {
        e.DataItem.Name = string.Empty;
        e.DataItem.Value = string.Empty;
        e.DataItem.BeginEdit();
    }

    public async Task ShowAsync(TaskDefinitionModel? taskDefintion = null)
    {
        this.TaskDefinition = taskDefintion;
        await ShowEditForm();
        StateHasChanged();
    }

    async Task CloseImpl()
    {
        _selectedNodes = [];
        _selectedTaskTypeDescConfigList = [];
        _selectedTaskDefinitionList = [];
        _editFormVisible = false;
        _editFormSubmitting = false;
        _editFormConfirmLoading = false;
        _selectedNodeInfoId = null;
        _selectedTaskDefinitionId = null;
        if (Closed.HasDelegate)
        {
            await Closed.InvokeAsync();
        }
    }

}