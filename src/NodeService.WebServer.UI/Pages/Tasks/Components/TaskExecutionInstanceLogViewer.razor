@inject NotificationService _notice
@inject ApiService ApiService
@implements IAsyncDisposable
<style type="text/css">
    .taskLogViwer { /* for a specific editor instance */
        height:100%;
        width:100%;
    }
</style>

<Flex Vertical Style="height:100%">
    <Flex Vertical>

        <Space>
            <SpaceItem>
                <Button Shape="@ButtonShape.Circle"
                        Type="@ButtonType.Primary"
                        Icon="@IconType.Outline.Reload"
                        OnClick="InitAsync">
                </Button>
            </SpaceItem>
            @if (_loading)
            {
                <SpaceItem>
                    <Button Shape="@ButtonShape.Circle"
                            Type="@ButtonType.Primary"
                            Icon="@IconType.Outline.Pause"
                            OnClick="StopAsync">
                    </Button>
                </SpaceItem>
            }
            else
            {
                <SpaceItem>
                    <Button Shape="@ButtonShape.Circle"
                            Type="@ButtonType.Primary"
                            Disabled="@_loadMoreButtonDisabled"
                            Icon="@IconType.Outline.PlayCircle"
                            OnClick="LoadMoreTaskLogsAsync">
                    </Button>
                </SpaceItem>
            }

            <SpaceItem>
                <a href="@($"/api/Tasks/Instances/{TaskExecutionInstanceId}/Log")" target="_blank">
                    <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Download">
                    </Button>
                </a>
            </SpaceItem>
        </Space>
        <AntDesign.Progress Percent="@(_loadedLogEntriesCount / (_totalLogEntriesCount + 0d) * 100)" ShowInfo="false"/>

    </Flex>
    <Flex Vertical Style="flex:auto">
        <StandaloneCodeEditor @ref="@_viewer"
                              CssClass="taskLogViwer"
                              OnDidInit="InitAsync"
                              ConstructionOptions="EditorConstructionOptions"/>
    </Flex>
</Flex>


@code {
    [Parameter] public string TaskExecutionInstanceId { get; set; }


    StandaloneCodeEditor _viewer = null!;
    CancellationTokenSource _cancellationTokenSource;
    bool _loading;
    int _nextLogPageIndex = 1;
    int _loadedLogEntriesCount;
    int _totalLogEntriesCount;
    bool _loadMoreButtonDisabled;
    int _lastEntriesCount = 0;
    int _lastFullTaskLogPageEndLineNumber = 0;

    async Task Reset()
    {
        _loadMoreButtonDisabled = true;
        _loading = true;
        _nextLogPageIndex = 1;
        _loadedLogEntriesCount = 0;
        _lastEntriesCount = 0;
        _lastFullTaskLogPageEndLineNumber = 0;

        await _viewer.UpdateOptions(new EditorUpdateOptions
            {
                ReadOnly = true,
                LineNumbersMinChars = 10
            });

        await _viewer.SetValue(string.Empty);
    }

    async Task InitAsync()
    {
        await Reset();
        await LoadMoreTaskLogsAsync();
    }

    async Task LoadMoreTaskLogsAsync()
    {
        try
        {
            InitCancellationTokenSource();
            while (!_cancellationTokenSource.IsCancellationRequested)
            {
                if (!await LoadNextLogPageAsync(_cancellationTokenSource.Token))
                {
                    break;
                }
            }
        }
        catch (TaskCanceledException ex)
        {
            if (ex.CancellationToken != _cancellationTokenSource.Token)
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = ex.ToString()
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = ex.ToString()
            });
        }
        finally
        {
            _loadMoreButtonDisabled = false;
            _loading = false;
            StateHasChanged();
        }
    }

    async Task<bool> LoadNextLogPageAsync(CancellationToken cancellationToken = default)
    {
        var apiResponse = await ApiService.QueryTaskExecutionInstanceLogAsync(TaskExecutionInstanceId,
            new PaginationQueryParameters
            {
                PageIndex = _nextLogPageIndex,
                PageSize = 0
            },
            cancellationToken
        );
        if (apiResponse == null)
        {
            return false;
        }

        if (apiResponse.ErrorCode == 0)
        {
            var sb = new StringBuilder();


            if (apiResponse.Result == null || !apiResponse.Result.Any())
            {
                return false;
            }

            foreach (var item in apiResponse.Result)
            {
                sb.AppendLine($"{item.DateTimeUtc.ToString(NodePropertyModel.DateTimeFormatString)} {item.Value}");
            }

            var currentLogText = sb.ToString();
            var entiresCount = apiResponse.Result.Count();

            var model = await _viewer.GetModel();
            var startLineNumber = await model.GetLineCount();
            var startColumn = 1;
            var endLineNumber = startLineNumber;
            var endColumn = await model.GetLineMaxColumn(endLineNumber);

            if (entiresCount == apiResponse.PageSize)
            {
                _nextLogPageIndex = apiResponse.PageIndex + 1;
                _loadedLogEntriesCount = _loadedLogEntriesCount - _lastEntriesCount;
                _loadedLogEntriesCount = _loadedLogEntriesCount + entiresCount;
                _lastEntriesCount = 0;
            }
            else
            {
                startLineNumber = _lastFullTaskLogPageEndLineNumber;
                _loadedLogEntriesCount = _loadedLogEntriesCount - _lastEntriesCount;
                _loadedLogEntriesCount = _loadedLogEntriesCount + entiresCount;
                _lastEntriesCount = entiresCount;
            }

            var op = new IdentifiedSingleEditOperation()
                {
                    ForceMoveMarkers = false,
                    Range = new BlazorMonaco.Range(startLineNumber, startColumn, endLineNumber, endColumn),
                    Text = currentLogText
                };
            await model.ApplyEdits([op]);

            if (entiresCount == apiResponse.PageSize)
            {
                _lastFullTaskLogPageEndLineNumber = endLineNumber;
            }

            _totalLogEntriesCount = apiResponse.TotalCount;
            await InvokeAsync(StateHasChanged);
            return entiresCount == apiResponse.PageSize;
        }

        await _notice.Open(new NotificationConfig
        {
            Message = "错误提示",
            Description = apiResponse.Message
        });
        return false;
    }

    StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "plaintext",
            Value = string.Empty
        };
    }

    void InitCancellationTokenSource()
    {
        if (_cancellationTokenSource == null)
        {
            _cancellationTokenSource = new CancellationTokenSource();
        }
        else if (_cancellationTokenSource != null && !_cancellationTokenSource.TryReset())
        {
            _cancellationTokenSource.Dispose();
            _cancellationTokenSource = new CancellationTokenSource();
        }
    }

    public async ValueTask DisposeAsync()
    {
        await Reset();
        if (_viewer != null)
        {
            await _viewer.SetValue(string.Empty);
        }

        if (_cancellationTokenSource != null && !_cancellationTokenSource.IsCancellationRequested)
        {
            await _cancellationTokenSource.CancelAsync();
        }
        TaskExecutionInstanceId = null;
        _totalLogEntriesCount = 0;
        _loadedLogEntriesCount = 0;
        _nextLogPageIndex = 0;
    }

    public async Task StopAsync()
    {
        if (!_cancellationTokenSource.IsCancellationRequested)
        {
            await _cancellationTokenSource.CancelAsync();
        }

        _loading = false;
        StateHasChanged();
    }

}