@namespace NodeService.WebServer.UI.Pages.Tasks
@page "/tasks/definitions"

@inject ApiService ApiService
@inject ConfirmService _confirmService
@inject NavigationManager NavigationManager
@inject NotificationService _notice
@implements IDisposable

<GridContent>
    <ConfigurationVersionSelectorDialog Title="版本列表"
                                        Closed="()=>_dataSource.QueryAsync()"
                                        ConfigurationId="@_configurationId"
                                        @bind-Visible="@_versionSelectorDialogVisible"
                                        TItem="TaskDefinitionModel">
    </ConfigurationVersionSelectorDialog>
    <TaskDefinitionEditor
        Closed="OnTaskDefinitionEditorClosed"
        @ref="_taskDefinitionEditor"/>
    <InvokeTaskDialog
        TaskDefinition="@_taskDefinition"
        @bind-Visible="@_InvokeTaskDialogVisible"/>
    <Table
        Size="TableSize.Small"
        Loading="@_dataSource.IsLoading"
        EnableVirtualization="false"
        TItem="TaskDefinitionModel"
        DataSource="@_dataSource.ItemsSource"
        Resizable
        Total="@_dataSource.TotalCount"
        OnChange="OnTableChange"
        PageIndex="@_dataSource.PageIndex"
        PageSize="@_dataSource.PageSize"
        OnPageIndexChange="@_dataSource.OnPaginationEvent"
        OnPageSizeChange="@_dataSource.OnPaginationEvent">
        <TitleTemplate>
            <GridRow>
                <GridCol Span="6">
                    <Title Level="3">任务流定义</Title>
                </GridCol>
                <GridCol Span="6" Offset="12">
                    <Search Placeholder="搜索" @bind-Value="@_dataSource.QueryParameters.Keywords" OnSearch="@_dataSource.QueryAsync"/>
                </GridCol>
            </GridRow>
            <GridRow>
                <Space >
                    <SpaceItem>
                        <Button Shape="@ButtonShape.Circle" Icon="@IconType.Outline.Plus" Type="@ButtonType.Primary" OnClick="() => _taskDefinitionEditor.ShowAsync()"></Button>
                    </SpaceItem>
                    <SpaceItem>
                        <Button Shape="@ButtonShape.Circle" Icon="@IconType.Outline.Reload" Type="@ButtonType.Primary" OnClick="_dataSource.QueryAsync"></Button>
                    </SpaceItem>
                </Space>
            </GridRow>
        </TitleTemplate>
        <ColumnDefinitions>
            <PropertyColumn Title="标志" Ellipsis Sortable Property="c => c.Id"></PropertyColumn>
            <PropertyColumn Title="名称" Sortable Property="c => c.Name"></PropertyColumn>
            <PropertyColumn Title="描述" Ellipsis Sortable Property="c => c.Description"></PropertyColumn>
            <PropertyColumn Title="启用" Ellipsis Sortable Property="c => c.IsEnabled"></PropertyColumn>
            <PropertyColumn Title="任务类型" Ellipsis Property="c => c.TaskTypeDesc">
                <Text>@context.TaskTypeDesc?.Name</Text>
            </PropertyColumn>

            <ActionColumn Fixed="right" Width="250" Title="操作">
                <CellRender Context="cellData">
                    <Space>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.PlayCircle" OnClick="() => ShowInvokeTaskDialogAsync(context)"></Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Copy" OnClick="() => _taskDefinitionEditor.ShowAsync(context.CopyClone<TaskDefinitionModel>())"></Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Edit" OnClick="() => _taskDefinitionEditor.ShowAsync(context.JsonClone<TaskDefinitionModel>())"></Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.UnorderedList" OnClick="() => ShowVersionSelectorDialog(context.Id)"></Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Danger Icon="@IconType.Outline.Delete" OnClick="() => DeleteConfig(context)"></Button>
                        </SpaceItem>

                    </Space>
                </CellRender>
            </ActionColumn>
        </ColumnDefinitions>
    </Table>
</GridContent>

@code {

    bool _nodeTableLoading = false;

    bool _InvokeTaskDialogVisible;

    TaskDefinitionModel _taskDefinition;

    TaskDefinitionEditor _taskDefinitionEditor;

    RoutedPaginationDataSource<TaskDefinitionModel, PaginationQueryParameters> _dataSource;
    PaginationDataSource<NodeInfoModel, PaginationQueryParameters> _nodeDataSource;

    string _configurationId;
    bool _versionSelectorDialogVisible;

    async Task ShowVersionSelectorDialog(string id)
    {
        _configurationId = id;
        _versionSelectorDialogVisible = true;
        await Task.CompletedTask;
    }

    protected override void OnInitialized()
    {
        _dataSource = new RoutedPaginationDataSource<TaskDefinitionModel, PaginationQueryParameters>(
            NavigationManager.BaseUri,
            ApiService.QueryTaskDefinitionListAsync,
            StateHasChanged);
        _dataSource.ItemInitializer = InitAsync;
        _nodeDataSource = new PaginationDataSource<NodeInfoModel, PaginationQueryParameters>(
            ApiService.QueryNodeListAsync,
            StateHasChanged
        );
        _dataSource.ExceptionHandler = OnExepction;
        base.OnInitialized();
    }

    async Task OnExepction(Exception ex)
    {
        await _notice.Open(new NotificationConfig
        {
            Message = "加载失败",
            Description = ex.ToString()
        });
    }

    protected override async Task OnInitializedAsync()
    {
        await _dataSource.RequestAsync();
        await base.OnInitializedAsync();
    }

    async ValueTask InitAsync(
        TaskDefinitionModel model,
        CancellationToken cancellationToken = default)
    {
        if (model == null)
        {
            return;
        }

        var rsp = await ApiService.QueryTaskTypeDescConfigAsync(model.Value.JobTypeDescId);
        if (rsp.ErrorCode == 0)
        {
            model.Value.TaskTypeDesc = rsp.Result;
            //await BuildOptionValueEditorsAsync(model, model.OptionValueEditors);
        }
    }

    string ConvertFilterType(string filerType)
    {
        switch (filerType)
        {
            case "exclude":
                return "排除";
                break;
            case "include":
                return "包含";
                break;
            default:
                return string.Empty;
        }
    }

    void ShowInvokeTaskDialogAsync(TaskDefinitionModel model)
    {
        _InvokeTaskDialogVisible = true;
        _taskDefinition = model;
    }

    async Task OnTaskDefinitionEditorClosed()
    {
        await _dataSource.QueryAsync();
    }


    Task<ConfirmResult> ShowConfirmDialogAsync(string title, string content)
    {
        var options = new ConfirmButtonOptions
        {
            Button1Props = new ButtonProps
            {
                ChildContent = "确定",
                Type = ButtonType.Primary
            },
            Button2Props = new ButtonProps
            {
                ChildContent = "取消"
            }
        };
        return _confirmService.Show(
            content,
            title,
            ConfirmButtons.OKCancel,
            ConfirmIcon.Info,
            options);
    }

    async Task DeleteConfig(TaskDefinitionModel model)
    {
        try
        {
            if (await ShowConfirmDialogAsync("删除确认", "确定要删除吗？") != ConfirmResult.OK)
            {
                return;
            }

            var apiResponse = await ApiService.RemoveAsync(model);
            if (apiResponse.ErrorCode == 0)
            {
                await _dataSource.QueryAsync();
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = apiResponse.Message
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = ex.ToString()
            });
        }
    }


    void OnNodeTableChange(QueryModel<NodeInfoModel> query)
    {
    }


    async Task OnTableChange(QueryModel<TaskDefinitionModel> query)
    {
        _dataSource.QueryParameters.SortDescriptions.Clear();
        foreach (var sortModel in query.SortModel)
        {
            if (sortModel.Sort == null)
            {
                continue;
            }

            _dataSource.QueryParameters.SortDescriptions.Add(new SortDescription(sortModel.FieldName, sortModel.Sort));
        }

        await _dataSource.RequestAsync();
    }

    public void Dispose()
    {
        _dataSource.Dispose();
    }

}