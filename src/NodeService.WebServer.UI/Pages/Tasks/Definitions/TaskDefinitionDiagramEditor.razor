@page "/Tasks/Definitions/Editor"

@using Blazor.Diagrams
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Core.Models
@using NodeService.WebServer.UI.Diagrams
@using NodeService.WebServer.UI.Diagrams.Demos
@layout NodeService.WebServer.UI.Diagrams.Layouts.DemoLayout
@inject LayoutData LayoutData

<div class="row h-100">
    <div class="col-4">
        @* Toolbox *@
        <div class="row h-100 p-4 no-gutters" style="background: #eee;">
            <div class="col-6">
                <div class="text-center" draggable="true" @ondragstart="() => OnDragStart(0)">
                    <div style="pointer-events:none;">
                        <img class="d-block m-auto" src="_content/NodeService.WebServer.UI.Diagrams/img/DefaultNodeWidget.png"/>
                        <span>Default Node</span>
                    </div>
                </div>
            </div>
            <div class="col-6">
                <div class="text-center" draggable="true" @ondragstart="() => OnDragStart(1)">
                    <div style="pointer-events:none;">
                        <img class="d-block m-auto" src="_content/NodeService.WebServer.UI.Diagrams/img/BotAnswerNodeWidget.png"/>
                        <span>Bot Answer Node</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-8" ondragover="event.preventDefault();" @ondragover:preventDefault @ondrop="OnDrop">
        <CascadingValue Value="_blazorDiagram">
            <DiagramCanvas></DiagramCanvas>
        </CascadingValue>
    </div>
</div>


@code {
    private readonly BlazorDiagram _blazorDiagram = new BlazorDiagram();
    private int? _draggedType;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        LayoutData.Title = "Drag & Drop";
        LayoutData.Info = "A very simple drag & drop implementation using the HTML5 events.";
        LayoutData.DataChanged();

        _blazorDiagram.RegisterComponent<BotAnswerNode, BotAnswerWidget>();
    }

    private void OnDragStart(int key)
    {
        // Can also use transferData, but this is probably "faster"
        _draggedType = key;
    }

    private void OnDrop(DragEventArgs e)
    {
        if (_draggedType == null) // Unkown item
            return;

        var position = _blazorDiagram.GetRelativeMousePoint(e.ClientX, e.ClientY);
        var node = _draggedType == 0 ? new NodeModel(position) : new BotAnswerNode(position);
        node.AddPort(PortAlignment.Top);
        node.AddPort(PortAlignment.Bottom);
        _blazorDiagram.Nodes.Add(node);
        _draggedType = null;
    }
}
