@page "/Tasks/Instances/{TaskExecutionInstanceId}"
@using NodeService.WebServer.UI.Layouts
@inject IMessageService _message
@inject ApiService ApiService
@inject NotificationService _notice
@inject NavigationManager NavigationManager
@layout TaskInstanceLayout
@implements IDisposable

<style>
    .site-layout .site-layout-background {
        background: #fff;
    }

    body { /* ADDED */
        margin: 0;
        background-color: #fff
    }

    #TaskFlowDesigner {
        display: grid;
        grid-template-columns: 1fr;
        grid-template-rows: min-content  auto min-content;
        grid-gap: 6px;
        grid-template-areas: "header header"  "main sidebar " "footer footer";
        height: 100vh; /* ADDED */
    }

        #TaskFlowDesigner .taskflow-header {
            grid-area: header;
            background-color: #fff;
            height: 100px;
            padding: 0 10px;
        }

        #TaskFlowDesigner .taskflow-navigation {
            grid-area: nav;
            height: 40px;
            line-height: 40px;
            background-color: #fff;
            padding: 0px 20px;
        }

        #TaskFlowDesigner .taskflow-sidebar {
            grid-area: sidebar;
            background-color: #fff;
            overflow: auto;
        }

        #TaskFlowDesigner .taskflow-main {
            grid-area: main;
            background-color: #fff;
            overflow: auto;
            margin: 0px;
            padding: 10px;
            height: 100%;
            width: 100%;
            display: inline-block;
        }

        #TaskFlowDesigner .taskflow-footer {
            grid-area: footer;
            background-color: #fff;
        }

        #TaskFlowDesigner .ant-steps {
            width: auto;
            display: inline-flex;
        }

            #TaskFlowDesigner .ant-steps .ant-steps-item {
                width: 308px;
                padding: 4px;
            }

</style>


@if (_taskExecutionInstance == null)
{
    <Spin Spinning/>
}
else
{
    @if (_taskExecutionInstance?.TaskProgressInfo != null)
    {
        <TaskProgressInfoDrawer @bind-Visible="@_taskProgressInfoDrawerVisible" TaskExecutionInstance="@_taskExecutionInstance" ChangedCount="@_requestedCount"/>
    }
    <div class="taskflow-grid" id="TaskFlowDesigner">
        @if (_isIdInvalid)
        {
            <PageHeader Class="taskflow-header" BackIcon="true" Ghost="false" OnBack="@NavigateToIndex">
                <PageHeaderTitle>无效的任务ID</PageHeaderTitle>
            </PageHeader>
            <Empty />
        }
        else
        {
            <PageHeader Class="taskflow-header" BackIcon="true" Ghost="false" OnBack="@NavigateToIndex">
                <PageHeaderTitle>@_taskExecutionInstance.Name</PageHeaderTitle>
                <PageHeaderSubtitle></PageHeaderSubtitle>
                <PageHeaderExtra>
                    <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Redo" OnClick="@RetryTaskAsync"></Button>
                    @if (_taskExecutionInstance.TaskProgressInfo != null)
                    {
                        <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.OrderedList" OnClick="@ShowTaskProgressInfoDrawerAsync"></Button>
                    }

                </PageHeaderExtra>
                <PageHeaderContent>
                    <Descriptions Size="small" Column="4">
                        <DescriptionsItem Title="节点" Span="1"><Text Copyable Ellipsis><NavLink href="@("/Nodes/~/" + @_taskExecutionInstance.NodeInfoId)"> @(_taskExecutionInstance.NodeInfo?.Name ?? "名称加载失败")</NavLink></Text></DescriptionsItem>
                        <DescriptionsItem Title="状态" Span="1">@_taskExecutionInstance.Status.GetDisplayName()</DescriptionsItem>
                        <DescriptionsItem Title="启动时间" Span="1">@_taskExecutionInstance.FireTimeUtc</DescriptionsItem>
                        <DescriptionsItem Title="开始执行时间" Span="1">@_taskExecutionInstance.ExecutionBeginTimeUtc</DescriptionsItem>
                        <DescriptionsItem Title="结束执行时间" Span="1">@_taskExecutionInstance.ExecutionEndTimeUtc</DescriptionsItem>
                        <DescriptionsItem Title="消息" Span="1">@_taskExecutionInstance.Message</DescriptionsItem>
                        <DescriptionsItem Title="触发源头" Span="1">@_taskExecutionInstance.TriggerSource</DescriptionsItem>
                    </Descriptions>
                </PageHeaderContent>
            </PageHeader>
            <div class="taskflow-main">
              <TaskExecutionInstanceLogViewer TaskExecutionInstanceId="@TaskExecutionInstanceId" />
            </div>
        }

    </div>
}




@code {

    [Parameter] public string? TaskExecutionInstanceId { get; set; }

    int _requestedCount = 0;
    bool _isLoading;
    bool _isIdInvalid;
    bool _taskProgressInfoDrawerVisible;
    PeriodicTimer _timer;

    TaskExecutionInstanceModel _taskExecutionInstance = new TaskExecutionInstanceModel();


    protected override async Task OnInitializedAsync()
    {
        _timer = new PeriodicTimer(TimeSpan.FromSeconds(3));
        await QueryTaskExecutionInstanceAsync(TaskExecutionInstanceId);
        _= Task.Run(async () =>
        {
            try
            {
                while (await _timer.WaitForNextTickAsync())
                {
                    await QueryTaskExecutionInstanceAsync(TaskExecutionInstanceId);
                    _requestedCount++;
                    await InvokeAsync(StateHasChanged);
                }
            }
            catch (Exception ex)
            {

            }

        });
        await base.OnInitializedAsync();
    }

    void OnTaskLogViewDialogClosedAsync()
    {
        NavigateToIndex();
    }

    private void NavigateToIndex()
    {
        NavigationManager.NavigateTo($"/Tasks/Instances");
    }

    async Task QueryTaskExecutionInstanceAsync(string taskExecutionInstanceId)
    {
        try
        {
            if (string.IsNullOrEmpty(taskExecutionInstanceId))
            {
                return;
            }
            var queryTaskExecutionInstanceRsp = await ApiService.QueryTaskExecutionInstancesAsync(new QueryTaskExecutionInstanceListParameters
                {
                    IncludeTaskProgressInfo = true,
                    IncludeNodeInfo = true,
                    TaskExecutionInstanceIdList = [taskExecutionInstanceId]
                });
            if (queryTaskExecutionInstanceRsp.ErrorCode == 0 && queryTaskExecutionInstanceRsp.Result != null)
            {
                _taskExecutionInstance = queryTaskExecutionInstanceRsp.Result.FirstOrDefault();
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = ex.ToString()
                });
        }
        finally
        {
            _isIdInvalid = _taskExecutionInstance == null;
        }
    }

    async Task ShowTaskProgressInfoDrawerAsync()
    {
        _taskProgressInfoDrawerVisible = true;
        await Task.CompletedTask;
    }

    async Task RetryTaskAsync()
    {
        try
        {
            if (_taskExecutionInstance?.Id == null)
            {
                return;
            }
            await ApiService.RetryTaskAsync(_taskExecutionInstance.Id);
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = ex.ToString()
                });
        }
    }

    async Task CancelTaskAsync()
    {
        if (_taskExecutionInstance?.Id == null)
        {
            return;
        }
        switch (_taskExecutionInstance.Status)
        {
            case TaskExecutionStatus.Running:
                await CancelTaskAsync(_taskExecutionInstance.Id);
                break;
        }
    }

    async Task CancelTaskAsync(string? taskExecutionInstanceId)
    {
        try
        {
            if (taskExecutionInstanceId == null)
            {
                return;
            }
            var rsp = await this.ApiService.CancelTaskAsync(taskExecutionInstanceId, new TaskCancellationParameters()
                {
                    TaskExeuctionInstanceId = taskExecutionInstanceId,
                    Source = "web",
                    Context = "web"
                });
            await _message.Info("取消任务成功");
        }
        catch (Exception ex)
        {
            await _message.Error($"取掉任务失败:{ex.ToString()}");
        }

    }

    public void Dispose()
    {
        if (_timer != null)
        {
            _timer.Dispose();
        }
    }
}
