@namespace NodeService.WebServer.UI.Pages.Tasks.Instances
@page "/Tasks/Instances/"
@page "/Tasks/Instances/{TaskExecutionInstanceId}/log"
@inject ApiService ApiService
@inject NotificationService _notice
@inject NavigationManager NavigationManager
@implements IDisposable
<GridContent>
    <CommonDialog Title="@_taskLogDialogTitle"
                  @ref="_taskLogViewerDialog"
                  Opened="@OnTaskLogViewDialogOpenedAsync"
                  Closed="OnTaskLogViewDialogClosedAsync">
        <TaskExecutionInstanceLogViewer TaskExecutionInstanceId="@_taskExecutionInstanceId"/>
    </CommonDialog>
    <CommonDialog Closed="OnDialogClosed" @ref="_taskDefinitionSelectorDialog">
        <TaskDefinitionSelector @bind-SelectedItems="_selectedTaskDefinitionList" Mode="SelectionMode.Multiple"/>
    </CommonDialog>
    <CommonDialog Closed="OnDialogClosed" @ref="_nodeSelectorDialog">
        <NodeSelector @bind-SelectedItems="_selectedNodeList" Mode="SelectionMode.Multiple"/>
    </CommonDialog>

    <Table Size="TableSize.Small"
           Loading="@_dataSource.IsLoading"
           ScrollX="1500px"
           Resizable
           Total="@_dataSource.TotalCount"
           EnableVirtualization="false"
           PageSize="@_dataSource.PageSize"
           PageIndex="@_dataSource.PageIndex"
           OnChange="OnTableChange"
           OnPageSizeChange="@_dataSource.OnPaginationEvent"
           OnPageIndexChange="@_dataSource.OnPaginationEvent"
           TItem="TaskExecutionInstanceModel"
           DataSource="@_dataSource.ItemsSource">
        <TitleTemplate>
            <GridRow Style="margin-bottom:16px">
                <GridCol Span="6">
                    <Title Level="3">任务实例</Title>
                </GridCol>
                <GridCol Span="6" Offset="12">
                    <Search Placeholder="搜索" @bind-Value="@_dataSource.QueryParameters.Keywords" OnSearch="@QueryTaskExecutionInstanceListAsync" />
                </GridCol>
            </GridRow>
            <GridRow Wrap Style="min-height:30px">
                <Text>节点：</Text>
                <Button Shape="@ButtonShape.Circle" Icon="@IconType.Outline.Edit" Type="@ButtonType.Primary" OnClick="ShowNodeSelectorDialogAsync"></Button>

                @if (_selectedNodeList != null)
                {
                    foreach (var item in _selectedNodeList)
                    {
                        <Tag @key="item.Id" Style="height:20px">@item.Name</Tag>
                    }
                }
                else
                {
                    <Text>全部</Text>
                }

            </GridRow>
            <GridRow Wrap Style="min-height:30px">
                <Text>任务定义配置：</Text>
                <GridRow>
                    <Button Shape="@ButtonShape.Circle" Icon="@IconType.Outline.Edit" Type="@ButtonType.Primary" OnClick="ShowTaskDefinitionSelectorDialogAsync"></Button>
                </GridRow>

                <GridRow>
                    <Select ItemValue="c=>c"
                            ItemLabel="c=>c.Name"
                            TItem="TaskDefinitionModel"
                            TItemValue="TaskDefinitionModel"
                            @bind-Values="@_selectedTaskDefinitionList"
                            DataSource="@_selectedTaskDefinitionList"
                            Mode="multiple"
                            AllowClear
                            AutoFocus
                            Placeholder="选择任务定义"
                            Style="margin-bottom:4px;margin-top:4px"
                            MaxTagCount="50"
                            BoundaryAdjustMode="TriggerBoundaryAdjustMode.InView"
                            EnableSearch
                            DropdownMatchSelectWidth="false">
                    </Select>

                </GridRow>

            </GridRow>
            <GridRow>
                <Space Wrap Style="margin-bottom:16px">
                    <SpaceItem>
                        <RangePicker ValueExpression="() => DateTimes" Size="middle" TValue="DateTime?[]" ShowTime="false" OnChange="OnDatePickerChanged"/>
                    </SpaceItem>
                    <SpaceItem>
                        <Select TItem="TaskExeuctionStatusModel"
                                TItemValue="TaskExecutionStatus"
                                DataSource="@_taskExeuctionStatusList"
                                @bind-Value="@_selectedStatus"
                                LabelName="@nameof(TaskExeuctionStatusModel.Name)"
                                ValueName="@nameof(TaskExeuctionStatusModel.Value)"
                                Placeholder="选择状态"
                                DefaultActiveFirstOption="true"
                                Style="width:200px"
                                OnSelectedItemChanged="OnSelectedStatusChanged">
                        </Select>
                    </SpaceItem>
                    <SpaceItem>
                        <Button Type="@ButtonType.Primary" OnClick="QueryTaskExecutionInstanceListAsync">查询</Button>
                    </SpaceItem>
                </Space>
            </GridRow>
        </TitleTemplate>
        <ColumnDefinitions>
            <Selection Key="@context.Id" Width="40" Fixed="left" Type="checkbox"/>
            <PropertyColumn Title="标志" Sortable="true" Width="100" Property="c => c.Id">
                <Text Ellipsis Copyable Style="max-height:30px;display:flex;flex-direction:row">
                    <div style="overflow: hidden; white-space: nowrap;text-overflow: ellipsis;" title="@context.Id">@context.Id</div>
                </Text>
            </PropertyColumn>
            <PropertyColumn Title="名称" Ellipsis Sortable Property="c => c.Name"></PropertyColumn>
            <PropertyColumn Title="触发源头" Sortable="true" Property="c => c.TriggerSource">
                @switch (context.TriggerSource)
                {
                    case TriggerSource.Schedule:
                        <Text>调度触发</Text>
                        break;
                    case TriggerSource.Manual:
                        <Text>手动触发</Text>
                        break;
                }
            </PropertyColumn>
            <PropertyColumn Title="状态" SorterMultiple="0" SorterCompare="(a, b) => a - b" Sortable="true" DefaultSortOrder="SortDirection.Ascending" Property="c => c.Status">
                @switch (context.Status)
                {
                    case TaskExecutionStatus.Unknown:
                        <Text>未知</Text>
                        break;
                    case TaskExecutionStatus.Triggered:
                        <Text>已触发</Text>
                        break;
                    case TaskExecutionStatus.Pendding:
                        <Text>等待节点响应</Text>
                        break;
                    case TaskExecutionStatus.Started:
                        <Text>已启动</Text>
                        break;
                    case TaskExecutionStatus.Running:
                        <Text>运行中</Text>
                        break;
                    case TaskExecutionStatus.Finished:
                        <Text>完成</Text>
                        break;
                    case TaskExecutionStatus.Cancelled:
                        <Text>已取消</Text>
                        break;
                    case TaskExecutionStatus.Failed:
                        <Text>失败</Text>
                        break;
                    case TaskExecutionStatus.PenddingTimeout:
                        <Text>等待超时</Text>
                        break;
                    case TaskExecutionStatus.PenddingCancel:
                        <Text>等待取消响应</Text>
                        break;
                }
            </PropertyColumn>
            <PropertyColumn Title="触发时间" Ellipsis SorterMultiple="1" SorterCompare="(a, b) => DateTime.Compare(a, b)" Sortable="true" DefaultSortOrder="SortDirection.Descending" Format="@NodePropertyModel.DateTimeFormatString" Property="c => c.FireTimeUtc"></PropertyColumn>
            <PropertyColumn Title="开始时间" Ellipsis SorterMultiple="2" Sortable="true" Format="@NodePropertyModel.DateTimeFormatString" Property="c => c.ExecutionBeginTimeUtc"></PropertyColumn>
            <PropertyColumn Title="结束时间" Ellipsis SorterMultiple="3" Sortable="true" Format="@NodePropertyModel.DateTimeFormatString" Property="c => c.ExecutionEndTimeUtc"></PropertyColumn>
            <PropertyColumn Title="消息" Sortable="true" Ellipsis Property="c => c.Message"></PropertyColumn>
            <ActionColumn Fixed="right" Width="200" Title="操作">
                <CellRender Context="cellData">
                    <Space>
                        @switch (context.Status)
                        {
                            case TaskExecutionStatus.PenddingTimeout:
                            case TaskExecutionStatus.Failed:
                                <SpaceItem>
                                    <Button Shape="@ButtonShape.Circle" OnClick="() => RetryTaskAsync(context)" Type="@ButtonType.Primary" Icon="@IconType.Outline.Redo"></Button>
                                </SpaceItem>
                                break;
                            case TaskExecutionStatus.Running:
                            case TaskExecutionStatus.PenddingCancel:
                                <SpaceItem>
                                    <Button Danger Shape="@ButtonShape.Circle" OnClick="() => CancelTaskAsync(context)" Type="@ButtonType.Primary" Icon="@IconType.Outline.Close"></Button>
                                </SpaceItem>
                                break;
                        }
                        <SpaceItem>
                            <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Eye" OnClick="() => ShowTaskLogViewerDialogAsync(context.Id)">
                            </Button>
                        </SpaceItem>
                        <SpaceItem>
                            <a href="@($"/api/Tasks/Instances/{context.Id}/Log")" target="_blank">
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Download">
                                </Button>
                            </a>
                        </SpaceItem>
                    </Space>
                </CellRender>
            </ActionColumn>
        </ColumnDefinitions>
    </Table>
</GridContent>

@code {

    class TaskExeuctionStatusModel
    {
        public TaskExecutionStatus Value { get; set; }

        public string Name { get; set; }
    }

    CommonDialog _nodeSelectorDialog;
    CommonDialog _taskDefinitionSelectorDialog;
    CommonDialog _taskLogViewerDialog;

    DateTime BeginDateTime;
    DateTime EndDateTime;

    readonly DateTime?[] DateTimes = [default, default];

    string _taskLogDialogTitle = "Loading";

    RoutedPaginationDataSource<TaskExecutionInstanceModel, QueryTaskExecutionInstanceListParameters> _dataSource;


    readonly List<TaskExeuctionStatusModel> _taskExeuctionStatusList = [];

    IEnumerable<NodeInfoModel> _selectedNodeList = [];
    IEnumerable<TaskDefinitionModel> _selectedTaskDefinitionList = [];

    TaskExecutionStatus _selectedStatus;

    [Parameter] public string? TaskExecutionInstanceId { get; set; }

    private string? _taskExecutionInstanceId { get; set; }


    protected override void OnInitialized()
    {
        _taskExeuctionStatusList.Add(new TaskExeuctionStatusModel { Value = TaskExecutionStatus.Unknown, Name = "全部" });
        _taskExeuctionStatusList.Add(new TaskExeuctionStatusModel { Value = TaskExecutionStatus.Triggered, Name = "已触发" });
        _taskExeuctionStatusList.Add(new TaskExeuctionStatusModel { Value = TaskExecutionStatus.Pendding, Name = "等待节点响应" });
        _taskExeuctionStatusList.Add(new TaskExeuctionStatusModel { Value = TaskExecutionStatus.Started, Name = "已启动" });
        _taskExeuctionStatusList.Add(new TaskExeuctionStatusModel { Value = TaskExecutionStatus.Running, Name = "运行中" });
        _taskExeuctionStatusList.Add(new TaskExeuctionStatusModel { Value = TaskExecutionStatus.Failed, Name = "失败" });
        _taskExeuctionStatusList.Add(new TaskExeuctionStatusModel { Value = TaskExecutionStatus.Finished, Name = "完成" });
        _taskExeuctionStatusList.Add(new TaskExeuctionStatusModel { Value = TaskExecutionStatus.Cancelled, Name = "已取消" });
        _taskExeuctionStatusList.Add(new TaskExeuctionStatusModel { Value = TaskExecutionStatus.PenddingTimeout, Name = "等待超时" });
        _taskExeuctionStatusList.Add(new TaskExeuctionStatusModel { Value = TaskExecutionStatus.PenddingCancel, Name = "等待取消响应" });
        _dataSource = new RoutedPaginationDataSource<TaskExecutionInstanceModel, QueryTaskExecutionInstanceListParameters>(NavigationManager.BaseUri, ApiService.QueryTaskExecutionInstancesAsync, StateHasChanged);
        _dataSource.ExceptionHandler = OnExepction;
        base.OnInitialized();
    }

    async Task OnExepction(Exception ex)
    {
        await _notice.Open(new NotificationConfig
        {
            Message = "加载失败",
            Description = ex.ToString()
        });
    }

    protected override async Task OnInitializedAsync()
    {
        BeginDateTime = DateTime.Today.Date.AddDays(-7);
        EndDateTime = DateTime.Today.AddDays(1).Date.AddSeconds(-1);
        DateTimes[0] = BeginDateTime;
        DateTimes[1] = EndDateTime;
        _dataSource.QueryParameters.SortDescriptions.Clear();
        _dataSource.QueryParameters.SortDescriptions.Add(new SortDescription(nameof(TaskExecutionInstanceModel.Status), "ascend"));
        _dataSource.QueryParameters.SortDescriptions.Add(new SortDescription(nameof(TaskExecutionInstanceModel.FireTimeUtc), "descend"));
        await QueryTaskExecutionInstanceListAsync();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!string.IsNullOrEmpty(TaskExecutionInstanceId))
            {
                await ShowTaskLogViewerDialogAsync(TaskExecutionInstanceId);
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    void OnDatePickerChanged(DateRangeChangedEventArgs<DateTime?[]> e)
    {
        BeginDateTime = e.Dates[0] ?? DateTime.Today.Date.AddDays(-7);
        EndDateTime = e.Dates[1] ?? DateTime.Today.Date.AddDays(1).Date.AddSeconds(-1);
    }

    async Task QueryTaskExecutionInstanceListAsync()
    {
        try
        {
            _dataSource.QueryParameters.BeginDateTime = BeginDateTime;
            _dataSource.QueryParameters.EndDateTime = EndDateTime;
            _dataSource.QueryParameters.NodeIdList.Clear();
            if (_selectedNodeList != null)
            {
                _dataSource.QueryParameters.NodeIdList.AddRange(_selectedNodeList.Select(x => x.Id));
            }

            _dataSource.QueryParameters.TaskDefinitionIdList.Clear();
            if (_selectedTaskDefinitionList != null)
            {
                _dataSource.QueryParameters.TaskDefinitionIdList.AddRange(_selectedTaskDefinitionList.Select(x => x.Id));
            }

            _dataSource.QueryParameters.Status = _selectedStatus;

            await _dataSource.RequestAsync();
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = ex.ToString()
            });
        }
    }

    async Task RetryTaskAsync(TaskExecutionInstanceModel instance)
    {
        try
        {
            await ApiService.RetryTaskAsync(instance.Id);
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = ex.ToString()
            });
        }
    }

    async Task CancelTaskAsync(TaskExecutionInstanceModel model)
    {
        try
        {
            await ApiService.CancelTaskAsync(model.Id, new TaskCancellationParameters(model.Id, "WebUser", System.Net.Dns.GetHostName()));
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = ex.ToString()
                });
        }
    }

    void OnSelectedStatusChanged(TaskExeuctionStatusModel status)
    {
    }

    async Task OnTableChange(QueryModel<TaskExecutionInstanceModel> query)
    {
        if (!string.IsNullOrEmpty(TaskExecutionInstanceId))
        {
            return;
        }

        _dataSource.QueryParameters.SortDescriptions.Clear();
        foreach (var sortModel in query.SortModel)
        {
            if (sortModel.Sort == null)
            {
                continue;
            }

            _dataSource.QueryParameters.SortDescriptions.Add(new SortDescription(sortModel.FieldName, sortModel.Sort));
        }

        await _dataSource.RequestAsync();
    }

    async Task ShowTaskLogViewerDialogAsync(string value)
    {
        try
        {
            var rsp = await ApiService.QueryTaskExecutionInstancesAsync(new QueryTaskExecutionInstanceListParameters
            {
                TaskExecutionInstanceIdList = [value]
            });
            if (rsp.ErrorCode == 0 && rsp.Result != null)
            {
                var taskExecutionInstance = rsp.Result.FirstOrDefault();
                if (taskExecutionInstance != null)
                {
                    _taskLogDialogTitle = $"{taskExecutionInstance.Name}";
                    _taskExecutionInstanceId = value;
                    StateHasChanged();
                    await _taskLogViewerDialog.ShowAsync();
                }
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = ex.ToString()
            });
        }
    }

    async Task ShowNodeSelectorDialogAsync()
    {
        await _nodeSelectorDialog.ShowAsync();
    }

    async Task ShowTaskDefinitionSelectorDialogAsync()
    {
        await _taskDefinitionSelectorDialog.ShowAsync();
    }

    Task OnTaskLogViewDialogOpenedAsync()
    {
        return Task.CompletedTask;
    }

    Task OnDialogClosed()
    {
        StateHasChanged();
        return Task.CompletedTask;
    }

    void OnTaskLogViewDialogClosedAsync()
    {
        NavigateToDefault();
    }

    private void NavigateToDefault()
    {
        if (!string.IsNullOrEmpty(TaskExecutionInstanceId))
        {
            TaskExecutionInstanceId = null;
            var uri = NavigationManager.BaseUri;
            NavigationManager.NavigateTo($"{uri}Tasks/Instances");
        }
    }

    public void Dispose()
    {
        _dataSource.Dispose();
    }

}