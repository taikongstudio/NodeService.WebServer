@page "/Identity/Account/Login"
@using NodeService.Infrastructure.Identity
@namespace NodeService.WebServer.Areas.Identity.Pages.Account

@inject LoginService LoginService
@inject NavigationManager NavigationManager
@inject NotificationService _notice


<GridRow Wrap="false">
    <GridCol Flex=@("auto")/>
    <GridCol Flex=@("300px")>
        <Form Style="align-self:center;margin-top:200px;" @ref="_form" Loading="_loading" Model="@_model"
              LabelColSpan="8"
              WrapperColSpan="16"
              OnFinish="OnFinish"
              OnFinishFailed="OnFinishFailed">
            <FormItem Label="用户名">
                <Input @bind-Value="@context.Email"/>
            </FormItem>
            <FormItem Label="密码">
                <InputPassword @bind-Value="@context.Password"/>
            </FormItem>
            <FormItem WrapperColOffset="8" WrapperColSpan="16">
                <Button Type="@ButtonType.Primary" HtmlType="submit">
                    登录
                </Button>
            </FormItem>
        </Form>
    </GridCol>
    <GridCol Flex=@("auto")/>
</GridRow>


@code {

    Form<LoginModel> _form;
    readonly bool _loading = false;
    readonly LoginModel _model = new();
    bool _loginFailed;

    protected override void OnInitialized()
    {
    }


    async Task OnFinish(EditContext editContext)
    {
        try
        {
            string returnUrl = null;
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("ReturnUrl", out var value))
            {
                returnUrl = value.FirstOrDefault();
            }

            if (await LoginService.LoginAsync(_model))
            {
                if (string.IsNullOrEmpty(returnUrl))
                {
                    NavigationManager.NavigateTo("/", true, true);
                }
                else
                {
                    NavigationManager.NavigateTo(returnUrl, true, true);
                }
            }
            else
            {
                await _notice.Open(new NotificationConfig
                {
                    Message = "错误提示",
                    Description = "用户名或密码错误。"
                });
            }
        }
        catch (Exception ex)
        {
            await _notice.Open(new NotificationConfig
            {
                Message = "错误提示",
                Description = ex.Message
            });
        }
    }

    void OnFinishFailed(EditContext editContext)
    {
    }

}